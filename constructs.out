(defmodule MAIN
   (export ?ALL))

(deffunction MAIN::mes_to_numero (?p0))

(deffunction MAIN::to_serial_date (?p0 ?p1 ?p2))

(deftemplate MAIN::nonce
   (slot ticket))

(deftemplate MAIN::ajustes-mensuales
   (slot mes)
   (slot ano)
   (slot partida))

(deftemplate MAIN::registro-de-depreciacion
   (slot metodo-tributario)
   (slot metodo)
   (slot nombre-del-activo)
   (slot cuenta-del-activo)
   (slot cuenta-del-pasivo)
   (slot cuenta-acumuladora)
   (slot mes-de-adquisicion)
   (slot ano-de-adquisicion)
   (slot mes-final)
   (slot ano-final)
   (slot valor-de-adquisicion)
   (slot meses-de-vida-util (default 12))
   (slot ultima-cuota (default 0))
   (slot depreciacion-mensual))

(deftemplate MAIN::registro-de-amortizacion
   (slot metodo-tributario)
   (slot metodo)
   (slot nombre-del-activo)
   (slot cuenta-del-activo)
   (slot cuenta-del-pasivo)
   (slot cuenta-acumuladora)
   (slot mes-de-adquisicion)
   (slot ano-de-adquisicion)
   (slot mes-final)
   (slot ano-final)
   (slot valor-de-adquisicion)
   (slot meses-de-vida-util (default 12))
   (slot ultima-cuota (default 0))
   (slot amortizacion-mensual))

(deftemplate MAIN::remanente-de-iva
   (slot emitido (default false))
   (slot partida)
   (slot determinado (default false))
   (slot ajustado (default false))
   (slot valor (default 0))
   (slot valor-ajustado (default 0))
   (slot mes)
   (slot mes-de-ajuste)
   (slot ano-de-ajuste)
   (slot ano)
   (slot utm))

(deftemplate MAIN::acarreo-de-iva
   (slot valor (default 0))
   (slot ajustado (default false)))

(deftemplate MAIN::selecciones
   (slot regimen)
   (slot liquidar (default paternas))
   (slot origen-de-subcuentas)
   (slot empresa-seleccionada)
   (slot imprimir-detalles)
   (slot inspect-f29-code))

(deftemplate MAIN::contrato
   (slot trabajador)
   (slot jornada)
   (slot dedicacion)
   (slot diaria)
   (slot duracion)
   (slot tipo-de-duracion)
   (slot funcion))

(deftemplate MAIN::afc
   (slot duracion)
   (slot comision))

(deftemplate MAIN::tramo-impuesto-unico
   (slot exento-en-utm)
   (slot tasa))

(deftemplate MAIN::remuneracion
   (slot servicio)
   (slot trabajador)
   (slot bruto)
   (slot monto)
   (slot mes)
   (slot dias-trabajados)
   (slot semana-corrida)
   (slot pagada)
   (slot declarada)
   (slot impuesta))

(deftemplate MAIN::afp
   (slot nombre)
   (slot comision)
   (slot sis)
   (slot afc))

(deftemplate MAIN::salud
   (slot nombre)
   (slot cotizacion))

(deftemplate MAIN::pago-de-salarios
   (slot partida)
   (slot salud)
   (slot afp)
   (slot afc)
   (slot unico (default 0))
   (slot folio-prevision)
   (slot folio-salud)
   (slot remuneracion)
   (slot trabajador)
   (slot dia)
   (slot mes)
   (slot ano)
   (slot multa)
   (slot archivo)
   (slot folio)
   (slot glosa))

(deftemplate MAIN::cobro-de-cuentas-por-cobrar
   (slot partida)
   (slot monto)
   (slot dia)
   (slot mes)
   (slot ano)
   (slot glosa))

(deftemplate MAIN::movilizacion
   (slot proveedor)
   (slot folio)
   (slot partida)
   (slot dia)
   (slot mes)
   (slot ano)
   (slot monto))

(deftemplate MAIN::compra-de-acciones
   (slot realizada (default false))
   (slot partida)
   (slot dia)
   (slot mes)
   (slot ano)
   (slot numero-de-acciones (default 0))
   (slot valor-nominal)
   (slot cedente)
   (slot comprador))

(deftemplate MAIN::inicio-de-acciones
   (slot partida)
   (slot dia)
   (slot mes)
   (slot ano)
   (slot numero-de-acciones (default 0))
   (slot valor-nominal)
   (slot accionista))

(deftemplate MAIN::constitucion-de-spa
   (slot mes)
   (slot ano)
   (slot partida)
   (slot capital)
   (slot numero-de-acciones)
   (slot serie)
   (slot nominativa)
   (slot valor-nominal))

(deftemplate MAIN::registro-de-accionistas
   (slot partida)
   (slot nombre)
   (slot mes)
   (slot ano)
   (slot mostrado-en-partida (default false)))

(deftemplate MAIN::accionista
   (slot numero-de-acciones (default 0))
   (slot valor-nominal)
   (slot mes)
   (slot ano)
   (slot empresa)
   (slot nombre)
   (slot rut)
   (slot social)
   (slot domicilio))

(deftemplate MAIN::trabajador
   (slot diaria)
   (slot afp)
   (slot salud)
   (slot mes-inicio)
   (slot ano-inicio)
   (slot empresa)
   (slot nombre)
   (slot rut)
   (slot social)
   (slot domicilio)
   (slot bruto-mensual)
   (slot duracion))

(deftemplate MAIN::proveedor
   (slot nombre)
   (slot rut)
   (slot social)
   (slot padre))

(deftemplate MAIN::ccm
   (slot partida)
   (slot voucher)
   (slot tipo-documento)
   (slot folio (default ''))
   (slot rut-contraparte (default ''))
   (slot tasa-impuesto (default 19))
   (slot razon-social-contraparte (default ''))
   (slot tipo-impuesto (default 1))
   (slot fecha-emision)
   (slot anulado (default ''))
   (slot monto-exento (default 0))
   (slot monto-neto (default 0))
   (slot monto-iva-recuperable (default 0))
   (slot codigo-iva-no-recuperable (default ''))
   (slot monto-iva-no-recuperable (default ''))
   (slot iva-uso-comun (default ''))
   (slot codigo-otro-impuesto-con-credito (default ''))
   (slot tasa-otro-impuesto-con-credito (default ''))
   (slot monto-otro-impuesto-con-credito (default ''))
   (slot monto-total (default ''))
   (slot monto-otro-impuesto-sin-credito (default ''))
   (slot monto-activo-fijo (default ''))
   (slot monto-iva-activo-fijo (default ''))
   (slot iva-no-retenido (default ''))
   (slot tabacos-puros (default ''))
   (slot tabacos-cigarrillos (default ''))
   (slot tabacos-elaborados (default ''))
   (slot impuesto-a-vehiculos-automoviles (default ''))
   (slot codigo-sucursal-sii (default ''))
   (slot numero-interno (default ''))
   (slot emisor-receptor (default ''))
   (slot tasa-iva-retenido (default 19)))

(deftemplate MAIN::depreciacion
   (slot partida)
   (slot folio)
   (slot herramienta)
   (slot dia)
   (slot mes)
   (slot ano)
   (slot monto)
   (slot pagado (default false)))

(deftemplate MAIN::amortizacion
   (slot partida)
   (slot folio)
   (slot intangible)
   (slot dia)
   (slot mes)
   (slot ano)
   (slot monto)
   (slot pagado (default false)))

(deftemplate MAIN::amortizacion-instantanea-extracontable
   (slot intangible)
   (slot mes)
   (slot ano)
   (slot partida)
   (slot pagado)
   (slot monto))

(deftemplate MAIN::pea
   (slot partida))

(deftemplate MAIN::distribucion-de-utilidad
   (slot partida)
   (slot dia)
   (slot mes)
   (slot ano)
   (slot monto)
   (slot archivo)
   (slot cuenta-de-destino))

(deftemplate MAIN::traspaso
   (slot dia)
   (slot mes)
   (slot ano)
   (slot partida)
   (slot cuenta-de-origen)
   (slot cuenta-de-destino))

(deftemplate MAIN::tasas
   (slot ano)
   (slot mes)
   (slot utm)
   (slot ppm)
   (slot idpc)
   (slot honorarios))

(deftemplate MAIN::sumar
   (slot partida)
   (slot tipo-de-documento)
   (slot qty (default 1))
   (slot cuenta)
   (slot mes)
   (slot ano)
   (slot debe (default 0))
   (slot haber (default 0)))

(deftemplate MAIN::acumulador-mensual
   (slot tipo-de-documento)
   (slot qty (default 0))
   (slot cuenta)
   (slot mes)
   (slot ano)
   (slot debe (default 0))
   (slot haber (default 0)))

(deftemplate MAIN::formulario-f29
   (slot mostrado-en-partida (default false))
   (slot descripcion)
   (slot codigo)
   (slot valor)
   (slot mes)
   (slot ano)
   (slot partida))

(deftemplate MAIN::formulario-f22
   (slot descripcion)
   (slot codigo)
   (slot valor)
   (slot ano)
   (slot partida))

(deftemplate MAIN::f22
   (slot partida)
   (slot ano))

(deftemplate MAIN::f29
   (slot partida)
   (slot mes)
   (slot ano))

(deftemplate MAIN::puede-pagar-iva
   (slot mes))

(deftemplate MAIN::subcuenta
   (slot origen))

(deftemplate MAIN::ajuste-de-remanente-de-iva
   (slot mes-que-se-declara-en-el-f29)
   (slot mes-en-que-se-presenta-el-f29)
   (slot mes-que-genero-remanente)
   (slot mostrar-en)
   (slot ano-anterior)
   (slot mes-anterior)
   (slot antes (default 0))
   (slot ahora (default 0))
   (slot pagado (default false))
   (slot mes-de-pago)
   (slot ano-de-pago)
   (slot folio)
   (slot partida)
   (slot dia)
   (slot mes)
   (slot ano))

(deftemplate MAIN::ajuste-de-iva-contra-debito
   (slot monto (default 0))
   (slot pagado (default false))
   (slot mes-de-pago)
   (slot folio)
   (slot partida)
   (slot dia)
   (slot mes)
   (slot ano))

(deftemplate MAIN::ajuste-de-iva-contra-credito
   (slot monto (default 0))
   (slot pagado (default false))
   (slot mes-de-pago)
   (slot folio)
   (slot partida)
   (slot dia)
   (slot mes)
   (slot ano))

(deftemplate MAIN::pago-de-iva
   (slot monto)
   (slot pagado (default false))
   (slot mes-de-pago)
   (slot folio)
   (slot partida)
   (slot dia)
   (slot mes)
   (slot ano))

(deftemplate MAIN::declaracion-de-ppm
   (slot pagado (default false))
   (slot mes-de-pago)
   (slot folio)
   (slot partida)
   (slot dia)
   (slot mes)
   (slot ano))

(deftemplate MAIN::pago-de-ppm
   (slot pagado (default false))
   (slot mes-de-pago)
   (slot folio)
   (slot partida)
   (slot dia)
   (slot mes)
   (slot ano))

(deftemplate MAIN::pago-de-retenciones-de-honorarios
   (slot rut)
   (slot monto (default 0))
   (slot pagado (default false))
   (slot mes-de-pago)
   (slot folio)
   (slot partida)
   (slot dia)
   (slot mes)
   (slot ano))

(deftemplate MAIN::pago-de-ppv
   (slot monto)
   (slot pagado (default false))
   (slot mes-de-pago)
   (slot folio)
   (slot partida)
   (slot dia)
   (slot mes)
   (slot ano))

(deftemplate MAIN::rendicion-de-eboletas-sii
   (slot folio)
   (slot partida)
   (slot unidades)
   (slot mes)
   (slot ano)
   (slot neto)
   (slot total)
   (slot iva))

(deftemplate MAIN::rendicion-de-vouchers-sii
   (slot partida)
   (slot unidades)
   (slot mes)
   (slot ano)
   (slot neto)
   (slot total)
   (slot iva))

(deftemplate MAIN::revision
   (slot cuenta (default ""))
   (slot voucher (default " "))
   (slot old (default " "))
   (slot a-corregir (default " "))
   (slot rcv (default "no"))
   (slot ccm (default "no"))
   (slot libro-diario (default "no"))
   (slot legal (default " "))
   (slot tipo (default " "))
   (slot folio (default " "))
   (slot revisado (default "no"))
   (slot partida (default " "))
   (slot descripcion (default " "))
   (slot rechazado (default false))
   (slot reclamado (default false))
   (slot no-incluir (default false))
   (slot dia)
   (slot mes)
   (slot ano))

(deftemplate MAIN::nota-de-credito-sii
   (slot rut)
   (slot folio-nota)
   (slot folio)
   (slot partida)
   (slot dia)
   (slot mes)
   (slot ano)
   (slot archivo))

(deftemplate MAIN::nota-de-debito-sii
   (slot archivo)
   (slot rut)
   (slot folio-credito)
   (slot folio-debito)
   (slot partida)
   (slot dia)
   (slot mes)
   (slot ano))

(deftemplate MAIN::nota-de-debito-manual
   (slot archivo)
   (slot rut)
   (slot subcuenta)
   (slot neto)
   (slot iva)
   (slot total)
   (slot folio-credito)
   (slot folio-debito)
   (slot partida)
   (slot dia)
   (slot mes)
   (slot ano))

(deftemplate MAIN::anulacion-de-vouchers
   (slot rut)
   (slot recibida (default false))
   (slot emitida (default false))
   (slot partida)
   (slot folio-nota)
   (slot subcuenta)
   (slot dia)
   (slot mes)
   (slot ano)
   (slot neto)
   (slot glosa)
   (slot iva)
   (slot total))

(deftemplate MAIN::nota-de-credito-de-subcuenta-existente
   (slot archivo)
   (slot rut)
   (slot proveedor)
   (slot recibida (default false))
   (slot emitida (default false))
   (slot partida)
   (slot folio-nota)
   (slot subcuenta)
   (slot dia)
   (slot mes)
   (slot ano)
   (slot neto)
   (slot glosa)
   (slot iva)
   (slot total))

(deftemplate MAIN::nota-de-credito-de-factura-reclamada
   (slot cuenta-de-pago)
   (slot partida)
   (slot glosa)
   (slot folio-factura)
   (slot folio-nota)
   (slot dia)
   (slot mes)
   (slot ano))

(deftemplate MAIN::nota-de-credito-de-proveedor
   (slot rut)
   (slot folio-nota)
   (slot folio)
   (slot partida)
   (slot dia)
   (slot mes)
   (slot ano))

(deftemplate MAIN::nota-de-credito
   (slot rut)
   (slot colaborador)
   (slot material)
   (slot folio-nota)
   (slot folio)
   (slot iva)
   (slot neto)
   (slot total)
   (slot partida)
   (slot dia)
   (slot mes)
   (slot ano))

(deftemplate MAIN::actual
   (slot mes))

(deftemplate MAIN::imposiciones
   (slot rut)
   (slot dia)
   (slot mes)
   (slot ano)
   (slot mes-de-pago)
   (slot pagadas (default false)))

(deftemplate MAIN::deposito
   (slot rut)
   (slot partida)
   (slot banco)
   (slot monto)
   (slot mes)
   (slot dia)
   (slot ano)
   (slot glosa))

(deftemplate MAIN::ticket
   (slot numero))

(deftemplate MAIN::ajuste-de-iva
   (slot partida)
   (slot haber (default 0))
   (slot debe (default 0))
   (slot mes)
   (slot ano)
   (slot hecho (default false)))

(deftemplate MAIN::partida-inventario-final
   (slot partida)
   (slot hecho))

(deftemplate MAIN::footer
   (slot empresa)
   (slot dia)
   (slot mes)
   (slot ano)
   (slot partida)
   (slot mostrado-en-partida (default false))
   (slot debe (default 0))
   (slot haber (default 0)))

(deftemplate MAIN::subtotales
   (slot rut)
   (slot cuenta)
   (slot mes)
   (slot mostrar-en-comprobacion (default true))
   (slot mostrado-en-resumen (default false))
   (slot anotado (default false))
   (slot debe (default 0))
   (slot haber (default 0))
   (slot deber (default 0))
   (slot acreedor (default 0))
   (slot totalizado (default false))
   (slot mostrado (default false)))

(deftemplate MAIN::mensuales
   (slot rut)
   (slot cuenta)
   (slot mes)
   (slot mostrar-en-comprobacion (default true))
   (slot mostrado-en-resumen (default false))
   (slot anotado (default false))
   (slot debe (default 0))
   (slot haber (default 0))
   (slot deber (default 0))
   (slot acreedor (default 0))
   (slot totalizado (default false))
   (slot mostrado (default false)))

(deftemplate MAIN::totales
   (slot empresa)
   (slot debe (default 0))
   (slot haber (default 0))
   (slot deber (default 0))
   (slot acreedor (default 0))
   (slot totalizado (default false))
   (slot pasivos (default 0))
   (slot pasivo-circulante (default 0))
   (slot pasivo-fijo (default 0))
   (slot activos (default 0))
   (slot activo-circulante (default 0))
   (slot activo-fijo (default 0))
   (slot resultados (default 0))
   (slot patrimonio (default 0)))

(deftemplate MAIN::comando
   (slot nombre)
   (slot realizado (default false)))

(deftemplate MAIN::pedido
   (slot id)
   (slot partida)
   (slot dia)
   (slot mes)
   (slot ano))

(deftemplate MAIN::inventario
   (slot empresa)
   (slot pedido)
   (slot referencia)
   (slot cliente)
   (slot proveedor)
   (slot material)
   (slot dia)
   (slot mes)
   (slot ano)
   (slot operacion)
   (slot debe (default 0))
   (slot haber (default 0))
   (slot saldo (default 0))
   (slot fecha)
   (slot u)
   (slot cu)
   (slot ct)
   (slot partida)
   (slot glosa))

(deftemplate MAIN::accionario
   (slot empresa)
   (slot cliente)
   (slot proveedor)
   (slot material)
   (slot dia)
   (slot mes)
   (slot ano)
   (slot operacion)
   (slot debe (default 0))
   (slot haber (default 0))
   (slot saldo (default 0))
   (slot fecha)
   (slot u)
   (slot cu)
   (slot ct)
   (slot partida)
   (slot glosa))

(deftemplate MAIN::encabezado
   (slot partida))

(deftemplate MAIN::ejercicio
   (slot desde (default 1))
   (slot hasta (default 1)))

(deftemplate MAIN::partida
   (slot archivo)
   (slot proveedor)
   (slot old)
   (slot empresa)
   (slot dia)
   (slot mes)
   (slot ano)
   (slot numero)
   (slot debe (default 0))
   (slot haber (default 0))
   (slot actividad)
   (slot descripcion))

(deftemplate MAIN::partida-mensual
   (slot empresa)
   (slot dia)
   (slot mes)
   (slot ano)
   (slot numero)
   (slot debe (default 0))
   (slot haber (default 0))
   (slot descripcion))

(deftemplate MAIN::empresa
   (slot nombre)
   (slot razon))

(deftemplate MAIN::cuenta
   (slot abono)
   (slot cargo)
   (slot saldo-deudor)
   (slot saldo-acreedor)
   (slot ajustado-iva (default false))
   (slot mostrar-en-comprobacion (default true))
   (slot tributada (default false))
   (slot tributada-en-aportes (default false))
   (slot tributada-en-deducciones (default false))
   (slot recibida (default false))
   (slot activo-fijo (default false))
   (slot tipo-de-documento)
   (slot qty (default 0))
   (slot electronico (default false))
   (slot codigo-sii (default ""))
   (slot nombre-sii (default ""))
   (slot nombre (default ""))
   (slot parte)
   (slot dia)
   (slot mes)
   (slot ano)
   (slot de-resultado (default false))
   (slot liquidada (default false))
   (slot circulante (default false))
   (slot totalizado-como-activo (default false))
   (slot mostrado-en-t (default false))
   (slot partida)
   (slot mostrada-en-partida (default false))
   (slot mostrada-en-kindle (default false))
   (slot traspasado-a-inventario (default false))
   (slot totalizada-como-activo (default false))
   (slot totalizada-como-activo-circulante (default false))
   (slot totalizada-como-activo-fijo (default false))
   (slot totalizada-como-pasivo (default false))
   (slot totalizada-como-pasivo-circulante (default false))
   (slot totalizada-como-pasivo-fijo (default false))
   (slot totalizada-como-patrimonio (default false))
   (slot reseteada (default false))
   (slot empresa (default false))
   (slot mayoreado (default false))
   (slot padre (default false))
   (slot balanceado (default false))
   (slot descripcion (default ""))
   (slot verificada (default false))
   (slot codigo (default ""))
   (slot debe (default 0))
   (slot haber (default 0))
   (slot saldo (default 0))
   (slot tipo (default false))
   (slot grupo (default false))
   (slot naturaleza (default false))
   (slot origen (default false)))

(deftemplate MAIN::cargo
   (slot recibida (default false))
   (slot activo-fijo (default false))
   (slot qty (default 1))
   (slot tipo-de-documento)
   (slot electronico (default true))
   (slot partida)
   (slot dia)
   (slot mes)
   (slot ano)
   (slot realizado (default false))
   (slot empresa)
   (slot cuenta)
   (slot monto (default 0))
   (slot glosa))

(deftemplate MAIN::abono
   (slot recibida (default false))
   (slot activo-fijo (default false))
   (slot tipo-de-documento)
   (slot qty (default 1))
   (slot electronico (default true))
   (slot partida)
   (slot dia)
   (slot mes)
   (slot ano)
   (slot realizado (default false))
   (slot empresa)
   (slot cuenta)
   (slot monto (default 0))
   (slot glosa))

(deftemplate MAIN::gasto-sobre-compras
   (slot folio)
   (slot rut)
   (slot tipo-de-documento)
   (slot qty (default 1))
   (slot partida)
   (slot dia)
   (slot mes)
   (slot ano)
   (slot unidades)
   (slot costo_unitario)
   (slot finalidad)
   (slot material)
   (slot credito)
   (slot neto (default 0))
   (slot iva (default 0))
   (slot total (default 0))
   (slot proveedor (default nil))
   (slot servicio (default servicio))
   (slot glosa (default nil))
   (slot monto (default 0)))

(deftemplate MAIN::costo-ventas
   (slot tipo-de-documento)
   (slot rut)
   (slot folio)
   (slot archivo)
   (slot partida)
   (slot dia)
   (slot mes)
   (slot ano)
   (slot finalidad)
   (slot material)
   (slot credito)
   (slot neto (default 0))
   (slot iva (default 0))
   (slot total (default 0))
   (slot proveedor (default nil))
   (slot cliente)
   (slot servicio (default servicio))
   (slot glosa (default nil))
   (slot monto (default 0)))

(deftemplate MAIN::gasto-ventas
   (slot tipo-de-documento)
   (slot rut)
   (slot folio)
   (slot archivo)
   (slot partida)
   (slot dia)
   (slot mes)
   (slot ano)
   (slot finalidad)
   (slot material)
   (slot credito)
   (slot neto (default 0))
   (slot iva (default 0))
   (slot total (default 0))
   (slot proveedor (default nil))
   (slot cliente)
   (slot servicio (default servicio))
   (slot glosa (default nil))
   (slot monto (default 0)))

(deftemplate MAIN::gasto-afecto
   (slot archivo)
   (slot folio)
   (slot rut)
   (slot tipo-de-documento)
   (slot partida)
   (slot dia)
   (slot mes)
   (slot ano)
   (slot finalidad)
   (slot material)
   (slot credito)
   (slot neto (default 0))
   (slot iva (default 0))
   (slot total (default 0))
   (slot proveedor (default nil))
   (slot servicio (default servicio))
   (slot glosa (default nil))
   (slot monto (default 0)))

(deftemplate MAIN::gasto-investigacion-y-desarrollo
   (slot tipo-de-documento)
   (slot electronico (default true))
   (slot iva-retenido)
   (slot archivo)
   (slot folio)
   (slot rut)
   (slot partida)
   (slot dia)
   (slot mes)
   (slot ano)
   (slot finalidad)
   (slot material)
   (slot credito)
   (slot neto (default 0))
   (slot iva (default 0))
   (slot total (default 0))
   (slot proveedor (default nil))
   (slot servicio (default servicio))
   (slot glosa (default nil))
   (slot monto (default 0)))

(deftemplate MAIN::gasto-promocional
   (slot tipo-de-documento)
   (slot electronico (default true))
   (slot iva-retenido)
   (slot archivo)
   (slot folio)
   (slot rut)
   (slot partida)
   (slot dia)
   (slot mes)
   (slot ano)
   (slot finalidad)
   (slot material)
   (slot credito)
   (slot neto (default 0))
   (slot iva (default 0))
   (slot total (default 0))
   (slot proveedor (default nil))
   (slot servicio (default servicio))
   (slot glosa (default nil))
   (slot monto (default 0)))

(deftemplate MAIN::gasto-administrativo
   (slot tipo-de-documento)
   (slot electronico (default true))
   (slot iva-retenido)
   (slot archivo)
   (slot folio)
   (slot rut)
   (slot partida)
   (slot dia)
   (slot mes)
   (slot ano)
   (slot finalidad)
   (slot material)
   (slot credito)
   (slot neto (default 0))
   (slot iva (default 0))
   (slot total (default 0))
   (slot proveedor (default nil))
   (slot servicio (default servicio))
   (slot glosa (default nil))
   (slot monto (default 0)))

(deftemplate MAIN::gasto-proveedor
   (slot tipo-de-documento)
   (slot electronico (default true))
   (slot iva-retenido)
   (slot archivo)
   (slot folio)
   (slot rut)
   (slot partida)
   (slot dia)
   (slot mes)
   (slot ano)
   (slot finalidad)
   (slot material)
   (slot credito)
   (slot neto (default 0))
   (slot iva (default 0))
   (slot total (default 0))
   (slot proveedor (default nil))
   (slot servicio (default servicio))
   (slot glosa (default nil))
   (slot monto (default 0)))

(deftemplate MAIN::despago
   (slot folio)
   (slot rut)
   (slot partida)
   (slot dia)
   (slot mes)
   (slot ano)
   (slot finalidad)
   (slot neto (default 0))
   (slot iva (default 0))
   (slot total (default 0))
   (slot proveedor (default nil))
   (slot servicio (default servicio))
   (slot glosa (default nil))
   (slot monto (default 0)))

(deftemplate MAIN::pago
   (slot folio)
   (slot rut)
   (slot tipo-de-documento)
   (slot partida)
   (slot dia)
   (slot mes)
   (slot ano)
   (slot cliente)
   (slot finalidad)
   (slot neto (default 0))
   (slot iva (default 0))
   (slot total (default 0))
   (slot proveedor (default nil))
   (slot servicio (default servicio))
   (slot glosa (default nil))
   (slot monto (default 0)))

(deftemplate MAIN::salario
   (slot rut)
   (slot partida)
   (slot dia)
   (slot mes)
   (slot ano)
   (slot impuesto)
   (slot finalidad)
   (slot departamento (default nil))
   (slot nombre)
   (slot servicio)
   (slot glosa (default nil))
   (slot efectivo (default 0)))

(deftemplate MAIN::honorario
   (slot rut)
   (slot partida)
   (slot dia)
   (slot mes)
   (slot ano)
   (slot finalidad)
   (slot profesional)
   (slot servicio (default servicio))
   (slot glosa (default nil))
   (slot bruto (default 0)))

(deftemplate MAIN::compra-mercaderia
   (slot rut)
   (slot qty (default 1))
   (slot tipo-de-documento)
   (slot electronico (default true))
   (slot intangible)
   (slot partida)
   (slot dia)
   (slot mes)
   (slot ano)
   (slot unidades)
   (slot costo_unitario)
   (slot finalidad)
   (slot glosa)
   (slot herramienta)
   (slot material)
   (slot afecto (default true))
   (slot credito)
   (slot letras)
   (slot efectivo)
   (slot proveedor)
   (slot iva (default 0))
   (slot neto (default 0))
   (slot total (default 0)))

(deftemplate MAIN::compra
   (slot pedido)
   (slot archivo)
   (slot folio)
   (slot rut)
   (slot activo-fijo (default false))
   (slot descuento)
   (slot qty (default 1))
   (slot tipo-de-documento)
   (slot electronico (default true))
   (slot intangible)
   (slot partida)
   (slot dia)
   (slot mes)
   (slot ano)
   (slot unidades)
   (slot costo_unitario)
   (slot finalidad)
   (slot glosa)
   (slot herramienta)
   (slot material)
   (slot afecto (default true))
   (slot credito)
   (slot letras)
   (slot efectivo)
   (slot proveedor)
   (slot iva (default 0))
   (slot neto (default 0))
   (slot total (default 0)))

(deftemplate MAIN::insumos
   (slot archivo)
   (slot pedido)
   (slot folio)
   (slot rut)
   (slot activo-fijo (default false))
   (slot descuento)
   (slot qty (default 1))
   (slot tipo-de-documento)
   (slot electronico (default true))
   (slot intangible)
   (slot partida)
   (slot dia)
   (slot mes)
   (slot ano)
   (slot unidades)
   (slot costo_unitario)
   (slot finalidad)
   (slot glosa)
   (slot herramienta)
   (slot material)
   (slot afecto (default true))
   (slot credito)
   (slot letras)
   (slot efectivo)
   (slot proveedor)
   (slot iva (default 0))
   (slot neto (default 0))
   (slot total (default 0)))

(deftemplate MAIN::compra-de-materiales
   (slot pedido)
   (slot archivo)
   (slot folio)
   (slot rut)
   (slot activo-fijo (default false))
   (slot descuento)
   (slot qty (default 1))
   (slot tipo-de-documento)
   (slot electronico (default true))
   (slot intangible)
   (slot partida)
   (slot dia)
   (slot mes)
   (slot ano)
   (slot unidades)
   (slot costo_unitario)
   (slot finalidad)
   (slot glosa)
   (slot herramienta)
   (slot material)
   (slot afecto (default true))
   (slot credito)
   (slot letras)
   (slot efectivo)
   (slot proveedor)
   (slot iva (default 0))
   (slot neto (default 0))
   (slot total (default 0)))

(deftemplate MAIN::venta-sii
   (slot archivo)
   (slot qty (default 1))
   (slot tipo-de-documento)
   (slot electronico (default true))
   (slot folio)
   (slot rut)
   (slot partida)
   (slot dia)
   (slot mes)
   (slot ano)
   (slot costo_unitario)
   (slot unidades)
   (slot finalidad)
   (slot herramienta)
   (slot material)
   (slot afecta (default true))
   (slot credito)
   (slot efectivo)
   (slot cliente)
   (slot colaborador)
   (slot exento (default 0))
   (slot iva (default 0))
   (slot neto (default 0))
   (slot total (default 0)))

(deftemplate MAIN::venta-anticipada
   (slot tipo-de-documento)
   (slot electronico (default true))
   (slot folio)
   (slot rut)
   (slot partida)
   (slot dia)
   (slot mes)
   (slot ano)
   (slot costo_unitario)
   (slot unidades)
   (slot finalidad)
   (slot herramienta)
   (slot material)
   (slot afecta (default true))
   (slot credito)
   (slot efectivo)
   (slot cliente)
   (slot colaborador)
   (slot exento (default 0))
   (slot iva (default 0))
   (slot neto (default 0))
   (slot total (default 0)))

(deftemplate MAIN::venta
   (slot tipo-de-documento)
   (slot electronico (default true))
   (slot folio)
   (slot rut)
   (slot partida)
   (slot dia)
   (slot mes)
   (slot ano)
   (slot costo_unitario)
   (slot unidades)
   (slot finalidad)
   (slot herramienta)
   (slot material)
   (slot afecta (default true))
   (slot credito)
   (slot efectivo)
   (slot cliente)
   (slot colaborador)
   (slot exento (default 0))
   (slot iva (default 0))
   (slot neto (default 0))
   (slot total (default 0))
   (slot glosa)
   (slot archivo))

(deftemplate MAIN::devolucion
   (slot rut)
   (slot tipo-de-documento)
   (slot partida)
   (slot dia)
   (slot mes)
   (slot ano)
   (slot costo_unitario)
   (slot unidades (default 0))
   (slot finalidad)
   (slot glosa)
   (slot material)
   (slot afecta (default true))
   (slot cliente)
   (slot iva (default 0))
   (slot neto (default 0))
   (slot total (default 0)))

(deftemplate MAIN::gasto
   (slot rut)
   (slot tipo-de-documento)
   (slot partida)
   (slot dia)
   (slot mes)
   (slot ano)
   (slot finalidad)
   (slot intangible (default nil))
   (slot material (default nil))
   (slot monto (default 0)))

(deftemplate MAIN::merma
   (slot rut)
   (slot partida)
   (slot dia)
   (slot mes)
   (slot ano)
   (slot finalidad)
   (slot material (default nil))
   (slot monto (default 0)))

(deftemplate MAIN::reparacion
   (slot rut)
   (slot partida)
   (slot dia)
   (slot mes)
   (slot ano)
   (slot finalidad)
   (slot material)
   (slot costo (default 0))
   (slot precio (default 0)))

(deftemplate MAIN::ecuacion
   (slot partida)
   (slot dia)
   (slot mes)
   (slot ano)
   (slot empresa)
   (slot pasivos (default 0))
   (slot pasivo-circulante (default 0))
   (slot pasivo-fijo (default 0))
   (slot activos (default 0))
   (slot activo-circulante (default 0))
   (slot activo-fijo (default 0))
   (slot resultados (default 0))
   (slot patrimonio (default 0)))

(deftemplate MAIN::liquidacion
   (slot tipo-de-saldo)
   (slot partida)
   (slot dia)
   (slot mes)
   (slot ano)
   (slot liquidadora)
   (slot cuenta))

(deftemplate MAIN::tributacion
   (slot efecto)
   (slot tipo-de-saldo)
   (slot partida)
   (slot dia)
   (slot mes)
   (slot ano)
   (slot liquidadora)
   (slot cuenta))

(deftemplate MAIN::provision
   (slot tipo-de-saldo)
   (slot partida)
   (slot dia)
   (slot mes)
   (slot ano)
   (slot liquidadora)
   (slot cuenta))

(deftemplate MAIN::reposicion
   (slot partida)
   (slot dia)
   (slot mes)
   (slot ano)
   (slot finalidad)
   (slot cuenta)
   (slot monto))

(deftemplate MAIN::comision
   (slot rut)
   (slot partida)
   (slot dia)
   (slot mes)
   (slot ano)
   (slot finalidad)
   (slot pasarela (default efectivo))
   (slot colaborador)
   (slot servicio)
   (slot monto))

(deftemplate MAIN::prestamo
   (slot rut)
   (slot partida)
   (slot dia)
   (slot mes)
   (slot ano)
   (slot finalidad)
   (slot banco)
   (slot monto)
   (slot interes))

(deftemplate MAIN::balance
   (slot dia (default 1))
   (slot mes)
   (slot ano))

(deffunction MAIN::mes_to_numero
   (?mes)
   (switch ?mes
      (case enero then
         1)
      (case febrero then
         2)
      (case marzo then
         3)
      (case abril then
         4)
      (case mayo then
         5)
      (case junio then
         6)
      (case julio then
         7)
      (case agosto then
         8)
      (case septiembre then
         9)
      (case octubre then
         10)
      (case noviembre then
         11)
      (case diciembre then
         12)))

(deffunction MAIN::to_serial_date
   (?dia ?mes ?ano)
   (+ (* 10000 ?ano) (* 100 (mes_to_numero ?mes)) ?dia))

(defrule MAIN::seleccion-de-empresa
   =>
   (load-facts "selecciones.txt"))

(defrule MAIN::inicio-modulo-main
   (declare (salience 10000))
   (selecciones (empresa-seleccionada ?empresa))
   =>
   (printout t crlf crlf "------------- MAIN ----------------------" ?empresa crlf crlf crlf)
   (bind ?archivo (str-cat ?empresa "-facts.txt"))
   (printout t archivo-facts tab ?archivo crlf)
   (load-facts ?archivo)
   (bind ?archivo (str-cat ?empresa "-revisiones.txt"))
   (printout t archivo-revisiones tab ?archivo crlf)
   (load-facts ?archivo)
   (bind ?archivo (str-cat ?empresa "-revisiones-cuentas.txt"))
   (printout t archivo-revisiones-cuentas tab ?archivo crlf)
   (load-facts ?archivo)
   (bind ?archivo (str-cat ?empresa "-dribble.txt"))
   (printout t archivo-dribble tab ?archivo crlf)
   (dribble-on ?archivo)
   (bind ?archivo (str-cat ?empresa "-tasas.txt"))
   (printout t archivo-tasas tab ?archivo crlf)
   (load-facts ?archivo)
   (bind ?archivo (str-cat ?empresa "-valor-activos.txt"))
   (printout t archivo-valor-activos tab ?archivo crlf)
   (load-facts ?archivo)
   (bind ?archivo (str-cat "proveedores.txt"))
   (printout t archivo-proveedores tab ?archivo crlf)
   (load-facts ?archivo)
   (bind ?archivo (str-cat "trabajadores.txt"))
   (printout t archivo-trabajadores tab ?archivo crlf)
   (load-facts ?archivo)
   (bind ?archivo (str-cat "remuneraciones.txt"))
   (printout t archivo-remuneraciones tab ?archivo crlf)
   (load-facts ?archivo)
   (bind ?archivo (str-cat "afps.txt"))
   (printout t archivo-afps tab ?archivo crlf)
   (load-facts ?archivo)
   (bind ?archivo (str-cat "afc.txt"))
   (printout t archivo-afc tab ?archivo crlf)
   (load-facts ?archivo)
   (bind ?archivo (str-cat "salud.txt"))
   (printout t archivo-salud tab ?archivo crlf)
   (load-facts ?archivo)
   (bind ?archivo (str-cat "tramos-de-impuesto-unico.txt"))
   (printout t archivo-impuestos tab ?archivo crlf)
   (load-facts ?archivo)
   (bind ?archivo (str-cat "contratos.txt"))
   (printout t archivo-contratos tab ?archivo crlf)
   (load-facts ?archivo)
   (bind ?archivo (str-cat "accionistas.txt"))
   (printout t archivo-accionistas tab ?archivo crlf)
   (load-facts ?archivo)
   (bind ?archivo (str-cat "cuentas.txt"))
   (printout t archivo-cuentas tab ?archivo crlf)
   (load-facts ?archivo)
   (assert (actual (mes enero)))
   (assert (actual (mes febrero)))
   (assert (actual (mes marzo)))
   (assert (actual (mes abril)))
   (assert (actual (mes mayo)))
   (assert (actual (mes junio)))
   (assert (actual (mes julio)))
   (assert (actual (mes agosto)))
   (assert (actual (mes septiembre)))
   (assert (actual (mes octubre)))
   (assert (actual (mes noviembre)))
   (assert (actual (mes diciembre)))
   (focus PEDIDO PRIMITIVA ACTIVIDAD PRIMITIVA MENSUAL PRIMITIVA IVA PAGAR VALOR_ACTIVOS PRIMITIVA ECUACION PARTIDA T TOTAL RESULTADO-SII COMPROBACION FINANCIERO RECUADRO AJUSTE INVENTARIO LIQUIDACION INVENTARIO_FINAL AJUSTE TA TRIBUTARIO AJUSTEC TOTALC FINAL SUBCUENTA CCM RCV REMUNERACIONES)
   <
   <
   <
   <
   <
   <
   <
   HEAD
   (save "constructs.out")
   =======
   (focus PRIMITIVA ACTIVIDAD)
   >>>>>>>
   d3015c00ea64fcb2ab6def398176da8f5cd054a6
   (printout t "1. Usar el asistente csm sii f29" crlf "2. Comparar con asistente f29 alectrico" crlf "3. Ver si hay saldo debito y restarlo a saldo credito, hay un procedimiento para ello: pago-de-via." crlf "4. Lo que quede de saldo de iva-credito se coloca en código 77, hay un procedimiento: remanente-iva se debe coloar el iva-credito en este procedimiento" crlf "5. Pagar los ppm si hay monto imponible, se hace con procedimiento pago-ppm" crlf "6. Pagar las retenciones pendientes, se hace junto con la declarion y pago de f29" crlf "7. Cuando se declare f29 anotar los giros como gastos, o sea: anotar un movimiento en ccm." crlf "8. Anotar las multas que se pagan a sii y pasarlas como gastos: o sea, crar un movimiento en ccm" crlf "9. Estar atento a los pagos de proveedores extranjeros, las facturas deben guardarse en directorio de contabilidad" crlf "10. Ir a factura DTE históricos y bajar los pdf de cada DTE y luego guardarlo en el directorio de contabilidad" crlf "11. Revisar que el saldo de iva-credito cuadre con alectrico y los estados de ccm sii y con el código 77 de remanente de iva mes siguiente" crlf "12. Averiguar como se asientan los pagos de la cuenta de retenciones por pagar, creo que no se tocan" crlf "14. Ir a Cartola fiscal del tgr y revisar que no haya deudas fiscales pendientes, a veces las pasarelas dejan la cagá y los pagos aparecen por allá sin pagar" crlf "15. Agregar las tasas en el archivo de tasas" crlf))

(defmodule PRIMITIVA
   (import MAIN deftemplate ?ALL)
   (export ?ALL))

(deffunction PRIMITIVA::mes_to_numero (?p0))

(deffunction PRIMITIVA::to_serial_date (?p0 ?p1 ?p2))

(deffunction PRIMITIVA::mes_to_numero
   (?mes)
   (switch ?mes
      (case enero then
         1)
      (case febrero then
         2)
      (case marzo then
         3)
      (case abril then
         4)
      (case mayo then
         5)
      (case junio then
         6)
      (case julio then
         7)
      (case agosto then
         8)
      (case septiembre then
         9)
      (case octubre then
         10)
      (case noviembre then
         11)
      (case diciembre then
         12)))

(deffunction PRIMITIVA::to_serial_date
   (?dia ?mes ?ano)
   (+ (* 10000 ?ano) (* 100 (mes_to_numero ?mes)) ?dia))

(defrule PRIMITIVA::inicio-primitiva
   (declare (salience 10000))
   =>)

(defrule PRIMITIVA::warning-partida-sin-cargo
   (no)
   (partida (numero ?numero) (dia ?dia) (mes ?mes) (descripcion ?descripcion))
   (not (cargo (partida ?numero)))
   =>
   (printout t crlf crlf crlf)
   (printout t "°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°" crlf)
   (printout t "Warning: Hay una partida sin cargo" crlf)
   (printout t "---------------------------------------------------------" crlf)
   (printout t ?descripcion tab dia tab ?dia tab mes tab ?mes tab partida tab ?numero crlf crlf crlf)
   (printout t "°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°" crlf)
   (halt))

(defrule PRIMITIVA::warning-partida-sin-abono
   (no)
   (partida (numero ?numero) (dia ?dia) (mes ?mes) (descripcion ?descripcion))
   (not (abono (partida ?numero)))
   =>
   (printout t crlf crlf)
   (printout t "°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°" crlf)
   (printout t "Warning: Hay una partida sin abono" crlf)
   (printout t "----------------------------------------------------------" crlf)
   (printout t ?descripcion tab dia tab ?dia tab mes tab ?mes tab partida tab ?numero crlf crlf crlf)
   (printout t "°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°" crlf)
   (halt))

(defrule PRIMITIVA::warning-abono-sin-partida
   (not (partida (numero ?numero)))
   (abono (partida ?numero) (cuenta ?cuenta) (dia ?dia) (mes ?mes) (glosa ?glosa))
   =>
   (printout t crlf crlf "°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°" crlf)
   (printout t "Warning: Hay un abono sin partida" crlf)
   (printout t "°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°" crlf)
   (printout t ?glosa tab cuenta tab ?cuenta tab dia tab ?dia tab mes tab ?mes tab partida tab ?numero crlf crlf crlf)
   (printout t "°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°" crlf)
   (halt))

(defrule PRIMITIVA::warning-partida-repetida
   ?p1 <- (partida (numero ?numero) (mes ?mes) (descripcion ?descripcion1))
   ?p2 <- (partida (numero ?numero) (mes ?mes) (descripcion ?descripcion2))
   (test (neq ?descripcion1 ?descripcion2))
   =>
   (printout t crlf crlf "°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°" crlf)
   (printout t "Warning: Hay partidas con el mismo número" crlf)
   (printout t "°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°" crlf)
   (printout t "--- PARTIDA 1 ------" crlf)
   (printout t ?descripcion1 tab "numero " ?numero crlf)
   (printout t "--- PARTIDA 2 ------" crlf)
   (printout t ?descripcion2 tab "numero " ?numero crlf)
   (printout t "°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°" crlf)
   (printout t "Ambas partidas serán fusionadas en una sola, con una descripción compuesta por mezcla de las descripciones originales. " crlf)
   (modify ?p1 (descripcion (str-cat ?descripcion1 "-" ?descripcion2)))
   (retract ?p2))

(defrule PRIMITIVA::warning-cargando-cuenta-acreedora
   (cargo (cuenta ?nombre) (partida ?partida))
   (cuenta (nombre ?nombre) (naturaleza acreedora))
   =>
   (printout t "Warning: Está intentando cargar una cuenta de saldo acreedor" crlf)
   (printout t "Cuenta: " ?nombre crlf)
   (printout t "Partida: " ?partida crlf)
   (halt))

(defrule PRIMITIVA::warning-abonando-cuenta-deudor
   (abono (cuenta ?nombre) (partida ?partida))
   (cuenta (nombre ?nombre) (naturaleza deudor))
   =>
   (printout t "Warning: Está intentando abonar una cuenta de saldo deudor" crlf)
   (printout t "Cuenta: " ?nombre crlf)
   (printout t "Partida: " ?partida crlf)
   (halt))

(defrule PRIMITIVA::cargar-cuenta-existente
   (declare (salience 9800))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (empresa (nombre ?empresa))
   (partida (dia ?dia) (mes ?mes) (ano ?ano) (numero ?numero))
   ?cargo <- (cargo (recibida ?recibida) (activo-fijo ?activo-fijo) (qty ?qty-cargo) (tipo-de-documento ?tipo-de-documento) (electronico ?electronico) (partida ?numero) (realizado false) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (cuenta ?nombre) (monto ?monto) (glosa ?glosa))
   ?cuenta <- (cuenta (partida ?numero) (qty ?qty) (nombre ?nombre) (debe ?debe) (haber ?haber))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (bind ?c (+ ?qty ?qty-cargo))
   (modify ?cuenta (recibida ?recibida) (activo-fijo ?activo-fijo) (qty ?c) (tipo-de-documento ?tipo-de-documento) (electronico ?electronico) (partida ?numero) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (debe (round (+ ?debe ?monto))))
   (modify ?cargo (realizado true)))

(defrule PRIMITIVA::cargar-cuenta-nueva
   (declare (salience 9800))
   (empresa (nombre ?empresa))
   (balance (mes ?mes_top) (dia ?top) (ano ?ano_top))
   (partida (dia ?dia) (mes ?mes) (ano ?ano) (numero ?numero))
   ?cargo <- (cargo (recibida ?recibida) (activo-fijo ?activo-fijo) (tipo-de-documento ?tipo-de-documento) (partida ?numero) (realizado false) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (cuenta ?nombre) (monto ?monto) (glosa ?glosa))
   ?cuenta <- (cuenta (partida nil) (dia nil) (mes nil) (ano nil) (nombre ?nombre) (tipo ?tipo) (grupo ?grupo) (padre ?padre) (circulante ?circulante) (naturaleza ?naturaleza) (descripcion ?descripcion) (origen ?origen))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (assert (cuenta (tipo-de-documento ?tipo-de-documento) (partida ?numero) (descripcion ?descripcion) (dia ?dia) (mes ?mes) (ano ?ano) (nombre ?nombre) (grupo ?grupo) (empresa ?empresa) (padre ?padre) (circulante ?circulante) (naturaleza ?naturaleza) (tipo ?tipo) (origen ?origen))))

(defrule PRIMITIVA::abonar-cuenta-existente
   (declare (salience 9800))
   (empresa (nombre ?empresa))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (partida (dia ?dia) (mes ?mes) (ano ?ano) (numero ?numero))
   ?abono <- (abono (recibida ?recibida) (activo-fijo ?activo-fijo) (tipo-de-documento ?tipo-de-documento) (qty ?qty) (electronico ?electronico) (partida ?numero) (realizado false) (empresa ?empresa) (dia ?dia) (cuenta ?nombre) (monto ?monto) (glosa ?glosa) (mes ?mes) (ano ?ano))
   ?cuenta <- (cuenta (partida ?numero) (nombre ?nombre) (debe ?debe) (haber ?haber) (tipo ?tipo) (circulante ?circulante))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (modify ?cuenta (recibida ?recibida) (activo-fijo ?activo-fijo) (tipo-de-documento ?tipo-de-documento) (qty ?qty) (electronico ?electronico) (partida ?numero) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (haber (round (+ ?haber ?monto))))
   (modify ?abono (realizado true)))

(defrule PRIMITIVA::abonar-cuenta-nueva
   (declare (salience 9800))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (empresa (nombre ?empresa))
   (partida (dia ?dia) (mes ?mes) (ano ?ano) (numero ?numero))
   ?abono <- (abono (recibida ?recibida) (activo-fijo ?activo-fijo) (tipo-de-documento ?tipo-de-documento) (partida ?numero) (realizado false) (empresa ?empresa) (dia ?dia) (ano ?ano) (cuenta ?nombre) (monto ?monto) (glosa ?glosa) (mes ?mes))
   ?cuenta <- (cuenta (nombre ?nombre) (mes nil) (partida nil) (dia nil) (circulante ?circulante) (naturaleza ?naturaleza) (padre ?padre) (tipo ?tipo) (grupo ?grupo) (descripcion ?descripcion) (origen ?origen))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (assert (cuenta (recibida ?recibida) (activo-fijo ?activo-fijo) (tipo-de-documento ?tipo-de-documento) (partida ?numero) (empresa ?empresa) (nombre ?nombre) (grupo ?grupo) (tipo ?tipo) (padre ?padre) (circulante ?circulante) (naturaleza ?naturaleza) (descripcion ?descripcion) (origen ?origen) (mes ?mes) (dia ?dia) (ano ?ano))))

(defrule PRIMITIVA::totalizar-saldo-deudor
   (declare (salience 9700))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (empresa (nombre ?empresa))
   (partida (dia ?dia) (mes ?mes) (ano ?ano) (numero ?numero))
   ?f1 <- (cuenta (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (nombre ?nombre) (debe ?debe) (haber ?haber) (saldo 0))
   (test (and (or (> ?debe 0) (> ?haber 0)) (> ?debe ?haber)))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (bind ?s (- (round ?debe) (round ?haber)))
   (modify ?f1 (saldo ?s)))

(defrule PRIMITIVA::totalizar-saldo-acreedor
   (declare (salience 9700))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (empresa (nombre ?empresa))
   (partida (dia ?dia) (mes ?mes) (ano ?ano) (numero ?numero))
   ?f1 <- (cuenta (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (nombre ?nombre) (debe ?debe) (haber ?haber) (saldo 0))
   (test (and (or (> ?debe 0) (> ?haber 0)) (< ?debe ?haber)))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (bind ?s (- (round ?haber) (round ?debe)))
   (modify ?f1 (saldo ?s)))

(defrule PRIMITIVA::creando-padre-de-un-hijo-deudor
   (declare (salience 8000))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (empresa (nombre ?empresa))
   (partida (dia ?dia) (mes ?mes) (ano ?ano) (numero ?numero))
   ?hijo <- (cuenta (electronico ?electronico) (activo-fijo ?activo-fijo) (tipo-de-documento ?tipo-de-documento) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (nombre ?nombre1) (saldo ?saldo) (mayoreado false) (padre ?nombre) (tipo deudor))
   ?padre <- (cuenta (descripcion ?descripcion) (partida ?otro_numero) (nombre ?nombre) (saldo ?saldo2) (grupo ?grupo) (tipo ?tipo) (circulante ?circulante) (naturaleza ?naturaleza) (origen ?origen))
   (test (neq ?numero ?otro_numero))
   (test (> ?saldo 0))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (assert (cuenta (activo-fijo ?activo-fijo) (tipo-de-documento ?tipo-de-documento) (electronico ?electronico) (empresa ?empresa) (descripcion ?descripcion) (dia ?dia) (mes ?mes) (ano ?ano) (nombre ?nombre) (partida ?numero) (grupo ?grupo) (tipo ?tipo) (circulante ?circulante) (naturaleza ?naturaleza) (origen ?origen))))

(defrule PRIMITIVA::sumando-hijo-deudor-a-su-padre
   (declare (salience 8000))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (empresa (nombre ?empresa))
   (partida (dia ?dia) (mes ?mes) (ano ?ano) (numero ?numero))
   ?hijo <- (cuenta (electronico ?electronico) (activo-fijo ?activo-fijo) (tipo-de-documento ?tipo-de-documento) (tipo deudor) (haber ?haber_hijo) (debe ?debe_hijo) (partida ?numero) (empresa ?empresa) (nombre ?nombre1) (saldo ?saldo) (mayoreado false) (padre ?nombre))
   ?padre <- (cuenta (haber ?haber_padre) (debe ?debe_padre) (partida ?numero) (nombre ?nombre) (grupo ?grupo) (tipo ?tipo) (saldo ?saldo2))
   (test (> ?saldo 0))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (bind ?haber (+ ?haber_hijo ?haber_padre))
   (bind ?debe (+ ?debe_hijo ?debe_padre))
   (modify ?padre (activo-fijo ?activo-fijo) (tipo-de-documento ?tipo-de-documento) (partida ?numero) (grupo ?grupo) (tipo ?tipo) (dia ?dia) (mes ?mes) (ano ?ano) (debe ?debe) (saldo 0) (haber ?haber) (empresa ?empresa) (verificada false) (mayoreado false))
   (modify ?hijo (mayoreado true)))

(defrule PRIMITIVA::sumando-hijo-deudor-a-su-padre-deudor
   (declare (salience 8000))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (empresa (nombre ?empresa))
   (partida (dia ?dia) (mes ?mes) (ano ?ano) (numero ?numero))
   ?hijo <- (cuenta (electronico ?electronico) (activo-fijo ?activo-fijo) (tipo-de-documento ?tipo-de-documento) (tipo deudor) (haber ?haber_hijo) (debe ?debe_hijo) (partida ?numero) (empresa ?empresa) (nombre ?nombre1) (saldo ?saldo) (mayoreado false) (padre ?nombre))
   ?padre <- (cuenta (haber ?haber_padre) (debe ?debe_padre) (tipo deudor) (partida ?numero) (nombre ?nombre) (saldo ?saldo2))
   (test (> ?saldo 0))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (bind ?haber (+ ?haber_hijo ?haber_padre))
   (bind ?debe (+ ?debe_hijo ?debe_padre))
   (modify ?padre (activo-fijo ?activo-fijo) (tipo-de-documento ?tipo-de-documento) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (debe ?debe) (saldo 0) (haber ?haber) (empresa ?empresa) (verificada false) (mayoreado false))
   (modify ?hijo (mayoreado true)))

(defrule PRIMITIVA::creando-padre-de-un-hijo-acreedora
   (declare (salience 8000))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (empresa (nombre ?empresa))
   (partida (dia ?dia) (numero ?numero) (ano ?ano) (mes ?mes))
   ?hijo <- (cuenta (electronico ?electronico) (activo-fijo ?activo-fijo) (tipo-de-documento ?tipo-de-documento) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (nombre ?nombre1) (saldo ?saldo) (mayoreado false) (tipo acreedora) (padre ?nombre))
   ?padre <- (cuenta (descripcion ?descripcion) (partida ?otro_numero) (nombre ?nombre) (saldo ?saldo2) (tipo ?tipo) (padre ?nombre-abuelo) (grupo ?grupo) (circulante ?circulante) (origen ?origen))
   (test (neq ?numero ?otro_numero))
   (test (> ?saldo 0))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (assert (cuenta (activo-fijo ?activo-fijo) (tipo-de-documento ?tipo-de-documento) (empresa ?empresa) (electronico ?electronico) (descripcion ?descripcion) (dia ?dia) (mes ?mes) (ano ?ano) (nombre ?nombre) (partida ?numero) (grupo ?grupo) (tipo ?tipo) (origen ?origen) (circulante ?circulante) (padre ?nombre-abuelo))))

(defrule PRIMITIVA::sumando-hijos-acreedora-a-su-padre-acreedora-con-abuelo
   (declare (salience 7000))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (empresa (nombre ?empresa))
   (partida (dia ?dia) (mes ?mes) (ano ?ano) (numero ?numero))
   ?hijo <- (cuenta (tipo-de-documento ?tipo-de-documento) (activo-fijo ?activo-fijo) (debe ?debe-hijo) (haber ?haber-hijo) (partida ?numero) (tipo acreedora) (electronico ?electronico) (empresa ?empresa) (nombre ?nombre1) (saldo ?saldo) (mayoreado true) (padre ?nombre))
   ?padre <- (cuenta (mayoreado false) (debe ?debe-padre) (haber ?haber-padre) (partida ?numero) (nombre ?nombre) (padre ?nombre-abuelo) (tipo acreedora) (saldo ?saldo2))
   ?abuelo <- (cuenta (debe ?debe-abuelo) (haber ?haber-abuelo) (partida ?numero) (nombre ?nombre-abuelo) (padre false) (tipo acreedora) (saldo ?saldo3))
   (test (neq nil ?nombre-abuelo))
   (test (> ?saldo 0))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (bind ?debe (+ ?debe-hijo ?debe-padre))
   (bind ?haber (+ ?haber-hijo ?haber-padre))
   (assert (cuenta (activo-fijo ?activo-fijo) (tipo-de-documento ?tipo-de-documento) (nombre ?nombre-abuelo) (electronico ?electronico) (partida ?numero) (mes ?mes) (ano ?ano) (debe ?debe) (haber ?haber) (empresa ?empresa)))
   (modify ?padre (mayoreado true)))

(defrule PRIMITIVA::sumando-padre-acreedora-a-su-padre-acreedora
   (declare (salience 8000))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (empresa (nombre ?empresa))
   (partida (dia ?dia) (mes ?mes) (ano ?ano) (numero ?numero))
   ?hijo <- (cuenta (activo-fijo ?activo-fijo) (tipo-de-documento ?tipo-de-documento) (partida ?numero) (debe ?debe-hijo) (haber ?haber-hijo) (tipo acreedora) (electronico ?electronico) (empresa ?empresa) (nombre ?nombre1) (saldo ?saldo) (mayoreado false) (padre ?nombre))
   ?padre <- (cuenta (debe ?debe-padre) (haber ?haber-padre) (partida ?numero) (nombre ?nombre) (tipo acreedora) (saldo ?saldo2))
   (test (> ?saldo 0))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (bind ?debe (+ ?debe-hijo ?debe-padre))
   (bind ?haber (+ ?haber-hijo ?haber-padre))
   (modify ?padre (activo-fijo ?activo-fijo) (tipo-de-documento ?tipo-de-documento) (electronico ?electronico) (dia ?dia) (mes ?mes) (ano ?ano) (saldo 0) (debe ?debe) (haber ?haber) (empresa ?empresa) (verificada false) (mayoreado false) (partida ?numero))
   (modify ?hijo (mayoreado true)))

(defrule PRIMITIVA::sumando-hijos-acreedora-a-su-padre-deudor
   (declare (salience 8000))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (empresa (nombre ?empresa))
   (partida (dia ?dia) (mes ?mes) (ano ?ano) (numero ?numero))
   ?hijo <- (cuenta (activo-fijo ?activo-fijo) (tipo-de-documento ?tipo-de-documento) (debe ?debe-hijo) (haber ?haber-hijo) (partida ?numero) (tipo acreedora) (empresa ?empresa) (nombre ?nombre1) (electronico ?electronico) (saldo ?saldo) (mayoreado false) (padre ?nombre))
   ?padre <- (cuenta (debe ?debe-padre) (haber ?haber-padre) (partida ?numero) (nombre ?nombre) (tipo deudor) (saldo ?saldo2))
   (test (> ?saldo 0))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (bind ?debe (+ ?debe-hijo ?debe-padre))
   (bind ?haber (+ ?haber-hijo ?haber-padre))
   (modify ?padre (activo-fijo ?activo-fijo) (tipo-de-documento ?tipo-de-documento) (dia ?dia) (mes ?mes) (saldo 0) (debe ?debe) (haber ?haber) (empresa ?empresa) (verificada false) (mayoreado false) (electronico ?electronico))
   (modify ?hijo (mayoreado true)))

(defmodule ACTIVIDAD
   (import MAIN deftemplate ?ALL))

(deffunction ACTIVIDAD::mes_to_numero (?p0))

(deffunction ACTIVIDAD::to_serial_date (?p0 ?p1 ?p2))

(defglobal ACTIVIDAD ?*partidas* = "")

(defglobal ACTIVIDAD ?*iva_divisor* = 1.19)

(defglobal ACTIVIDAD ?*iva_factor* = 1.19)

(deffunction ACTIVIDAD::mes_to_numero
   (?mes)
   (switch ?mes
      (case enero then
         1)
      (case febrero then
         2)
      (case marzo then
         3)
      (case abril then
         4)
      (case mayo then
         5)
      (case junio then
         6)
      (case julio then
         7)
      (case agosto then
         8)
      (case septiembre then
         9)
      (case octubre then
         10)
      (case noviembre then
         11)
      (case diciembre then
         12)))

(deffunction ACTIVIDAD::to_serial_date
   (?dia ?mes ?ano)
   (+ (* 10000 ?ano) (* 100 (mes_to_numero ?mes)) ?dia))

(defrule ACTIVIDAD::guardar-partidas
   (declare (salience 10000))
   (selecciones (origen-de-subcuentas ?origen))
   (or  (gasto-administrativo (partida ?numero))
        (gasto-proveedor (partida ?numero))
        (gasto-promocional (partida ?numero))
        (venta (partida ?numero))
        (compra (partida ?numero))
        (costo-ventas (partida ?numero))
        (deposito (partida ?numero))
        (honorario (partida ?numero))
        (salario (partida ?numero))
        (devolucion (partida ?numero))
        (gasto-ventas (partida ?numero))
        (gasto-afecto (partida ?numero))
        (amortizacion (partida ?numero))
        (depreciacion (partida ?numero))
        (gasto-sobre-compras (partida ?numero))
        (gasto-afecto (partida ?numero))
        (despago (partida ?numero))
        (pago (partida ?numero))
        (venta-anticipada (partida ?numero))
        (venta-sii (partida ?numero))
        (nota-de-credito-sii (partida ?numero))
        (nota-de-credito (partida ?numero))
        (nota-de-credito-de-subcuenta-existente (partida ?numero))
        (nota-de-debito-sii (partida ?numero))
        (nota-de-debito-manual (partida ?numero))
        (rendicion-de-eboletas-sii (partida ?numero))
        (rendicion-de-vouchers-sii (partida ?numero))
        (ajuste-de-iva-contra-credito (partida ?numero))
        (ajuste-de-iva-contra-debito (partida ?numero))
        (pago-de-iva (partida ?numero))
        (pago-de-retenciones-de-honorarios (partida ?numero))
        (gasto-investigacion-y-desarrollo (partida ?numero))
        (f29 (partida ?numero))
        (distribucion-de-utilidad (partida ?numero))
        (constitucion-de-spa (partida ?numero))
        (compra-de-acciones (partida ?numero))
        (compra-de-materiales (partida ?numero))
        (anulacion-de-vouchers (partida ?numero))
        (nota-de-credito-de-factura-reclamada (partida ?numero))
        (cobro-de-cuentas-por-cobrar (partida ?numero))
        (pago-de-salarios (partida ?numero))
        (traspaso (partida ?numero))
        (pedido (partida ?numero)))
   =>
   (assert (ccm (partida ?numero)))
   (bind ?*partidas* (str-cat *partidas* ?numero))
   (assert (subcuenta (origen ?origen))))

(defrule ACTIVIDAD::inicio-de-los-dias
   (declare (salience 10000))
   =>
   (set-strategy breadth)
   (printout t "----------------- ACTIVIDAD ------------------" crlf)
   (bind ?numeros
   (while (> (length$ ?numeros) 0) do
      (bind ?numero (nth$ 1 ?numeros))
      (assert (ticket (numero ?numero)))
      (assert (nonce (ticket ?numero)))
      (bind ?numeros (rest$ ?numeros))))

(defrule ACTIVIDAD::abrir-pedido
   (declare (salience 1000))
   (actual (mes ?mes))
   (balance (ano ?ano))
   ?ticket <- (ticket (numero ?numero))
   (pedido (partida ?numero) (id ?id) (dia ?dia) (mes ?mes) (ano ?ano))
   =>
   (printout t "Se abrió el pedido " ?id crlf)
   (assert (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion (str-cat "Pedido " ?id "Abierto")) (actividad apertura-de-pedido))))

(defrule ACTIVIDAD::partidas-con-gastos-promocionales-que-han-sido-rechazadas-por-sii
   (declare (salience 1000))
   (actual (mes ?mes))
   (balance (ano ?ano))
   ?ticket <- (ticket (numero ?numero))
   (gasto-promocional (archivo ?archivo) (folio ?folio) (rut ?rut) (tipo-de-documento ?tipo-de-documento) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (credito ?credito) (proveedor ?proveedor) (material ?material) (total ?total) (neto ?neto) (iva ?iva) (glosa ?glosa) (iva-retenido ?iva-retenido))
   (revision (partida ?numero) (rechazado true) (dia ?dia) (mes ?mes) (ano ?ano))
   =>
   (printout t "Partida Promocional " ?numero " Rechazado" crlf)
   (assert (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion (str-cat "Gasto Promocional Rechazado")) (actividad rechazo) (archivo ?archivo))))

(defrule ACTIVIDAD::partidas-que-han-sido-rechazadas-por-sii-que-no-son-gastos-administrativos-o-promocionales
   (declare (salience 1000))
   (actual (mes ?mes))
   (balance (ano ?ano))
   ?ticket <- (ticket (numero ?numero))
   (not (gasto-administrativo (partida ?numero)))
   (not (gasto-promocional (partida ?numero)))
   (revision (partida ?numero) (rechazado true) (dia ?dia) (mes ?mes) (ano ?ano))
   =>
   (printout t "Partida " ?numero " Rechazada" crlf)
   (assert (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion (str-cat "Partida rechazada")) (actividad rechazo))))

(defrule ACTIVIDAD::partidas-con-gastos-administrativos-que-han-sido-rechazadas-por-sii
   (declare (salience 1000))
   (actual (mes ?mes))
   (balance (ano ?ano))
   ?ticket <- (ticket (numero ?numero))
   (gasto-administrativo (archivo ?archivo) (folio ?folio) (rut ?rut) (tipo-de-documento ?tipo-de-documento) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (credito ?credito) (proveedor ?proveedor) (material ?material) (total ?total) (neto ?neto) (iva ?iva) (glosa ?glosa) (iva-retenido ?iva-retenido))
   (revision (partida ?numero) (rechazado true) (dia ?dia) (mes ?mes) (ano ?ano))
   =>
   (printout t "Gasto Administrativo " ?numero " Rechazado" crlf)
   (assert (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion (str-cat "Gasto Administrativo Rechazado")) (actividad rechazo) (archivo ?archivo))))

(defrule ACTIVIDAD::determinacion-perdida-ejercicio-anterior-pea
   (revision (partida ?numero) (rechazado false))
   (actual (mes ?mes))
   (balance (ano ?ano_top))
   (ticket (numero ?numero))
   (pea (partida ?numero))
   (empresa (nombre ?empresa))
   (cuenta (nombre utilidad) (haber ?haber) (debe ?pea) (dia ?dia) (mes ?mes) (ano ?ano))
   (test (> ?pea 0))
   (test (= ?haber 0))
   =>
   (assert (partida (numero ?numero) (mes ?mes) (dia ?dia) (ano ?ano) (descripcion (str-cat "Por traspaso de utilidad a Pérdida del Ejercicio Anterior " ?pea)) (actividad determinacion-pea)))
   (assert (cargo (electronico false) (tipo-de-documento traspaso) (cuenta perdidas-ejercicios-anteriores) (partida ?numero) (empresa ?empresa) (monto ?pea) (dia ?dia) (mes ?mes) (ano ?ano) (glosa (str-cat pea- ?pea))))
   (assert (abono (electronico false) (tipo-de-documento traspaso) (cuenta utilidad) (partida ?numero) (empresa ?empresa) (monto ?pea) (dia ?dia) (mes ?mes) (ano ?ano) (glosa (str-cat pea- ?pea))))
   (printout t "Determinando la Pérdida del Ejercicio Anterior " ?pea crlf))

(defrule ACTIVIDAD::distribucion-de-utilidades-del-ejercicio-anterior-a-cuenta-destino
   (revision (partida ?numero) (rechazado false))
   (actual (mes ?mes))
   (balance (ano ?ano_top))
   (ticket (numero ?numero))
   ?d <- (distribucion-de-utilidad (dia ?dia) (mes ?mes) (ano ?ano) (monto ?monto) (partida ?numero) (cuenta-de-destino ?cuenta-de-destino) (archivo ?archivo))
   (empresa (nombre ?empresa))
   (cuenta (nombre utilidad-del-ejercicio-anterior) (haber ?utilidad))
   (cuenta (nombre ?cuenta-de-destino) (haber ?haber))
   =>
   (retract ?d)
   (assert (partida (archivo ?archivo) (numero ?numero) (mes ?mes) (dia ?dia) (ano ?ano) (descripcion (str-cat "Por traspaso de utilidad a Capital Social " ?monto)) (actividad distribucion-utilidad)))
   (assert (abono (electronico false) (tipo-de-documento traspaso) (cuenta ?cuenta-de-destino) (partida ?numero) (empresa ?empresa) (monto ?monto) (dia ?dia) (mes ?mes) (ano ?ano) (glosa (str-cat distribucion-utilidad- ?monto))))
   (assert (cargo (electronico false) (tipo-de-documento traspaso) (cuenta utilidad-del-ejercicio-anterior) (partida ?numero) (empresa ?empresa) (monto ?monto) (dia ?dia) (mes ?mes) (ano ?ano) (glosa (str-cat distribucion-utilidad- ?monto))))
   (assert (ccm (folio na) (partida ?numero) (tipo-documento traspaso) (monto-total ?monto)))
   (printout t "Distribución Utilidad del Ejercicio Anterior " ?monto crlf))

(defrule ACTIVIDAD::traspasar
   (revision (partida ?numero) (rechazado false))
   (actual (mes ?mes))
   (balance (ano ?ano_top))
   (ticket (numero ?numero))
   (traspaso (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (cuenta-de-origen ?cuenta-de-origen) (cuenta-de-destino ?cuenta-de-destino))
   (empresa (nombre ?empresa))
   (cuenta (nombre ?cuenta-de-origen) (debe ?debe_o) (haber ?haber_o))
   (cuenta (nombre ?cuenta-de-destino))
   (test (> ?debe_o ?haber_o))
   =>
   (bind ?saldo (- ?debe_o ?haber_o))
   (assert (partida (numero ?numero) (mes ?mes) (dia ?dia) (ano ?ano) (descripcion (str-cat "Por traspaso de " ?saldo " de: " ?cuenta-de-origen " a: " ?cuenta-de-destino)) (actividad traspaso)))
   (assert (cargo (electronico false) (tipo-de-documento traspaso) (cuenta ?cuenta-de-destino) (partida ?numero) (empresa ?empresa) (monto ?saldo) (dia ?dia) (mes ?mes) (ano ?ano) (glosa (str-cat traspaso- ?saldo))))
   (assert (abono (electronico false) (tipo-de-documento traspaso) (cuenta ?cuenta-de-origen) (partida ?numero) (empresa ?empresa) (monto ?saldo) (dia ?dia) (mes ?mes) (ano ?ano) (glosa (str-cat traspaso- ?saldo))))
   (assert (ccm (folio na) (partida ?numero) (tipo-documento traspaso) (monto-total ?saldo)))
   (printout t "Traspaso de " ?saldo " de: " ?cuenta-de-origen " a: " ?cuenta-de-destino crlf))

(defrule ACTIVIDAD::gastos-en-movilizacion
   (revision (partida ?numero) (rechazado false))
   (actual (mes ?mes))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (ticket (numero ?numero))
   (empresa (nombre ?empresa))
   ?f1 <- (movilizacion (folio ?folio) (proveedor ?proveedor) (partida ?numero) (monto ?monto) (mes ?mes) (dia ?dia) (ano ?ano))
   (test (> ?monto 0))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (retract ?f1)
   (assert (partida (numero ?numero) (mes ?mes) (dia ?dia) (ano ?ano) (actividad gastos-en-movizacion) (descripcion (str-cat "Gastos en Movilización Día " ?ano " de " ?mes " " ?dia))))
   (assert (abono (tipo-de-documento caja-chica) (cuenta banco-estado) (partida ?numero) (empresa ?empresa) (monto ?monto) (dia ?dia) (mes ?mes) (ano ?ano) (glosa (str-cat gasto-de-movilizacion-pagado-a ?proveedor))))
   (assert (cargo (tipo-de-documento caja-chica) (cuenta gastos-en-movilizacion) (partida ?numero) (empresa ?empresa) (monto ?monto) (dia ?dia) (mes ?mes) (ano ?ano) (glosa (str-cat (str-cat gasto-en-movilizacion-pagado-a-) ?proveedor))))
   (printout t "Gastando en Movilizacion correspondiente a:" ?monto crlf))

(defrule ACTIVIDAD::depositar-en-cuenta-corriente
   (revision (partida ?numero) (rechazado false))
   (actual (mes ?mes))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (ticket (numero ?numero))
   (empresa (nombre ?empresa))
   ?f1 <- (deposito (partida ?numero) (banco ?banco) (monto ?monto) (mes ?mes) (dia ?dia) (ano ?ano) (glosa ?glosa))
   (test (> ?monto 0))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (retract ?f1)
   (assert (partida (numero ?numero) (mes ?mes) (dia ?dia) (ano ?ano) (descripcion ?glosa) (actividad depositar-en-cuenta-corriente)))
   (assert (cargo (tipo-de-documento deposito-banco) (cuenta ?banco) (partida ?numero) (empresa ?empresa) (monto ?monto) (dia ?dia) (mes ?mes) (ano ?ano) (glosa (str-cat (str-cat (str-cat deposito-en-banco- ?banco) -por-) ?monto))))
   (assert (abono (tipo-de-documento deposito-banco) (cuenta caja) (partida ?numero) (empresa ?empresa) (monto ?monto) (dia ?dia) (mes ?mes) (ano ?ano) (glosa (str-cat (str-cat (str-cat deposito-en-banco- ?banco) -por-) ?monto))))
   (assert (ccm (folio na) (partida ?numero) (tipo-documento deposito-en-banco) (monto-total ?monto)))
   (printout t "Depositando en " ?banco " por un valor de $" ?monto crlf))

(defrule ACTIVIDAD::cobrar-cuentas-por-cobrar
   (revision (partida ?numero) (rechazado false))
   (actual (mes ?mes))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (ticket (numero ?numero))
   (empresa (nombre ?empresa))
   ?f1 <- (cobro-de-cuentas-por-cobrar (partida ?numero) (monto ?monto) (mes ?mes) (dia ?dia) (ano ?ano) (glosa ?glosa))
   (test (> ?monto 0))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (retract ?f1)
   (assert (partida (proveedor cuentas-por-cobrar) (numero ?numero) (mes ?mes) (dia ?dia) (ano ?ano) (descripcion ?glosa) (actividad pagar-monto)))
   (assert (abono (tipo-de-documento abono-transbank) (cuenta clientes) (partida ?numero) (empresa ?empresa) (monto ?monto) (dia ?dia) (mes ?mes) (ano ?ano) (glosa cobro-de-cuenta-por-cobrar)))
   (assert (cargo (tipo-de-documento abono-transbank) (cuenta cuentas-por-cobrar) (partida ?numero) (empresa ?empresa) (monto ?monto) (dia ?dia) (mes ?mes) (ano ?ano) (glosa cobro-de-cuentas-por-cobrar)))
   (printout t crlf crlf "Cobrando a cuentas-por-cobrar por un valor de $" ?monto crlf))

(defrule ACTIVIDAD::pagar-monto
   (revision (partida ?numero) (rechazado false))
   (actual (mes ?mes))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (ticket (numero ?numero))
   (empresa (nombre ?empresa))
   ?f1 <- (pago (partida ?numero) (cliente ?proveedor) (servicio ?servicio) (monto ?monto) (mes ?mes) (dia ?dia) (ano ?ano) (glosa ?glosa))
   (test (> ?monto 0))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (retract ?f1)
   (assert (partida (proveedor ?proveedor) (numero ?numero) (mes ?mes) (dia ?dia) (ano ?ano) (descripcion ?glosa) (actividad pagar-monto)))
   (assert (cargo (cuenta banco-estado) (partida ?numero) (empresa ?empresa) (monto ?monto) (dia ?dia) (mes ?mes) (ano ?ano) (glosa (str-cat (str-cat (str-cat pago-a- ?proveedor) -por-) ?servicio))))
   (assert (cuenta (nombre ?proveedor) (empresa ?empresa) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion deudas-con-este-proveedor) (tipo acreedora) (grupo pasivo) (circulante true) (padre clientes) (naturaleza acreedora) (origen nominativo)))
   (assert (abono (cuenta ?proveedor) (partida ?numero) (empresa ?empresa) (monto ?monto) (dia ?dia) (mes ?mes) (ano ?ano) (glosa (str-cat (str-cat (str-cat pago-a- ?proveedor) -por-) ?servicio))))
   (assert (ccm (folio na) (partida ?numero) (tipo-documento pago) (monto-total ?monto)))
   (printout t crlf crlf "Pagando a  " ?proveedor " por un valor de $" ?monto crlf))

(defrule ACTIVIDAD::pagar-honorarios
   (revision (partida ?numero) (rechazado false))
   (actual (mes ?mes))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (ticket (numero ?numero))
   (empresa (nombre ?empresa))
   ?honorario <- (honorario (partida ?numero) (dia ?dia) (profesional ?profesional) (servicio ?servicio) (bruto ?bruto) (mes ?mes) (ano ?ano) (glosa ?glosa))
   (tasas (honorarios ?tasa-honorario) (mes ?mes) (ano ?ano))
   (test (> ?bruto 0))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (retract ?honorario)
   (assert (dia ?dia))
   (bind ?impuesto (round (* ?tasa-honorario ?bruto)))
   (bind ?neto (- ?bruto ?impuesto))
   (assert (partida (proveedor ?profesional) (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion ?glosa) (actividad pagar-honorarios)))
   (assert (abono (tipo-de-documento pago-de-honorarios) (cuenta banco-estado) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (monto ?neto) (glosa (str-cat pago-a- ?profesional -por- ?servicio))))
   (assert (cargo (tipo-de-documento pago-de-honorarios) (cuenta honorarios) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (monto ?bruto) (glosa (str-cat pago-a- ?profesional -por- ?servicio))))
   (assert (abono (tipo-de-documento pago-de-honorarios) (cuenta retenciones-por-pagar) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (monto ?impuesto) (glosa (str-cat pago-a- ?profesional -por- ?servicio))))
   (assert (ccm (folio na) (partida ?numero) (tipo-documento honorario) (monto-total ?bruto)))
   (printout t "--> salario-- Pagando a " ?profesional " por un valor bruo de $" ?bruto crlf))

(defrule ACTIVIDAD::declarar-remuneraciones
   (revision (partida ?numero) (rechazado false))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (actual (mes ?mes))
   (ticket (numero ?numero))
   (empresa (nombre ?empresa))
   ?salario <- (salario (nombre ?nombre) (partida ?numero) (dia ?dia) (departamento ?departamento) (servicio ?servicio) (efectivo ?efectivo) (mes ?mes) (ano ?ano) (glosa ?glosa))
   (remuneracion (trabajador ?nombre) (mes ?mes) (monto ?imponible) (dias-trabajados ?dias-trabajados) (semana-corrida ?semana-corrida) (declarada ?declarada) (pagada ?pagada) (impuesta ?impuesta))
   (trabajador (diaria ?diaria) (mes-inicio ?mes-inicio) (ano-inicio ?ano-inicio) (nombre ?nombre) (afp ?afp) (salud ?salud) (duracion ?duracion))
   (afp (nombre ?afp) (comision ?comision) (sis ?sis))
   (salud (nombre ?salud) (cotizacion ?cotizacion))
   (afc (duracion ?duracion) (comision ?afc))
   (tasas (utm ?utm) (mes ?mes_top) (ano ?ano_top))
   (tramo-impuesto-unico (exento-en-utm ?exento-en-utm) (tasa ?tasa-unico))
   (test (> ?efectivo 0))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (assert (dia ?dia))
   (bind ?sueldo (* ?diaria (+ ?dias-trabajados ?semana-corrida)))
   (printout t crlf)
   (printout t "===================================" crlf)
   (printout t "---- " ?mes tab ?nombre " -----" crlf)
   (printout t d.trabajados: tab ?dias-trabajados crlf)
   (printout t sem.-corrida: tab ?semana-corrida crlf)
   (printout t sueldo bruto: tab ?sueldo crlf)
   (bind ?tramo-exento (* ?exento-en-utm ?utm 1000))
   (if (> ?sueldo ?tramo-exento)
      then
      (bind ?imponible (- ?sueldo ?tramo-exento))
      (bind ?monto-unico (* ?tramo-exento ?tasa-unico))
      (printout t "El sueldo es mayor que el tramo exento, hay impuesto único" crlf)
      else
      (bind ?monto-unico 0))
   (assert (partida (proveedor ?departamento) (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion (str-cat "Declaración de Remuneraciones de " ?nombre " días trabajados: " ?dias-trabajados " Tramo Exento: " ?tramo-exento " Sueldo Bruto de: " ?sueldo " Tasa de Impuesto Único: " ?tasa-unico " Monto de Impuesto Único: " ?monto-unico)) (actividad declarar-remuneraciones)))
   (printout t previsio-afp: tab (round (* ?sueldo 0.1)) crlf)
   (printout t comision-afp: tab (round (* ?sueldo ?comision)) crlf)
   (printout t .....oblig. ":" tab (round (* ?sueldo (+ 0.1 ?comision))) crlf)
   (printout t comision-afc: tab (round (* ?sueldo ?afc)) crlf)
   (printout t cotizac.sis.: tab (round (* ?sueldo ?sis)) crlf)
   (printout t cotiza.salud: tab (round (* ?sueldo ?cotizacion)) crlf)
   (printout t "-------------------------" crlf)
   (printout t AFP: tab (round (* ?sueldo (+ 0.1 ?comision ?sis ?afc))) crlf)
   F
   (printout t SALUD: tab (round (* ?sueldo ?cotizacion)) crlf)
   (printout t TOTAL: tab (round (* ?sueldo (+ 0.1 ?comision ?sis ?cotizacion ?afc))) crlf)
   (printout t LIQUI: tab (round (- ?sueldo (round ?monto-unico) (* ?sueldo (+ 0.1 ?comision ?sis ?cotizacion ?afc)))) crlf)
   (bind ?afp (round (* ?sueldo (+ 0.1 ?comision ?sis ?afc))))
   (bind ?salud (round (* ?sueldo ?cotizacion)))
   (bind ?total (round (* ?sueldo (+ 0.1 ?comision ?sis ?cotizacion ?afc))))
   (bind ?liquido (round (- ?sueldo (round ?monto-unico) (* ?sueldo (+ 0.1 ?comision ?sis ?cotizacion ?afc)))))
   (bind ?entidades (+ ?afp ?salud))
   (printout t "===================================" crlf)
   (printout t (if (eq ?declarada true)
      then
      DECLARADA
      else
      NO-DECLARADA) tab)
   (printout t (if (eq ?pagada true)
      then
      PAGADA
      else
      NO-PAGADA) tab)
   (printout t (if (eq ?impuesta true)
      then
      IMPUESTA
      else
      NO-IMPUESTA) crlf)
   (printout t crlf)
   (assert (abono (tipo-de-documento declaracion-remuneraciones) (cuenta entidades-previsionales-por-pagar) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (monto ?entidades) (glosa (str-cat (str-cat (str-cat pago-a- ?departamento) -por-) ?servicio))))
   (assert (abono (tipo-de-documento impuesto-unico-por-pagar) (cuenta remuneraciones-por-pagar) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (monto ?liquido) (glosa (str-cat (str-cat (str-cat pago-a- ?departamento) -por-) ?servicio))))
   (assert (cargo (tipo-de-documento declaracion-remuneraciones) (cuenta salarios) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (monto ?sueldo) (glosa (str-cat (str-cat (str-cat pago-a- ?departamento) -por-) ?servicio))))
   (assert (abono (tipo-de-documento declaracion-remuneraciones) (cuenta impuesto-unico-por-pagar) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (monto ?monto-unico) (glosa (str-cat (str-cat (str-cat pago-a- ?departamento) -por-) ?servicio))))
   (assert (ccm (folio na) (partida ?numero) (tipo-documento decl-de-remuner.) (monto-total ?efectivo)))
   (printout t "-->salario -- Declarando Salarios " ?departamento " por un valor de $" ?efectivo crlf))

(defrule ACTIVIDAD::pagar-salarios
   (revision (partida ?numero) (rechazado false))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (actual (mes ?mes))
   (ticket (numero ?numero))
   (empresa (nombre ?empresa))
   (pago-de-salarios (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (trabajador ?trabajador) (remuneracion ?remuneracion) (folio-prevision ?folio) (salud ?salud) (afp ?afp) (afc ?afc) (unico ?impuesto-unico))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (bind ?prevision (+ ?salud ?afc ?afp))
   (bind ?total (+ ?prevision ?remuneracion))
   (assert (partida (proveedor ?trabajador) (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion pagando-salarios) (actividad pagar-salarios) (archivo (str-cat "../previred-prevision-" ?folio ".png"))))
   (assert (cargo (tipo-de-documento previred) (cuenta entidades-previsionales-por-pagar) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (monto ?prevision)))
   (assert (cargo (tipo-de-documento previred) (cuenta remuneraciones-por-pagar) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (monto ?remuneracion) (glosa (str-cat "Pago-a-" ?trabajador "-por-" ?remuneracion))))
   (assert (cargo (tipo-de-documento previred) (cuenta impuesto-unico-por-pagar) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (monto ?impuesto-unico) (glosa (str-cat "Pago-a-" ?trabajador "-por-" ?impuesto-unico))))
   (assert (abono (tipo-de-documento planilla-previred) (cuenta banco-estado) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (monto ?total) (glosa (str-cat "Pago-a-" ?trabajador "-por-" ?total))))
   (assert (ccm (folio na) (partida ?numero) (tipo-documento planilla-previred) (monto-total ?total)))
   (printout t "-->pago-de-salario -- Pagando salarios de " ?trabajador " por " ?total crlf))

(defrule ACTIVIDAD::comprar-intangible
   (revision (partida ?numero) (rechazado false))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (actual (mes ?mes))
   (ticket (numero ?numero))
   (empresa (nombre ?empresa))
   ?f1 <- (compra (folio ?folio) (archivo ?archivo) (rut ?rut) (qty ?qty) (tipo-de-documento ?tipo-de-documento) (partida ?numero) (credito ?credito) (dia ?dia) (mes ?mes) (ano ?ano) (neto ?neto) (total ?total) (iva ?iva) (proveedor ?proveedor) (material ?material) (intangible true) (glosa ?glosa))
   (test (and (not (eq nil ?total)) (> ?total 0)))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (retract ?f1)
   (assert (cuenta (nombre ?material) (partida ?numero) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion ?material) (tipo deudor) (grupo activo) (circulante false) (padre intangibles) (origen nominativo)))
   (if (neq nil ?archivo)
      then
      (assert (partida (archivo ?archivo) (proveedor ?proveedor) (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion ?glosa) (actividad comprar-intangible)))
      else
      (assert (partida (archivo (str-cat "../factura-" ?proveedor "-" ?folio ".png")) (proveedor ?proveedor) (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion ?glosa) (actividad comprar-intangible))))
   (assert (cargo (tipo-de-documento ?tipo-de-documento) (qty ?qty) (cuenta ?material) (partida ?numero) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (monto ?total) (glosa (str-cat (str-cat ?material - < <-) ?proveedor))))
   (assert (abono (qty ?qty) (tipo-de-documento ?tipo-de-documento) (cuenta banco-estado) (partida ?numero) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (monto ?total) (glosa (str-cat (str-cat (str-cat compra-al-contado-de- ?material) -a-) ?proveedor))))
   (assert (ccm (folio na) (partida ?numero) (tipo-documento ?tipo-de-documento) (monto-total ?total) (rut-contraparte ?rut) (monto-neto ?neto)))
   (printout t "-->ci comprando intangible " ?material " por un valor total de " ?total crlf))

(defrule ACTIVIDAD::comprar-activos-fijos-al-contado
   (revision (partida ?numero) (rechazado false))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (actual (mes ?mes))
   (ticket (numero ?numero))
   (empresa (nombre ?empresa))
   ?f1 <- (compra (archivo ?archivo) (folio ?folio) (rut ?rut) (tipo-de-documento ?tipo-de-documento) (partida ?numero) (credito ?credito) (unidades ?unidades) (costo_unitario ?costo_unitario) (dia ?dia) (mes ?mes) (ano ?ano) (proveedor ?proveedor) (material ?material) (activo-fijo true) (total ?total) (neto ?neto) (iva ?iva) (glosa ?glosa))
   (test (not (eq nil ?material)))
   (test (and (not (eq nil ?total)) (> ?total 0)))
   (test (and (not (eq nil ?neto)) (> ?neto 0)))
   (test (and (not (eq nil ?iva)) (> ?iva 0)))
   (test (eq ?credito 0))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (retract ?f1)
   (assert (partida (proveedor ?proveedor) (numero ?numero) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion ?glosa) (actividad comprar-activos-fijos-al-contado) (archivo ?archivo)))
   (assert (cargo (recibida true) (activo-fijo true) (tipo-de-documento ?tipo-de-documento) (cuenta herramientas) (partida ?numero) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (monto ?neto) (glosa (str-cat (str-cat ?material - < <-) ?proveedor))))
   (assert (abono (recibida true) (activo-fijo true) (tipo-de-documento ?tipo-de-documento) (cuenta banco-estado) (partida ?numero) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (monto ?total) (glosa (str-cat (str-cat (str-cat compra-al-contado-de-activo-fijo ?material) -a-) ?proveedor))))
   (assert (cargo (recibida true) (activo-fijo true) (tipo-de-documento ?tipo-de-documento) (cuenta iva-credito) (partida ?numero) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (monto ?iva) (glosa (str-cat por-compra-de-activo-fijo-de- ?material))))
   (assert (cargo (recibida true) (cuenta depreciacion-instantanea-de-activos-fijos-propyme) (partida ?numero) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (monto ?neto) (glosa 'depreciacion-instantanea-de-activo-fijo')))
   (assert (ccm (folio ?folio) (partida ?numero) (tipo-documento ?tipo-de-documento) (monto-total ?total) (monto-iva-recuperable ?iva) (rut-contraparte ?rut) (razon-social-contraparte ?proveedor) (monto-neto ?neto)))
   (printout t "-->cafc comprando activo-fijo al contado " ?material " por un valor total de " ?total crlf)
   (printout t "       pagado a " ?proveedor crlf))

(defrule ACTIVIDAD::comprar-acciones
   (revision (partida ?numero) (rechazado false))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (actual (mes ?mes))
   (ticket (numero ?numero))
   (empresa (nombre ?empresa))
   ?cede <- (accionista (nombre ?cedente) (numero-de-acciones ?acciones-cedente))
   ?compra <- (accionista (nombre ?comprador) (numero-de-acciones ?acciones-comprador))
   ?c <- (compra-de-acciones (dia ?dia) (mes ?mes) (ano ?ano) (partida ?numero) (comprador ?comprador) (cedente ?cedente) (numero-de-acciones ?numero-de-acciones) (valor-nominal ?valor-nominal) (realizada false))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   (test (>= ?acciones-cedente ?numero-de-acciones))
   =>
   (modify ?c (realizada true))
   (assert (partida (proveedor ?cedente) (numero ?numero) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion (str-cat "ca -> " ?comprador " Compra " ?numero-de-acciones " acciones a " ?cedente " por un valor nominal de " ?valor-nominal)) (actividad comprar-acciones)))
   (assert (cuenta (nombre ?cedente) (partida ?numero) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion ?cedente) (tipo acreedora) (grupo resultado) (circulante true) (padre acciones) (origen nominativo)))
   (assert (cuenta (nombre ?comprador) (partida ?numero) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion ?comprador) (tipo acreedora) (grupo resultado) (circulante true) (padre acciones) (origen nominativo)))
   (modify ?cede (numero-de-acciones (- ?acciones-cedente ?numero-de-acciones)) (valor-nominal ?valor-nominal))
   (modify ?compra (numero-de-acciones (+ ?acciones-comprador ?numero-de-acciones)) (valor-nominal ?valor-nominal))
   (assert (abono (tipo-de-documento contrato-de-compraventa-de-acciones) (cuenta ?cedente) (partida ?numero) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (monto (* ?numero-de-acciones ?valor-nominal)) (glosa (str-cat (str-cat acciones - < <-) ?cedente))))
   (assert (cargo (tipo-de-documento contrato-de-compraventa-de-acciones) (cuenta ?comprador) (partida ?numero) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (monto (* ?numero-de-acciones ?valor-nominal)) (glosa (str-cat (str-cat acciones - < <-) ?cedente))))
   (printout t "ca -> " ?comprador " Compra " ?numero-de-acciones " acciones a " ?cedente " por un valor nominal de " ?valor-nominal crlf)
   (assert (accionario (operacion compra) (empresa ?empresa) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (ct (* ?numero-de-acciones ?valor-nominal)) (u ?numero-de-acciones) (cu ?valor-nominal) (material (str-cat acciones-de- ?comprador)) (proveedor ?cedente) (cliente nil) (glosa (str-cat por-compra-de-acciones-a- ?cedente))))
   (assert (accionario (operacion venta) (empresa ?empresa) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (ct (* ?numero-de-acciones ?valor-nominal)) (u ?numero-de-acciones) (cu ?valor-nominal) (material (str-cat acciones-de- ?cedente)) (proveedor ?cedente) (cliente nil) (glosa (str-cat por-compra-de-acciones-a- ?cedente)))))

(defrule ACTIVIDAD::comprar-inventario-revision
   (revision (partida ?numero) (rechazado false))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (actual (mes ?mes))
   (ticket (numero ?numero))
   (empresa (nombre ?empresa))
   ?f1 <- (compra (archivo ?archivo) (rut ?rut) (activo-fijo false) (tipo-de-documento ?tipo-de-documento) (partida ?numero) (credito ?credito) (unidades ?unidades) (costo_unitario ?costo_unitario) (dia ?dia) (mes ?mes) (ano ?ano) (proveedor ?proveedor) (material ?material) (total ?total) (neto ?neto) (iva ?iva) (glosa ?glosa))
   (test (not (eq nil ?material)))
   (test (and (not (eq nil ?total)) (> ?total 0)))
   (test (and (not (eq nil ?neto)) (> ?neto 0)))
   (test (and (not (eq nil ?iva)) (> ?iva 0)))
   (test (eq ?credito 0))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   (not (proveedor (nombre ?proveedor) (padre materiales)))
   =>
   (printout t "==================== W A R N I N G ==============================" crlf)
   (printout t ?proveedor " NO es un proveedor de materiales. Modifíque el padre de la cuenta en el archivo proveedores.txt si cree que esto es un error" crlf)
   (printout t "También puede registrar el proveedor en dos cuentas, una de las cuales tenga el nombre proveedor-materiales cuyo padres sea materiales" crlf)
   (printout t "Error encontrado en la partida " ?numero crlf)
   (printout t "==================================================================" clrf))

(defrule ACTIVIDAD::comprar-inventario
   (revision (partida ?numero) (rechazado false))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (actual (mes ?mes))
   (ticket (numero ?numero))
   (empresa (nombre ?empresa))
   ?f1 <- (compra (archivo ?archivo) (rut ?rut) (activo-fijo false) (tipo-de-documento ?tipo-de-documento) (partida ?numero) (credito ?credito) (unidades ?unidades) (costo_unitario ?costo_unitario) (dia ?dia) (mes ?mes) (ano ?ano) (proveedor ?proveedor) (material ?material) (total ?total) (neto ?neto) (iva ?iva) (glosa ?glosa))
   (test (not (eq nil ?material)))
   (test (and (not (eq nil ?total)) (> ?total 0)))
   (test (and (not (eq nil ?neto)) (> ?neto 0)))
   (test (and (not (eq nil ?iva)) (> ?iva 0)))
   (test (eq ?credito 0))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (retract ?f1)
   (assert (cuenta (nombre (sym-cat ?proveedor -materiales)) (descripcion compra-de-materiales) (tipo deudor) (grupo activo) (circulante true) (padre materiales) (origen real)))
   (assert (partida (proveedor ?proveedor) (numero ?numero) (empresa ?empresa) (dia ?dia) (mes ?mes) (archivo ?archivo) (ano ?ano) (descripcion ?glosa) (actividad comprar-inventario)))
   (assert (cargo (tipo-de-documento ?tipo-de-documento) (cuenta (sym-cat ?proveedor -materiales)) (partida ?numero) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (monto ?neto) (glosa (str-cat (str-cat ?material - < <-) ?proveedor))))
   (assert (abono (tipo-de-documento ?tipo-de-documento) (cuenta banco-estado) (partida ?numero) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (monto ?total) (glosa (str-cat (str-cat (str-cat compra-de-inventario-de- ?material) -a-) ?proveedor))))
   (assert (cargo (tipo-de-documento ?tipo-de-documento) (cuenta iva-credito) (partida ?numero) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (monto ?iva) (glosa (str-cat por-compra-de-inventario-de- ?material))))
   (assert (inventario (operacion compra) (empresa ?empresa) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (ct ?neto) (u ?unidades) (cu ?costo_unitario) (material ?material) (proveedor ?proveedor) (glosa (str-cat por-compra-de-inventario-de- ?material))))
   (assert (ccm (folio na) (partida ?numero) (tipo-documento ?tipo-de-documento) (monto-total ?total) (rut-contraparte ?rut) (monto-neto ?neto)))
   (printout t "-->cc comprando al contado " ?material " por un valor total de " ?total crlf)
   (printout t "      pagado a " ?proveedor crlf))

(defrule ACTIVIDAD::comprar-insumos-al-contado
   (revision (partida ?numero) (rechazado false))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (actual (mes ?mes))
   (ticket (numero ?numero))
   (empresa (nombre ?empresa))
   ?f1 <- (insumos (folio ?folio) (archivo ?archivo) (rut ?rut) (activo-fijo false) (tipo-de-documento ?tipo-de-documento) (partida ?numero) (credito ?credito) (unidades ?unidades) (costo_unitario ?costo_unitario) (dia ?dia) (mes ?mes) (ano ?ano) (proveedor ?proveedor) (material ?material) (total ?total) (neto ?neto) (iva ?iva) (glosa ?glosa))
   (test (not (eq nil ?material)))
   (test (and (not (eq nil ?total)) (> ?total 0)))
   (test (and (not (eq nil ?neto)) (> ?neto 0)))
   (test (and (not (eq nil ?iva)) (> ?iva 0)))
   (test (eq ?credito 0))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (retract ?f1)
   (assert (partida (proveedor ?proveedor) (numero ?numero) (empresa ?empresa) (dia ?dia) (mes ?mes) (archivo (str-cat "../factura-afecta-" ?proveedor "-" ?folio ".png")) (ano ?ano) (descripcion ?glosa) (actividad comprar-insumos-al-contado)))
   (assert (cuenta (nombre (str-cat ?proveedor "-insumos")) (descripcion compra-de-insumos) (tipo deudor) (grupo activo) (circulante true) (padre insumos) (origen real)))
   (assert (cargo (tipo-de-documento ?tipo-de-documento) (partida ?numero) (cuenta (str-cat ?proveedor "-insumos")) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (monto ?neto) (glosa (str-cat (str-cat ?material " por ") ?proveedor))))
   (assert (abono (tipo-de-documento ?tipo-de-documento) (cuenta banco-estado) (partida ?numero) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (monto ?total) (glosa (str-cat (str-cat (str-cat compra-al-contado-de- ?material) -a-) ?proveedor))))
   (assert (cargo (tipo-de-documento ?tipo-de-documento) (cuenta iva-credito) (partida ?numero) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (monto ?iva) (glosa (str-cat por-compra-al-contado-de- ?material))))
   (assert (ccm (folio na) (partida ?numero) (tipo-documento ?tipo-de-documento) (monto-total ?total) (rut-contraparte ?rut) (monto-neto ?neto)))
   (printout t "-->cc comprando al contado " ?material " por un valor total de " ?total crlf)
   (printout t "      pagado a " ?proveedor crlf))

(defrule ACTIVIDAD::comprar-materiales-al-contado
   (revision (partida ?numero) (rechazado false))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (actual (mes ?mes))
   (ticket (numero ?numero))
   (empresa (nombre ?empresa))
   ?f1 <- (compra-de-materiales (archivo ?archivo) (rut ?rut) (activo-fijo false) (tipo-de-documento ?tipo-de-documento) (partida ?numero) (credito ?credito) (unidades ?unidades) (costo_unitario ?costo_unitario) (dia ?dia) (mes ?mes) (ano ?ano) (proveedor ?proveedor) (material ?material) (total ?total) (neto ?neto) (iva ?iva) (glosa ?glosa))
   (test (not (eq nil ?material)))
   (test (and (not (eq nil ?total)) (> ?total 0)))
   (test (and (not (eq nil ?neto)) (> ?neto 0)))
   (test (and (not (eq nil ?iva)) (> ?iva 0)))
   (test (eq ?credito 0))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (retract ?f1)
   (assert (partida (proveedor ?proveedor) (numero ?numero) (empresa ?empresa) (dia ?dia) (mes ?mes) (archivo ?archivo) (ano ?ano) (descripcion ?glosa) (actividad comprar-materiales-al-contado)))
   (assert (cuenta (nombre (sym-cat ?proveedor -materiales)) (descripcion compra-de-materiales) (tipo deudor) (grupo activo) (circulante true) (padre materiales) (origen reales)))
   (assert (cargo (tipo-de-documento ?tipo-de-documento) (partida ?numero) (cuenta (sym-cat ?proveedor -materiales)) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (monto ?neto) (glosa (str-cat (str-cat ?material " por ") ?proveedor))))
   (assert (abono (tipo-de-documento ?tipo-de-documento) (cuenta banco-estado) (partida ?numero) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (monto ?total) (glosa (str-cat (str-cat (str-cat compra-al-contado-de- ?material) -a-) ?proveedor))))
   (assert (cargo (tipo-de-documento ?tipo-de-documento) (cuenta iva-credito) (partida ?numero) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (monto ?iva) (glosa (str-cat por-compra-al-contado-de- ?material))))
   (assert (ccm (folio na) (partida ?numero) (tipo-documento ?tipo-de-documento) (monto-total ?total) (rut-contraparte ?rut) (monto-neto ?neto)))
   (printout t "-->cc comprando al contado " ?material " por un valor total de " ?total crlf)
   (printout t "      pagado a " ?proveedor crlf))

(defrule ACTIVIDAD::comprar-con-letras
   (revision (partida ?numero) (rechazado false))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (actual (mes ?mes))
   (ticket (numero ?numero))
   (empresa (nombre ?empresa))
   ?f1 <- (compra (rut ?rut) (activo-fijo false) (tipo-de-documento ?tipo-de-documento) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (proveedor ?proveedor) (material ?material) (total ?total) (efectivo ?efectivo) (letras ?letras) (glosa ?glosa))
   (test (not (eq nil ?material)))
   (test (and (not (eq nil ?total)) (> ?total 0)))
   (test (and (not (eq nil ?letras)) (> ?letras 0)))
   (test (and (not (eq nil ?efectivo)) (> ?efectivo 0)))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (retract ?f1)
   (assert (partida (proveedor ?proveedor) (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion ?glosa) (actividad comprar-con-letras)))
   (assert (abono (tipo-de-documento ?tipo-de-documento) (partida ?numero) (cuenta letras-por-pagar) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (monto ?letras) (glosa (str-cat (str-cat (str-cat compra-al-credito-de- ?material) -a-) ?proveedor))))
   (assert (cuenta (nombre ?proveedor) (partida ?numero) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion ?proveedor) (tipo acreedora) (grupo pasivo) (circulante true) (padre proveedores) (origen nominativo)))
   (assert (cargo (tipo-de-documento ?tipo-de-documento) (partida ?numero) (cuenta ?proveedor) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (monto ?total) (glosa (str-cat (str-cat (str-cat compra-al-credito-de- ?material) -a-) ?proveedor))))
   (assert (abono (tipo-de-documento ?tipo-de-documento) (partida ?numero) (cuenta caja) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (monto ?efectivo) (glosa (str-cat por-compra-al-credito-de- ?material))))
   (assert (ccm (folio na) (partida ?numero) (tipo-documento ?tipo-de-documento) (monto-total ?total) (rut-contraparte ?rut)))
   (printout t "compra-- Comprando a " ?proveedor " con letras " ?material " por un valor de $" ?letras " y en efectivo $" ?efectivo " con un total de $" ?total crlf))

(defrule ACTIVIDAD::comprar-al-credito
   (revision (partida ?numero) (rechazado false))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (actual (mes ?mes))
   (ticket (numero ?numero))
   (empresa (nombre ?empresa))
   ?f1 <- (compra (folio ?folio) (activo-fijo false) (rut ?rut) (tipo-de-documento ?tipo-de-documento) (costo_unitario ?costo_unitario) (unidades ?unidades) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (credito ?credito) (proveedor ?proveedor) (material ?material) (total ?total) (neto ?neto) (iva ?iva) (glosa ?glosa))
   (test (not (eq nil ?material)))
   (test (and (not (eq nil ?credito)) (> ?credito 0)))
   (test (and (not (eq nil ?total)) (> ?total 0)))
   (test (and (not (eq nil ?neto)) (> ?neto 0)))
   (test (and (not (eq nil ?iva)) (> ?iva 0)))
   (test (> ?credito 0))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (printout t ?*iva_factor* crlf)
   (retract ?f1)
   (assert (partida (proveedor ?proveedor) (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion ?glosa) (actividad comprar-al-credito)))
   (assert (cargo (tipo-de-documento ?tipo-de-documento) (partida ?numero) (cuenta compras) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (monto ?neto) (glosa (str-cat (str-cat ?material - < <-) ?proveedor))))
   (assert (cuenta (nombre ?proveedor) (partida ?numero) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion ?proveedor) (tipo acreedora) (grupo pasivo) (circulante true) (padre proveedores) (origen nominativo)))
   (assert (abono (tipo-de-documento ?tipo-de-documento) (partida ?numero) (cuenta ?proveedor) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (monto ?credito) (glosa (str-cat (str-cat (str-cat compra-al-credito-de- ?material) -a-) ?proveedor))))
   (assert (cargo (tipo-de-documento ?tipo-de-documento) (partida ?numero) (cuenta iva-credito) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (monto ?iva) (glosa (str-cat por-compra-al-credito-de- ?material))))
   (assert (inventario (operacion compra) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (ct ?neto) (u ?unidades) (cu ?costo_unitario) (material ?material) (proveedor ?proveedor) (glosa (str-cat por-compra-al-credito-de- ?material))))
   (assert (ccm (folio ?folio) (partida ?numero) (tipo-documento ?tipo-de-documento) (monto-total ?total) (monto-iva-recuperable ?iva) (rut-contraparte ?rut) (razon-social-contraparte ?proveedor) (monto-neto ?neto)))
   (printout t "compra-- Comprando al crédito " ?material " por un valor de $" ?credito " de un valor total de " ?total crlf))

(defrule ACTIVIDAD::devolver
   (revision (partida ?numero) (rechazado false))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (actual (mes ?mes))
   (ticket (numero ?numero))
   (empresa (nombre ?empresa))
   ?f1 <- (devolucion (rut ?rut) (tipo-de-documento ?tipo-de-documento) (partida ?numero) (costo_unitario ?costo_unitario) (unidades ?unidades) (dia ?dia) (mes ?mes) (ano ?ano) (cliente ?cliente) (material ?material) (total ?total) (neto ?neto) (iva ?iva) (glosa ?glosa))
   (test (not (eq nil ?material)))
   (test (and (not (eq nil ?total)) (> ?total 0)))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (retract ?f1)
   (assert (inventario (operacion devolucion) (u ?unidades) (cu ?costo_unitario) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (cliente ?cliente) (material ?material) (ct (* ?unidades ?costo_unitario))))
   (assert (partida (proveedor ?cliente) (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion ?glosa) (actividad devolver)))
   (assert (abono (tipo-de-documento ?tipo-de-documento) (cuenta banco-estado) (empresa ?empresa) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (monto ?total) (glosa (str-cat (str-cat (str-cat devolucion-de- ?material) -a-) ?cliente))))
   (assert (cargo (tipo-de-documento ?tipo-de-documento) (cuenta iva-debito) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (partida ?numero) (monto ?iva) (glosa (str-cat devolucion-de- ?material))))
   (assert (cargo (tipo-de-documento ?tipo-de-documento) (cuenta devolucion-sobre-ventas) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (partida ?numero) (monto (round ?neto)) (glosa (str-cat (str-cat (str-cat devolucion-de- ?material) -a-) ?cliente))))
   (assert (abono (tipo-de-documento ?tipo-de-documento) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (cuenta costos-de-ventas) (monto (round (* ?unidades ?costo_unitario))) (glosa (str-cat devolucion-de- ?material))))
   (assert (ccm (folio na) (partida ?numero) (tipo-documento ?tipo-de-documento) (monto-total ?total) (rut-contraparte ?rut) (monto-neto ?neto)))
   (printout t "-->d Devolviendo con nota de crédito " ?material " por un valor total de " ?total crlf))

(defrule ACTIVIDAD::gastar-proveedor-no-afecto
   (revision (partida ?numero) (rechazado false))
   (subcuenta (origen ?origen))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (actual (mes ?mes))
   (ticket (numero ?numero))
   (empresa (nombre ?empresa))
   ?f1 <- (gasto-proveedor (archivo ?archivo) (rut ?rut) (tipo-de-documento ?tipo-de-documento) (electronico ?electronico) (folio ?folio) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (credito ?credito) (proveedor ?proveedor) (material ?material) (monto ?monto) (glosa ?glosa))
   (test (not (eq nil ?material)))
   (test (and (not (eq nil ?monto)) (> ?monto 0)))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (retract ?f1)
   (assert (partida (archivo ?archivo) (proveedor ?proveedor) (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion ?glosa) (actividad gastar-proveedor-no-afecto)))
   (assert (cuenta (nombre ?proveedor) (descripcion pagos-a-este-proveedor) (tipo deudor) (grupo resultado) (circulante true) (padre gastos-administrativos) (origen ?origen)))
   (assert (cargo (tipo-de-documento ?tipo-de-documento) (partida ?numero) (cuenta ?proveedor) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (monto ?monto) (glosa (str-cat (str-cat ?material " por ") ?proveedor))))
   (assert (abono (tipo-de-documento ?tipo-de-documento) (partida ?numero) (cuenta banco-estado) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (monto ?monto) (glosa (str-cat (str-cat ?material " por ") ?proveedor))))
   (assert (ccm (folio ?folio) (partida ?numero) (tipo-documento ?tipo-de-documento) (monto-total ?monto) (rut-contraparte ?rut) (razon-social-contraparte ?proveedor)))
   (printout t "-->ga gasto-proveedor-no-afecto- " ?material " por un valor total de " ?monto crlf))

(defrule ACTIVIDAD::gastar-administrativo-no-afecto
   (revision (partida ?numero) (rechazado false))
   (subcuenta (origen ?origen))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (actual (mes ?mes))
   (ticket (numero ?numero))
   (empresa (nombre ?empresa))
   ?f1 <- (gasto-administrativo (archivo ?archivo) (tipo-de-documento ?tipo-de-documento) (electronico ?electronico) (folio ?folio) (rut ?rut) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (credito ?credito) (proveedor ?proveedor) (material ?material) (monto ?monto) (glosa ?glosa))
   (test (not (eq nil ?material)))
   (test (and (not (eq nil ?monto)) (> ?monto 0)))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (retract ?f1)
   (assert (partida (proveedor ?proveedor) (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion ?glosa) (actividad gastar-administrativo-no-afecto) (archivo (str-cat "../factura-exenta-" ?proveedor "-" ?folio ".png"))))
   (assert (cuenta (nombre ?proveedor) (descripcion pagos-a-este-proveedor) (tipo deudor) (grupo activo) (circulante true) (padre gastos-administrativos) (origen ?origen)))
   (assert (cargo (tipo-de-documento ?tipo-de-documento) (partida ?numero) (cuenta ?proveedor) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (monto ?monto) (glosa (str-cat (str-cat ?material " por ") ?proveedor))))
   (assert (abono (tipo-de-documento ?tipo-de-documento) (partida ?numero) (cuenta caja) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (monto ?monto) (glosa (str-cat (str-cat ?material " por ") ?proveedor))))
   (assert (ccm (folio na) (partida ?numero) (tipo-documento ?tipo-de-documento) (monto-total ?monto) (rut-contraparte ?rut)))
   (printout t "-->ga gasto-administrativo-no-afecto- " ?material " por un valor total de " ?monto crlf))

(defrule ACTIVIDAD::gastar-en-departamento-ventas-no-afecto
   (revision (partida ?numero) (rechazado false))
   (subcuenta (origen ?origen))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (actual (mes ?mes))
   (ticket (numero ?numero))
   (empresa (nombre ?empresa))
   ?f1 <- (gasto-ventas (rut ?rut) (tipo-de-documento ?tipo-de-documento) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (credito ?credito) (proveedor ?proveedor) (material ?material) (monto ?monto) (glosa ?glosa))
   (test (not (eq nil ?material)))
   (test (and (not (eq nil ?monto)) (> ?monto 0)))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (retract ?f1)
   (assert (partida (proveedor ?proveedor) (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion ?glosa) (actividad gastar-en-departamento-ventas-no-afecto)))
   (assert (cuenta (nombre ?proveedor) (descripcion gastos-a-este-departamento) (tipo deudor) (grupo activo) (circulante true) (padre gastos-ventas) (origen ?origen)))
   (assert (cargo (tipo-de-documento ?tipo-de-documento) (partida ?numero) (cuenta ?proveedor) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (monto ?monto) (glosa (str-cat (str-cat ?material " por ") ?proveedor))))
   (assert (abono (tipo-de-documento ?tipo-de-documento) (partida ?numero) (cuenta caja) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (monto ?monto) (glosa (str-cat (str-cat ?material " por ") ?proveedor))))
   (assert (ccm (folio na) (partida ?numero) (tipo-documento ?tipo-de-documento) (monto-total ?monto) (rut-contraparte ?rut)))
   (printout t "-->gav gasto-de-Dpto-ventas- " ?material " por un valor total de " ?monto crlf)
   (printout t "       pagado a " ?proveedor crlf))

(defrule ACTIVIDAD::costar-directo-ventas-revision
   (revision (partida ?numero) (rechazado false))
   (subcuenta (origen ?origen))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (actual (mes ?mes))
   (ticket (numero ?numero))
   (empresa (nombre ?empresa))
   ?f1 <- (costo-ventas (folio ?folio) (rut ?rut) (tipo-de-documento ?tipo-de-documento) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (credito ?credito) (proveedor ?proveedor) (material ?material) (monto ?monto) (glosa ?glosa) (iva ?iva) (neto ?neto) (total ?total) (archivo ?archivo))
   (not (proveedor (nombre ?proveedor) (padre costos-ventas)))
   =>
   (halt)
   (printout t "==================== W A R N I N G ==============================" crlf)
   (printout t ?proveedor " NO es un proveedor de costos ventas. Modifíque el padre de la cuenta en el archivo proveedores.txt si cree que esto es un error" crlf)
   (printout t "Error encontrado en la partida " ?numero crlf)
   (printout t "==================================================================" clrf))

(defrule ACTIVIDAD::costar-directo-ventas
   (revision (partida ?numero) (rechazado false))
   (subcuenta (origen ?origen))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (actual (mes ?mes))
   (ticket (numero ?numero))
   (empresa (nombre ?empresa))
   ?f1 <- (costo-ventas (folio ?folio) (rut ?rut) (tipo-de-documento ?tipo-de-documento) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (credito ?credito) (proveedor ?proveedor) (material ?material) (monto ?monto) (glosa ?glosa) (iva ?iva) (neto ?neto) (total ?total) (archivo ?archivo))
   (test (not (eq nil ?material)))
   (test (and (not (eq nil ?total)) (> ?total 0)))
   (test (and (not (eq nil ?neto)) (> ?neto 0)))
   (test (and (not (eq nil ?iva)) (> ?iva 0)))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   (proveedor (nombre ?proveedor) (padre costos-ventas))
   =>
   (retract ?f1)
   (assert (partida (proveedor ?proveedor) (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion ?glosa) (actividad costar-directo-ventas) (archivo (str-cat "../factura-afecta-" ?proveedor "-" ?folio ".png"))))
   (assert (cuenta (nombre ?proveedor) (recibida true) (tipo-de-documento ?tipo-de-documento) (descripcion gastos-a-este-departamento) (tipo deudor) (grupo resultado) (circulante true) (padre costos-de-ventas) (origen ?origen)))
   (assert (cargo (recibida true) (tipo-de-documento ?tipo-de-documento) (partida ?numero) (cuenta ?proveedor) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (monto ?neto) (glosa (str-cat (str-cat ?material " por ") ?proveedor))))
   (assert (cargo (recibida true) (tipo-de-documento ?tipo-de-documento) (partida ?numero) (cuenta iva-credito) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (monto ?iva) (glosa (str-cat (str-cat ?material " por ") ?proveedor))))
   (assert (abono (recibida true) (tipo-de-documento ?tipo-de-documento) (partida ?numero) (cuenta banco-estado) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (monto ?total) (glosa (str-cat (str-cat ?material " por ") ?proveedor))))
   (assert (ccm (folio ?folio) (partida ?numero) (tipo-documento ?tipo-de-documento) (monto-total ?total) (monto-iva-recuperable ?iva) (rut-contraparte ?rut) (razon-social-contraparte ?proveedor) (monto-neto ?neto)))
   (printout t "-->cd costo directo de ventas, por " ?material " por un valor total de " ?total crlf)
   (printout t "       pagado a " ?proveedor crlf))

(defrule ACTIVIDAD::gastar-promocional-afecto-iva-retenido
   (revision (partida ?numero) (rechazado false))
   (subcuenta (origen ?origen))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (actual (mes ?mes))
   (ticket (numero ?numero))
   (empresa (nombre ?empresa))
   ?f1 <- (gasto-promocional (archivo ?archivo) (folio ?folio) (rut ?rut) (tipo-de-documento ?tipo-de-documento) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (credito ?credito) (proveedor ?proveedor) (material ?material) (total ?total) (neto ?neto) (iva ?iva) (glosa ?glosa) (iva-retenido ?iva-retenido))
   (test (not (eq nil ?material)))
   (test (and (not (eq nil ?total)) (> ?total 0)))
   (test (and (not (eq nil ?neto)) (> ?neto 0)))
   (test (and (not (eq nil ?iva)) (> ?iva 0)))
   (test (and (not (eq nil ?iva-retenido)) (> ?iva-retenido 0)))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (retract ?f1)
   (if (neq nil ?archivo)
      then
      (assert (partida (archivo ?archivo) (proveedor ?proveedor) (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion ?glosa) (actividad gastar-promocional-afecto-iva-retenido)))
      else
      (assert (partida (archivo (str-cat "../factura-" ?proveedor "-" ?folio ".png")) (proveedor ?proveedor) (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion ?glosa) (actividad gastar-promocional-afecto-iva-retenido))))
   (assert (cuenta (qty 1) (recibida true) (nombre ?proveedor) (descripcion compras-promocionales) (tipo deudor) (grupo resultado) (circulante true) (padre gastos-promocionales) (origen ?origen)))
   (assert (cargo (qty 1) (recibida true) (tipo-de-documento ?tipo-de-documento) (partida ?numero) (cuenta ?proveedor) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (monto ?neto) (glosa (str-cat (str-cat ?material " por ") ?proveedor))))
   (assert (abono (qty 1) (recibida true) (tipo-de-documento ?tipo-de-documento) (partida ?numero) (cuenta banco-estado) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (monto ?total) (glosa (str-cat (str-cat ?material " por ") ?proveedor))))
   (assert (cargo (qty 1) (recibida true) (tipo-de-documento ?tipo-de-documento) (partida ?numero) (cuenta iva-credito) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (monto ?iva) (glosa (str-cat (str-cat ?material " por ") ?proveedor))))
   (assert (abono (qty 1) (recibida true) (tipo-de-documento ?tipo-de-documento) (partida ?numero) (cuenta retencion-de-iva-articulo-11) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (monto ?iva-retenido) (glosa (str-cat (str-cat ?material " por ") ?proveedor))))
   (assert (ccm (folio ?folio) (partida ?numero) (tipo-documento ?tipo-de-documento) (monto-total ?total) (monto-iva-recuperable ?iva) (rut-contraparte ?rut) (razon-social-contraparte ?proveedor) (monto-neto ?neto) (numero-interno 15) (emisor-receptor ?iva)))
   (printout t "-->ga gasto-promocional- " ?material " por un valor total de " ?total crlf))

(defrule ACTIVIDAD::gastar-proveedores-afecto-iva-retenido
   (revision (partida ?numero) (rechazado false))
   (subcuenta (origen ?origen))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (actual (mes ?mes))
   (ticket (numero ?numero))
   (empresa (nombre ?empresa))
   ?f1 <- (gasto-proveedor (archivo ?archivo) (folio ?folio) (rut ?rut) (tipo-de-documento ?tipo-de-documento) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (credito ?credito) (proveedor ?proveedor) (material ?material) (total ?total) (neto ?neto) (iva ?iva) (glosa ?glosa) (iva-retenido ?iva-retenido))
   (test (not (eq nil ?material)))
   (test (and (not (eq nil ?total)) (> ?total 0)))
   (test (and (not (eq nil ?neto)) (> ?neto 0)))
   (test (and (not (eq nil ?iva)) (> ?iva 0)))
   (test (and (not (eq nil ?iva-retenido)) (> ?iva-retenido 0)))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (retract ?f1)
   /
   (if (neq nil ?archivo)
      then
      (assert (partida (archivo ?archivo) (proveedor ?proveedor) (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion ?glosa) (actividad gastar-promocional-afecto-iva-retenido)))
      else
      (assert (partida (archivo (str-cat "../factura-" ?proveedor "-" ?folio ".png")) (proveedor ?proveedor) (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion ?glosa) (actividad gastar-promocional-afecto-iva-retenido))))
   (assert (cuenta (nombre ?proveedor) (recibida true) (descripcion compras-Dpto-Administracion) (tipo deudor) (grupo resultado) (circulante true) (padre gastos-administrativos) (origen ?origen)))
   (assert (cargo (recibida true) (tipo-de-documento ?tipo-de-documento) (partida ?numero) (cuenta ?proveedor) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (monto ?neto) (glosa (str-cat (str-cat ?material " por ") ?proveedor))))
   (assert (abono (recibida true) (tipo-de-documento ?tipo-de-documento) (partida ?numero) (cuenta banco-estado) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (monto ?total) (glosa (str-cat (str-cat ?material " por ") ?proveedor))))
   (assert (cargo (recibida true) (tipo-de-documento ?tipo-de-documento) (partida ?numero) (cuenta iva-credito) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (monto ?iva) (glosa (str-cat (str-cat ?material " por ") ?proveedor))))
   (assert (abono (recibida true) (tipo-de-documento ?tipo-de-documento) (partida ?numero) (cuenta retencion-de-iva-articulo-11) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (monto ?iva-retenido) (glosa (str-cat (str-cat ?material " por ") ?proveedor))))
   (assert (ccm (folio ?folio) (partida ?numero) (tipo-documento ?tipo-de-documento) (monto-total ?total) (rut-contraparte ?rut) (razon-social-contraparte ?proveedor) (monto-neto ?neto)))
   (printout t "-->ga proveedores- " ?material " por un valor total de " ?total crlf))

(defrule ACTIVIDAD::gastar-administrativo-afecto-iva-retenido
   (revision (partida ?numero) (rechazado false))
   (subcuenta (origen ?origen))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (actual (mes ?mes))
   (ticket (numero ?numero))
   (empresa (nombre ?empresa))
   ?f1 <- (gasto-administrativo (archivo ?archivo) (folio ?folio) (rut ?rut) (tipo-de-documento ?tipo-de-documento) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (credito ?credito) (proveedor ?proveedor) (material ?material) (total ?total) (neto ?neto) (iva ?iva) (glosa ?glosa) (iva-retenido ?iva-retenido))
   (test (not (eq nil ?material)))
   (test (and (not (eq nil ?total)) (> ?total 0)))
   (test (and (not (eq nil ?neto)) (> ?neto 0)))
   (test (and (not (eq nil ?iva)) (> ?iva 0)))
   (test (and (not (eq nil ?iva-retenido)) (> ?iva-retenido 0)))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (retract ?f1)
   (if (neq nil ?archivo)
      then
      (assert (partida (archivo ?archivo) (proveedor ?proveedor) (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion ?glosa) (actividad gastar-administrativo-afecto-iva-retenido)))
      else
      (assert (partida (archivo (str-cat "../factura-afecta-" ?proveedor "-" ?folio ".png")) (proveedor ?proveedor) (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion ?glosa) (actividad gastar-administrativo-afecto-iva-retenido))))
   (assert (cuenta (nombre ?proveedor) (recibida true) (descripcion compras-Dpto-Administracion) (tipo deudor) (grupo resultado) (circulante true) (padre gastos-administrativos) (origen ?origen)))
   (assert (cargo (recibida true) (tipo-de-documento ?tipo-de-documento) (partida ?numero) (cuenta ?proveedor) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (monto ?neto) (glosa (str-cat (str-cat ?material " por ") ?proveedor))))
   (assert (abono (recibida true) (tipo-de-documento ?tipo-de-documento) (partida ?numero) (cuenta caja) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (monto ?total) (glosa (str-cat (str-cat ?material " por ") ?proveedor))))
   (assert (cargo (recibida true) (tipo-de-documento ?tipo-de-documento) (partida ?numero) (cuenta iva-credito) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (monto ?iva) (glosa (str-cat (str-cat ?material " por ") ?proveedor))))
   (assert (abono (recibida true) (tipo-de-documento ?tipo-de-documento) (partida ?numero) (cuenta retencion-de-iva-articulo-11) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (monto ?iva-retenido) (glosa (str-cat (str-cat ?material " por ") ?proveedor))))
   (assert (ccm (folio ?folio) (partida ?numero) (tipo-documento ?tipo-de-documento) (monto-total ?total) (rut-contraparte ?rut) (razon-social-contraparte ?proveedor) (monto-neto ?neto) (monto-iva-recuperable ?iva)))
   (printout t "-->ga gasto-administrativo- " ?material " por un valor total de " ?total crlf))

(defrule ACTIVIDAD::gastar-en-investigacion-y-desarrollo-sin-retencion
   (revision (partida ?numero) (rechazado false))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (actual (mes ?mes))
   (ticket (numero ?numero))
   (empresa (nombre ?empresa))
   ?f1 <- (gasto-investigacion-y-desarrollo (folio ?folio) (rut ?rut) (archivo ?archivo) (tipo-de-documento ?tipo-de-documento) (electronico ?electronico) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (credito ?credito) (proveedor ?proveedor) (material ?material) (total ?total) (neto ?neto) (iva ?iva) (glosa ?glosa) (iva-retenido ?iva-retenido))
   (test (not (eq nil ?material)))
   (test (and (not (eq nil ?total)) (> ?total 0)))
   (test (and (not (eq nil ?neto)) (> ?neto 0)))
   (test (eq nil ?iva-retenido))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (retract ?f1)
   (if (neq nil ?archivo)
      then
      (assert (partida (archivo ?archivo) (proveedor ?proveedor) (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion ?glosa) (actividad gastar-en-investigacion-y-desarrollo)))
      else
      (assert (partida (archivo (str-cat "../factura-" ?proveedor "-" ?folio ".png")) (proveedor ?proveedor) (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion ?glosa) (actividad gastar-en-investigacion-y-desarrollo))))
   (assert (cargo (recibida true) (tipo-de-documento ?tipo-de-documento) (partida ?numero) (cuenta gastos-en-investigacion-y-desarrollo) (electronico ?electronico) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (monto ?neto) (glosa (str-cat (str-cat ?material " por ") ?proveedor))))
   (assert (abono (recibida true) (tipo-de-documento ?tipo-de-documento) (partida ?numero) (cuenta banco-estado) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (monto ?total) (glosa (str-cat (str-cat ?material " por ") ?proveedor))))
   (assert (cargo (recibida true) (tipo-de-documento ?tipo-de-documento) (partida ?numero) (cuenta iva-credito) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (monto ?iva) (glosa (str-cat (str-cat ?material " por ") ?proveedor))))
   (assert (ccm (folio na) (partida ?numero) (tipo-documento ?tipo-de-documento) (monto-total ?total) (rut-contraparte ?rut) (razon-social-contraparte ?proveedor) (monto-neto ?neto)))
   (printout t "-->gid gasto-i-d- " ?material " por un valor total de " ?total crlf)
   (printout t "       pagado a " ?proveedor crlf))

(defrule ACTIVIDAD::gastar-en-investigacion-y-desarrollo-con-retencion
   (revision (partida ?numero) (rechazado false))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (actual (mes ?mes))
   (ticket (numero ?numero))
   (empresa (nombre ?empresa))
   ?f1 <- (gasto-investigacion-y-desarrollo (folio ?folio) (rut ?rut) (archivo ?archivo) (tipo-de-documento ?tipo-de-documento) (electronico ?electronico) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (credito ?credito) (proveedor ?proveedor) (material ?material) (total ?total) (neto ?neto) (iva ?iva) (glosa ?glosa) (iva-retenido ?iva-retenido))
   (test (not (eq nil ?material)))
   (test (and (not (eq nil ?total)) (> ?total 0)))
   (test (and (not (eq nil ?neto)) (> ?neto 0)))
   (test (and (not (eq nil ?iva)) (> ?iva 0)))
   (test (neq nil ?iva-retenido))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (retract ?f1)
   (if (neq nil ?archivo)
      then
      (assert (partida (archivo ?archivo) (proveedor ?proveedor) (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion ?glosa) (actividad gastar-en-investigacion-y-desarrollo)))
      else
      (assert (partida (archivo (str-cat "../factura-" ?proveedor "-" ?folio ".png")) (proveedor ?proveedor) (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion ?glosa) (actividad gastar-en-investigacion-y-desarrollo))))
   (assert (cargo (recibida true) (tipo-de-documento ?tipo-de-documento) (electronico ?electronico) (partida ?numero) (cuenta gastos-en-investigacion-y-desarrollo) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (monto ?neto) (glosa (str-cat (str-cat ?material " por ") ?proveedor))))
   (assert (abono (recibida true) (tipo-de-documento ?tipo-de-documento) (partida ?numero) (cuenta banco-estado) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (monto ?total) (glosa (str-cat (str-cat ?material " por ") ?proveedor))))
   (assert (cargo (recibida true) (tipo-de-documento ?tipo-de-documento) (partida ?numero) (cuenta iva-credito) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (monto ?iva) (glosa (str-cat (str-cat ?material " por ") ?proveedor))))
   (assert (ccm (folio na) (partida ?numero) (tipo-documento ?tipo-de-documento) (monto-total ?total) (rut-contraparte ?rut) (razon-social-contraparte ?proveedor) (monto-neto ?neto)))
   (printout t "-->gid gasto-i-d- " ?material " por un valor total de " ?total crlf)
   (printout t "       pagado a " ?proveedor crlf))

(defrule ACTIVIDAD::gastar-en-promocion
   (revision (partida ?numero) (rechazado false))
   (subcuenta (origen ?origen))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (actual (mes ?mes))
   (ticket (numero ?numero))
   (empresa (nombre ?empresa))
   ?f1 <- (gasto-promocional (archivo ?archivo) (folio ?folio) (rut ?rut) (tipo-de-documento ?tipo-de-documento) (electronico ?electronico) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (credito ?credito) (proveedor ?proveedor) (material ?material) (total ?total) (neto ?neto) (iva ?iva) (glosa ?glosa) (iva-retenido ?iva-retenido))
   (test (not (eq nil ?material)))
   (test (and (not (eq nil ?total)) (> ?total 0)))
   (test (and (not (eq nil ?neto)) (> ?neto 0)))
   (test (and (not (eq nil ?iva)) (> ?iva 0)))
   (test (eq nil ?iva-retenido))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (retract ?f1)
   (if (neq nil ?archivo)
      then
      (assert (partida (archivo ?archivo) (proveedor ?proveedor) (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion ?glosa) (actividad gastar-en-promocion)))
      else
      (assert (partida (archivo (str-cat "../factura-" ?proveedor "-" ?folio ".png")) (proveedor ?proveedor) (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion ?glosa) (actividad gastar-en-promocion))))
   (assert (cuenta (recibida true) (nombre ?proveedor) (descripcion ?proveedor) (tipo deudor) (grupo resultado) (circulante true) (padre gastos-promocionales) (origen ?origen)))
   (assert (cargo (recibida true) (tipo-de-documento ?tipo-de-documento) (partida ?numero) (electronico ?electronico) (cuenta ?proveedor) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (monto ?neto) (glosa (str-cat (str-cat ?material " por ") ?proveedor))))
   (assert (abono (recibida true) (tipo-de-documento ?tipo-de-documento) (partida ?numero) (cuenta banco-estado) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (monto ?total) (glosa (str-cat (str-cat ?material " por ") ?proveedor))))
   (assert (cargo (recibida true) (tipo-de-documento ?tipo-de-documento) (partida ?numero) (cuenta iva-credito) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (monto ?iva) (glosa (str-cat (str-cat ?material " por ") ?proveedor))))
   (assert (ccm (folio ?folio) (partida ?numero) (tipo-documento ?tipo-de-documento) (monto-total ?total) (monto-iva-recuperable ?iva) (rut-contraparte ?rut) (razon-social-contraparte ?proveedor) (monto-neto ?neto)))
   (printout t "-->gp gasto-promocinal- " ?material " por un valor total de " ?total crlf)
   (printout t "       pagado a " ?proveedor crlf))

(defrule ACTIVIDAD::gastar-proveedor-afecto
   (revision (partida ?numero) (rechazado false))
   (subcuenta (origen ?origen))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (actual (mes ?mes))
   (ticket (numero ?numero))
   (empresa (nombre ?empresa))
   ?f1 <- (gasto-proveedor (archivo ?archivo) (folio ?folio) (rut ?rut) (tipo-de-documento ?tipo-de-documento) (electronico ?electronico) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (credito ?credito) (proveedor ?proveedor) (material ?material) (total ?total) (neto ?neto) (iva ?iva) (glosa ?glosa) (iva-retenido ?iva-retenido))
   (test (not (eq nil ?material)))
   (test (and (not (eq nil ?total)) (> ?total 0)))
   (test (and (not (eq nil ?neto)) (> ?neto 0)))
   (test (and (not (eq nil ?iva)) (> ?iva 0)))
   (test (eq nil ?iva-retenido))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (if (neq nil ?archivo)
      then
      (assert (partida (archivo ?archivo) (proveedor ?proveedor) (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion ?glosa) (actividad gastar-proveedor-afecto)))
      else
      (assert (partida (archivo (str-cat "../factura-afecta-" ?proveedor "-" ?folio ".png")) (proveedor ?proveedor) (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion ?glosa) (actividad gastar-proveedor-afecto))))
   (assert (cuenta (nombre ?proveedor) (recibida true) (descripcion compras-Dpto-Administracion) (tipo deudor) (grupo resultado) (circulante true) (padre gastos-administrativos) (origen ?origen)))
   (assert (cargo (recibida true) (tipo-de-documento ?tipo-de-documento) (partida ?numero) (electronico ?electronico) (cuenta ?proveedor) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (monto ?neto) (glosa (str-cat (str-cat ?material " por ") ?proveedor))))
   (assert (abono (recibida true) (tipo-de-documento ?tipo-de-documento) (partida ?numero) (cuenta banco-estado) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (monto ?total) (glosa (str-cat (str-cat ?material " por ") ?proveedor))))
   (assert (cargo (recibida true) (tipo-de-documento ?tipo-de-documento) (partida ?numero) (cuenta iva-credito) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (monto ?iva) (glosa (str-cat (str-cat ?material " por ") ?proveedor))))
   (assert (ccm (folio ?folio) (partida ?numero) (tipo-documento ?tipo-de-documento) (monto-total ?total) (rut-contraparte ?rut) (monto-iva-recuperable ?iva) (razon-social-contraparte ?proveedor) (monto-neto ?neto)))
   (printout t "-->ga gasto-proveedor-afecto- " ?material " por un valor total de " ?total crlf)
   (printout t "       pagado a " ?proveedor crlf))

(defrule ACTIVIDAD::gastar-en-depto-administracion-afecto
   (revision (partida ?numero) (rechazado false))
   (subcuenta (origen ?origen))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (actual (mes ?mes))
   (ticket (numero ?numero))
   (empresa (nombre ?empresa))
   ?f1 <- (gasto-administrativo (archivo ?archivo) (folio ?folio) (rut ?rut) (tipo-de-documento ?tipo-de-documento) (electronico ?electronico) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (credito ?credito) (proveedor ?proveedor) (material ?material) (total ?total) (neto ?neto) (iva ?iva) (glosa ?glosa) (iva-retenido ?iva-retenido))
   (test (not (eq nil ?material)))
   (test (and (not (eq nil ?total)) (> ?total 0)))
   (test (and (not (eq nil ?neto)) (> ?neto 0)))
   (test (and (not (eq nil ?iva)) (> ?iva 0)))
   (test (eq nil ?iva-retenido))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (retract ?f1)
   (if (neq nil ?archivo)
      then
      (assert (partida (archivo ?archivo) (proveedor ?proveedor) (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion ?glosa) (actividad gastar-en-administracion-afecto)))
      else
      (assert (partida (archivo (str-cat "../factura-afecta-" ?proveedor "-" ?folio ".png")) (proveedor ?proveedor) (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion ?glosa) (actividad gastar-en-administracion-afecto))))
   (assert (cuenta (nombre ?proveedor) (recibida true) (descripcion compras-Dpto-Administracion) (tipo deudor) (grupo resultado) (circulante true) (padre gastos-administrativos) (origen ?origen)))
   (assert (cargo (recibida true) (tipo-de-documento ?tipo-de-documento) (partida ?numero) (electronico ?electronico) (cuenta ?proveedor) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (monto ?neto) (glosa (str-cat (str-cat ?material " por ") ?proveedor))))
   (assert (abono (recibida true) (tipo-de-documento ?tipo-de-documento) (partida ?numero) (cuenta caja) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (monto ?total) (glosa (str-cat (str-cat ?material " por ") ?proveedor))))
   (assert (cargo (recibida true) (tipo-de-documento ?tipo-de-documento) (partida ?numero) (cuenta iva-credito) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (monto ?iva) (glosa (str-cat (str-cat ?material " por ") ?proveedor))))
   (assert (ccm (folio ?folio) (partida ?numero) (tipo-documento ?tipo-de-documento) (monto-total ?total) (monto-iva-recuperable ?iva) (rut-contraparte ?rut) (razon-social-contraparte ?proveedor) (monto-neto ?neto)))
   (printout t "-->ga gasto-administrativo- " ?material " por un valor total de " ?total crlf)
   (printout t "       pagado a " ?proveedor crlf))

(defrule ACTIVIDAD::gastar-afecto
   (revision (partida ?numero) (rechazado false))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (actual (mes ?mes))
   (ticket (numero ?numero))
   (empresa (nombre ?empresa))
   ?f1 <- (gasto-afecto (archivo ?archivo) (folio ?folio) (rut ?rut) (ano ?ano) (tipo-de-documento ?tipo-de-documento) (partida ?numero) (dia ?dia) (mes ?mes) (credito ?credito) (proveedor ?proveedor) (material ?material) (total ?total) (neto ?neto) (iva ?iva) (glosa ?glosa))
   (test (not (eq nil ?material)))
   (test (and (not (eq nil ?credito)) (> ?credito 0)))
   (test (and (not (eq nil ?total)) (> ?total 0)))
   (test (and (not (eq nil ?neto)) (> ?neto 0)))
   (test (and (not (eq nil ?iva)) (> ?iva 0)))
   (test (> ?credito 0))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (halt)
   (printout t "No revisado" crlf)
   (retract ?f1)
   (assert (dia ?dia))
   (if (neq nil ?archivo)
      then
      (assert (partida (archivo ?archivo) (proveedor ?proveedor) (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion ?glosa) (actividad gastar-afecto)))
      else
      (assert (partida (archivo (str-cat "../factura-" ?proveedor "-" ?folio ".png")) (proveedor ?proveedor) (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion ?glosa) (actividad gastar-afecto))))
   (assert (cargo (recibida true) (tipo-de-documento ?tipo-de-documento) (partida ?numero) (cuenta compras) (empresa ?empresa) (dia ?dia) (mes ?mes) (monto ?neto) (glosa (str-cat (str-cat ?material - < <-) ?proveedor))))
   (assert (abono (recibida true) (tipo-de-documento ?tipo-de-documento) (partida ?numero) (cuenta proveedores) (empresa ?empresa) (dia ?dia) (mes ?mes) (monto ?credito) (glosa (str-cat (str-cat (str-cat compra-fiada-de- ?material) -a-) ?proveedor))))
   (assert (cuenta (nombre ?proveedor) (partida ?numero) (dia ?dia) (recibida true) (descripcion cobro-realizados-a-proveedor-comex) (tipo acreedora) (grupo pasivo) (circulante true) (padre proveedores) (origen nominativo)))
   (assert (cargo (recibida true) (tipo-de-documento ?tipo-de-documento) (partida ?numero) (cuenta iva-credito) (empresa ?empresa) (dia ?dia) (mes ?mes) (monto ?iva) (glosa (str-cat por-compra-fiada-de- ?material))))
   (assert (ccm (folio ?folio) (partida ?numero) (tipo-documento ?tipo-de-documento) (monto-total ?credito) (rut-contraparte ?rut) (monto-iva-recuperable ?iva) (razon-social-contraparte ?proveedor) (monto-neto ?neto)))
   (printout t "-->cf comprando fiado " ?material " por un valor de $" ?credito " de un valor total de " ?total crlf)
   (printout t "       pagado a " ?proveedor crlf))

(defrule ACTIVIDAD::amortizar-credito-de-atencion-a-colaborador
   (revision (partida ?numero) (rechazado false))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (actual (mes ?mes))
   (ticket (numero ?numero))
   (empresa (nombre ?nombre))
   ?f1 <- (venta-anticipada (rut ?rut) (tipo-de-documento ?tipo-de-documento) (partida ?numero_1) (folio ?folio) (unidades ?unidades) (costo_unitario ?costo_unitario) (dia ?dia_1) (mes ?mes_1) (ano ?ano_1) (credito ?credito) (colaborador ?colaborador) (material ?material) (total ?total) (neto ?neto) (iva ?iva))
   (amortizacion (folio ?folio) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano))
   (test (neq nil ?material))
   (test (neq nil ?colaborador))
   (test (eq nil ?credito))
   (test (and (not (eq nil ?total)) (> ?total 0)))
   (test (and (not (eq nil ?neto)) (> ?neto 0)))
   (test (and (not (eq nil ?iva)) (> ?iva 0)))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (assert (partida (proveedor ?colaborador) (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion (str-cat "Por amortizacion de Folio: " ?folio " colaborador: " ?colaborador " " ?material " total: " ?total)) (actividad amortizar-credito-de-atencion-a-colaborador)))
   (assert (abono (tipo-de-documento ?tipo-de-documento) (empresa ?nombre) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (cuenta ventas) (monto ?neto) (glosa (str-cat por-amortizacion-de- ?material))))
   (assert (abono (tipo-de-documento ?tipo-de-documento) (empresa ?nombre) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (cuenta iva-debito) (monto ?iva) (glosa (str-cat por-amortizacion-de- ?material))))
   (assert (cargo (tipo-de-documento ?tipo-de-documento) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?nombre) (cuenta ingresos-percibidos-por-adelantado) (monto ?total) (glosa (str-cat " Por amortización de Folio: " ?folio " material: " ?material))))
   (assert (ccm (folio ?folio) (partida ?numero) (tipo-documento ?tipo-de-documento) (monto-total ?total) (rut-contraparte ?rut) (razon-social-contraparte ?colaborador) (monto-neto ?neto)))
   (printout t "-->am Amortizando Factura " tab ?folio tab ?material tab ?colaborador crlf))

(defrule ACTIVIDAD::rendir-vouchers-exentos-sii
   (revision (partida ?numero) (rechazado false))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (actual (mes ?mes))
   (ticket (numero ?numero))
   (empresa (nombre ?nombre))
   ?f1 <- (rendicion-de-vouchers-sii (partida ?numero) (unidades ?unidades) (mes ?mes) (ano ?ano) (total ?total) (neto ?neto) (iva ?iva))
   (test (and (not (eq nil ?total)) (> ?total 0)))
   (test (and (not (eq nil ?neto)) (= ?neto 0)))
   (test (and (not (eq nil ?iva)) (= ?iva 0)))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date 1 ?mes ?ano)))
   =>
   (bind ?dia 31)
   (assert (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion (str-cat "Por rendición de vouchers de " ?mes " de " ?ano)) (actividad rendir-vouchers-exentos-sii)))
   (assert (cargo (qty ?unidades) (electronico true) (partida ?numero) (tipo-de-documento 48) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?nombre) (cuenta banco-estado) (monto ?total) (glosa (str-cat " vouchers de " ?mes " de " ?ano))))
   (assert (abono (qty ?unidades) (electronico true) (partida ?numero) (tipo-de-documento 48) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?nombre) (cuenta ventas-con-voucher-exento) (monto (round ?total)) (glosa (str-cat " vouchers de " ?mes " de " ?ano))))
   (assert (ccm (folio na) (partida ?numero) (tipo-documento 48) (monto-total ?total)))
   (printout t "-->rv Rendición Mensual de Vouchers Exentos Válidos como Boleta Electrónica SII $" ?total crlf))

(defrule ACTIVIDAD::rendir-vouchers-afectos-sii
   (revision (partida ?numero) (rechazado false))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (actual (mes ?mes))
   (ticket (numero ?numero))
   (empresa (nombre ?nombre))
   ?f1 <- (rendicion-de-vouchers-sii (partida ?numero) (unidades ?unidades) (mes ?mes) (ano ?ano) (total ?total) (neto ?neto) (iva ?iva))
   (test (and (not (eq nil ?total)) (> ?total 0)))
   (test (and (not (eq nil ?neto)) (> ?neto 0)))
   (test (and (not (eq nil ?iva)) (> ?iva 0)))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date 1 ?mes ?ano)))
   =>
   (bind ?dia 31)
   (assert (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion (str-cat "Por rendición de vouchers de " ?mes " de " ?ano)) (actividad rendir-vouchers-afectos-sii)))
   (assert (cargo (qty ?unidades) (electronico true) (partida ?numero) (tipo-de-documento 48) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?nombre) (cuenta banco-estado) (monto ?total) (glosa (str-cat " vouchers de " ?mes " de " ?ano))))
   (assert (abono (qty ?unidades) (electronico true) (partida ?numero) (tipo-de-documento 48) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?nombre) (cuenta ventas-con-voucher-afecto) (monto ?neto) (glosa (str-cat " vouchers de " ?mes " de " ?ano))))
   (assert (abono (qty ?unidades) (partida ?numero) (electronico true) (tipo-de-documento 48) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?nombre) (cuenta iva-debito) (monto ?iva) (glosa (str-cat " vouchers de " ?mes " de " ?ano))))
   (assert (ccm (folio na) (partida ?numero) (tipo-documento 48) (monto-total ?total) (monto-iva-recuperable ?iva) (monto-neto ?neto)))
   (printout t "-->rv Rendición Mensual de Vouchers Afectos Válidos como Boleta Electrónica SII $" ?total crlf))

(defrule ACTIVIDAD::rendir-eboletas-exenta-sii
   (revision (partida ?numero) (rechazado false))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (actual (mes ?mes))
   (ticket (numero ?numero))
   (empresa (nombre ?nombre))
   ?f1 <- (rendicion-de-eboletas-sii (folio ?folio) (partida ?numero) (unidades ?unidades) (mes ?mes) (ano ?ano) (total ?total) (neto ?neto) (iva ?iva))
   (test (and (not (eq nil ?total)) (> ?total 0)))
   (test (and (not (eq nil ?neto)) (= ?neto 0)))
   (test (and (not (eq nil ?iva)) (= ?iva 0)))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date 1 ?mes ?ano)))
   =>
   (bind ?dia 31)
   (assert (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion (str-cat "Por rendición de e-boletas exentas de " ?mes " de " ?ano)) (actividad rendir-eboletas-sii)))
   (assert (cargo (tipo-de-documento 39) (qty ?unidades) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?nombre) (cuenta banco-estado) (monto ?total) (glosa (str-cat " e-boletas exentas de " ?mes " de " ?ano))))
   (assert (abono (tipo-de-documento 39) (qty ?unidades) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?nombre) (cuenta ventas-con-eboleta-exenta) (monto ?total) (glosa (str-cat " e- boletas exentas de " ?mes " de " ?ano))))
   (assert (ccm (folio na) (partida ?numero) (tipo-documento 39) (monto-total ?total) (monto-neto ?neto)))
   (printout t "-->rv Rendición Mensual de e-Boletas Electrónicas Exentas en SII $" ?total crlf))

(defrule ACTIVIDAD::rendir-eboletas-afecta-sii
   (revision (partida ?numero) (rechazado false))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (actual (mes ?mes))
   (ticket (numero ?numero))
   (empresa (nombre ?nombre))
   ?f1 <- (rendicion-de-eboletas-sii (folio ?folio) (partida ?numero) (unidades ?unidades) (mes ?mes) (ano ?ano) (total ?total) (neto ?neto) (iva ?iva))
   (test (and (not (eq nil ?total)) (> ?total 0)))
   (test (and (not (eq nil ?neto)) (> ?neto 0)))
   (test (and (not (eq nil ?iva)) (> ?iva 0)))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date 1 ?mes ?ano)))
   =>
   (bind ?dia 31)
   (assert (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion (str-cat "Por rendición de e-boletas afectas de " ?mes " de " ?ano)) (actividad rendir-boletas-sii)))
   (assert (cargo (qty ?unidades) (tipo-de-documento 39) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?nombre) (cuenta banco-estado) (monto ?total) (glosa (str-cat " e-boletas afectas de " ?mes " de " ?ano))))
   (assert (abono (qty ?unidades) (tipo-de-documento 39) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?nombre) (cuenta ventas-con-eboleta-afecta) (monto ?neto) (glosa (str-cat " e-boletas afectas de " ?mes " de " ?ano))))
   (assert (abono (qty ?unidades) (tipo-de-documento 39) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?nombre) (cuenta iva-debito) (monto ?iva) (glosa (str-cat " e-boletas afectas de " ?mes " de " ?ano))))
   (assert (ccm (folio na) (partida ?numero) (tipo-documento 39) (monto-total ?total) (monto-iva-recuperable ?iva) (monto-neto ?neto)))
   (printout t "-->rv Rendición Mensual de e-Boletas Electrónicas Afectas Emitidas en SII $" ?total crlf))

(defrule ACTIVIDAD::vender-en-registro-compra-venta-no-afecto-sii
   (revision (partida ?numero) (rechazado false))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (actual (mes ?mes))
   (ticket (numero ?numero))
   (empresa (nombre ?nombre))
   ?f1 <- (venta-sii (archivo ?archivo) (rut ?rut) (qty ?qty) (partida ?numero) (folio ?folio) (unidades ?unidades) (costo_unitario ?costo_unitario) (dia ?dia) (mes ?mes) (ano ?ano) (credito ?credito) (colaborador ?colaborador) (material ?material) (total ?total) (neto ?neto) (iva ?iva))
   (test (neq nil ?material))
   (test (neq nil ?colaborador))
   (test (eq nil ?credito))
   (test (and (not (eq nil ?total)) (eq ?total 0)))
   (test (and (not (eq nil ?neto)) (> ?neto 0)))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (assert (partida (proveedor ?colaborador) (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion (str-cat "Por venta en registro de compra-ventas del SII folio: " ?folio " de " ?material " a " ?colaborador)) (actividad vender-en-registro-de-compra-venta-sii) (archivo (str-cat "../factura-propia-exenta-" ?folio ".png"))))
   (assert (cargo (tipo-de-documento 34) (electronico true) (qty ?qty) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?nombre) (cuenta banco-estado) (monto ?neto) (glosa (str-cat "-" ?material))))
   (assert (abono (tipo-de-documento 34) (electronico true) (qty ?qty) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?nombre) (cuenta ventas-con-factura-exenta) (monto ?neto) (glosa (str-cat "-" ?material))))
   (assert (ccm (folio ?folio) (partida ?numero) (tipo-documento 34) (monto-total ?neto) (razon-social-contraparte ?colaborador) (rut-contraparte ?rut) (monto-exento ?neto)))
   (printout t "-->vsii Venta SII No Afecta " ?folio " de " ?material " por un valor de $" ?total crlf))

(defrule ACTIVIDAD::vender-en-registro-compra-venta-sii
   (revision (partida ?numero) (rechazado false))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (actual (mes ?mes))
   (ticket (numero ?numero))
   (empresa (nombre ?nombre))
   ?f1 <- (venta-sii (rut ?rut) (qty ?qty) (partida ?numero) (folio ?folio) (unidades ?unidades) (costo_unitario ?costo_unitario) (dia ?dia) (mes ?mes) (ano ?ano) (credito ?credito) (colaborador ?colaborador) (material ?material) (total ?total) (neto ?neto) (iva ?iva) (archivo ?archivo))
   (test (neq nil ?material))
   (test (neq nil ?colaborador))
   (test (eq nil ?credito))
   (test (and (not (eq nil ?total)) (> ?total 0)))
   (test (and (not (eq nil ?neto)) (> ?neto 0)))
   (test (and (not (eq nil ?iva)) (> ?iva 0)))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (assert (partida (proveedor ?colaborador) (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion (str-cat "Por venta en registro de compra-ventas del SII folio: " ?folio " de " ?material " a " ?colaborador)) (actividad vender-en-registro-de-compra-venta-sii) (archivo (str-cat "../factura-propia-afecta-" ?folio ".png"))))
   (assert (cargo (tipo-de-documento 33) (electronico true) (qty ?qty) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?nombre) (cuenta banco-estado) (monto ?total) (glosa (str-cat "-" ?material))))
   (assert (abono (tipo-de-documento 33) (electronico true) (qty ?qty) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?nombre) (cuenta ventas-con-factura-afecta) (monto ?neto) (glosa (str-cat "-" ?material))))
   (assert (abono (tipo-de-documento 33) (electronico true) (qty ?qty) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?nombre) (cuenta iva-debito) (monto ?iva) (glosa (str-cat "-" ?material))))
   (assert (ccm (folio ?folio) (partida ?numero) (tipo-documento 33) (monto-total ?total) (razon-social-contraparte ?colaborador) (rut-contraparte ?rut) (monto-iva-recuperable ?iva) (monto-neto ?neto)))
   (printout t "-->vsii Venta SII " ?folio " de " ?material " por un valor de $" ?total crlf))

(defrule ACTIVIDAD::ingreso-anticipado-de-credito-de-atencion-a-colaborador
   (revision (partida ?numero) (rechazado false))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (actual (mes ?mes))
   (ticket (numero ?numero))
   (empresa (nombre ?nombre))
   ?f1 <- (venta-anticipada (rut ?rut) (partida ?numero) (folio ?folio) (unidades ?unidades) (costo_unitario ?costo_unitario) (dia ?dia) (mes ?mes) (ano ?ano) (credito ?credito) (colaborador ?colaborador) (material ?material) (total ?total) (neto ?neto) (iva ?iva))
   (test (neq nil ?material))
   (test (neq nil ?colaborador))
   (test (neq nil ?credito))
   (test (and (not (eq nil ?total)) (> ?total 0)))
   (test (and (not (eq nil ?neto)) (> ?neto 0)))
   (test (and (not (eq nil ?iva)) (> ?iva 0)))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (assert (partida (proveedor ?colaborador) (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion (str-cat "Por ingreso anticipado en folio: " ?folio " de " ?material " a " ?colaborador)) (actividad ingreso-anticipado-de-credito-de-atencion-a-colaborador)))
   (assert (cargo (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?nombre) (cuenta banco-estado) (monto ?total) (glosa (str-cat "-" ?material))))
   (assert (abono (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?nombre) (cuenta ingresos-percibidos-por-adelantado) (monto ?total) (glosa (str-cat "-" ?material))))
   (assert (ccm (folio ?folio) (partida ?numero) (tipo-documento ingreso-anticipado-colaborador) (monto-total ?total) (razon-social-contraparte ?colaborador) (rut-contraparte ?rut) (monto-iva-recuperable ?iva) (monto-neto ?neto)))
   (printout t "-->ia Ingreso Anticipado Factura " ?folio " de " ?material " por un valor de $" ?total crlf))

(defrule ACTIVIDAD::anular-vouchers
   (no funciona)
   (revision (partida ?numero) (rechazado false))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (actual (mes ?mes))
   (ticket (numero ?numero))
   (empresa (nombre ?nombre))
   (anulacion-de-vouchers (rut ?rut) (subcuenta ?subcuenta) (recibida true) (folio-nota ?folio-nota) (glosa ?glosa) (total ?total) (neto ?neto) (iva ?iva) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano))
   (test (and (not (eq nil ?total)) (> ?total 0)))
   (test (and (not (eq nil ?neto)) (> ?neto 0)))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (assert (partida (proveedor subcuenta) (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion (str-cat "Devolución a subcuenta " ?subcuenta " por " ?glosa " mes " ?mes)) (actividad anular-vouchers)))
   (assert (cargo (tipo-de-documento 61) (recibida true) (electronico true) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?nombre) (cuenta banco-estado) (monto ?total) (glosa (str-cat nota-credito ?subcuenta))))
   (assert (abono (tipo-de-documento 61) (recibida true) (electronico true) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?nombre) (cuenta ?subcuenta) (monto ?neto) (glosa ?glosa)))
   (assert (abono (tipo-de-documento 61) (recibida true) (electronico true) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?nombre) (cuenta iva-credito) (monto ?iva) (glosa (str-cat nota-credito ?subcuenta))))
   (assert (ccm (folio ?folio-nota) (partida ?numero) (tipo-documento 61) (monto-total ?total) (razon-social-contraparte ?subcuenta) (rut-contraparte ?rut) (monto-neto ?neto)))
   (printout t "-->avouchers Anula Vouchers " ?subcuenta " por " ?total crlf)
   (halt))

(defrule ACTIVIDAD::dar-cuenta-de-nota-de-credito-de-factura-reclamada-de-proveedor
   (revision (partida ?numero) (rechazado false))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (actual (mes ?mes))
   (ticket (numero ?numero))
   ?nonce <- (nonce (ticket ?numero))
   (empresa (nombre ?nombre))
   (nota-de-credito-de-factura-reclamada (cuenta-de-pago ?cuenta-de-pago) (folio-factura ?folio-factura) (folio-nota ?folio-nota) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano))
   ?f1 <- (gasto-proveedor (folio ?folio-factura) (rut ?rut) (tipo-de-documento ?tipo-de-documento) (electronico ?electronico) (partida ?partida-factura) (dia ?dia-factura) (mes ?mes-factura) (ano ?ano-factura) (credito ?credito) (proveedor ?proveedor) (material ?material) (total ?total) (neto ?neto) (iva ?iva) (glosa ?glosa) (iva-retenido ?iva-retenido))
   (cuenta (nombre ?proveedor) (padre ?padre))
   (test (and (not (eq nil ?total)) (> ?total 0)))
   (test (and (not (eq nil ?neto)) (> ?neto 0)))
   (test (and (not (eq nil ?iva)) (> ?iva 0)))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (retract ?nonce)
   (assert (partida (proveedor subcuenta) (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion (str-cat "Devolución a subcuenta " ?proveedor " por " ?glosa " mes " ?mes)) (actividad dar-cuenta-de-nota-de-credito-de-factura-reclamada-de-proveedor) (archivo (str-cat "../nota-de-credito-" ?proveedor "-" ?folio-nota ".png"))))
   (assert (cargo (tipo-de-documento 61) (recibida true) (electronico true) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?nombre) (cuenta ?cuenta-de-pago) (monto ?total) (glosa (str-cat nota-credito ?proveedor))))
   (assert (abono (tipo-de-documento 61) (recibida true) (electronico true) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?nombre) (cuenta ?proveedor) (monto ?neto) (glosa ?glosa)))
   (assert (abono (tipo-de-documento 61) (recibida true) (electronico true) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?nombre) (cuenta iva-credito) (monto ?iva) (glosa (str-cat nota-credito ?proveedor))))
   (assert (ccm (folio ?folio-nota) (partida ?numero) (tipo-documento 61) (monto-total ?total) (razon-social-contraparte ?proveedor) (rut-contraparte ?rut) (monto-neto ?neto)))
   (printout t "-->nct Nota de Crédito de Factura Reclamada " ?folio-factura " a subcuenta " ?proveedor crlf))

(defrule ACTIVIDAD::recibir-nota-de-credito-recibida-de-subcuenta-existente
   (revision (partida ?numero) (rechazado false))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (actual (mes ?mes))
   (ticket (numero ?numero))
   (empresa (nombre ?nombre))
   (nota-de-credito-de-subcuenta-existente (proveedor ?proveedor) (rut ?rut) (subcuenta ?subcuenta) (recibida true) (folio-nota ?folio-nota) (glosa ?glosa) (total ?total) (neto ?neto) (iva ?iva) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (archivo ?archivo))
   (test (and (not (eq nil ?total)) (> ?total 0)))
   (test (and (not (eq nil ?neto)) (> ?neto 0)))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (assert (partida (proveedor subcuenta) (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion (str-cat "Devolución a subcuenta " ?subcuenta " por " ?glosa " mes " ?mes)) (actividad dar-nota-de-credito-recibida-subcuenta-existente) (archivo (str-cat "../nota-de-credito-" ?proveedor "-" ?folio-nota ".png"))))
   (assert (cargo (tipo-de-documento 61) (recibida true) (electronico true) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?nombre) (cuenta banco-estado) (monto ?total) (glosa (str-cat nota-credito ?subcuenta))))
   (assert (abono (tipo-de-documento 61) (recibida true) (electronico true) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?nombre) (cuenta ?subcuenta) (monto ?neto) (glosa ?glosa)))
   (assert (abono (tipo-de-documento 61) (recibida true) (electronico true) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?nombre) (cuenta iva-credito) (monto ?iva) (glosa (str-cat nota-credito ?subcuenta))))
   (assert (ccm (folio ?folio-nota) (partida ?numero) (tipo-documento 61) (monto-total ?total) (razon-social-contraparte ?subcuenta) (rut-contraparte ?rut) (monto-neto ?neto)))
   (printout t "-->nct Nota de Crédito Recibida " ?subcuenta " por " ?total crlf))

(defrule ACTIVIDAD::dar-nota-de-credito-emitida-de-subcuenta-existente
   (revision (partida ?numero) (rechazado false))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (actual (mes ?mes))
   (ticket (numero ?numero))
   (empresa (nombre ?nombre))
   (nota-de-credito-de-subcuenta-existente (proveedor ?proveedor) (archivo ?archivo) (rut ?rut) (subcuenta ?subcuenta) (emitida true) (folio-nota ?folio-nota) (glosa ?glosa) (total ?total) (neto ?neto) (iva ?iva) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano))
   (test (and (not (eq nil ?total)) (> ?total 0)))
   (test (and (not (eq nil ?neto)) (> ?neto 0)))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (assert (partida (proveedor subcuenta) (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion (str-cat "Devolución a subcuenta " ?subcuenta " por " ?glosa " mes " ?mes)) (actividad dar-nota-de-credito-emitida-subcuenta-existente) (archivo (str-cat "../nota-de-credito-propia-" ?folio-nota ".png"))))
   (assert (abono (tipo-de-documento 61) (electronico true) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?nombre) (cuenta banco-estado) (monto ?total) (glosa (str-cat nota-credito ?subcuenta))))
   (assert (cargo (tipo-de-documento 61) (electronico true) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?nombre) (cuenta ?subcuenta) (monto ?neto) (glosa ?glosa)))
   (assert (cargo (tipo-de-documento 61) (electronico true) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?nombre) (cuenta iva-debito) (monto ?iva) (glosa (str-cat nota-credito ?subcuenta))))
   (assert (ccm (folio ?folio-nota) (partida ?numero) (tipo-documento 61) (monto-total ?total) (rut-contraparte ?rut) (monto-iva-recuperable ?iva) (razon-social-contraparte ?subcuenta) (monto-neto ?neto)))
   (printout t "-->nct Nota de Crédito Emitida " ?subcuenta " por " ?total crlf))

(defrule ACTIVIDAD::dar-nota-de-credito-anonima-con-monto
   (revision (partida ?numero) (rechazado false))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (actual (mes ?mes))
   (ticket (numero ?numero))
   (empresa (nombre ?nombre))
   (nota-de-credito (rut ?rut) (folio-nota ?folio-nota) (folio ?folio) (total ?total) (neto ?neto) (iva ?iva) (colaborador ?colaborador) (material ?material) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano))
   (test (and (not (eq nil ?total)) (> ?total 0)))
   (test (and (not (eq nil ?neto)) (> ?neto 0)))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (assert (partida (proveedor ?colaborador) (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion (str-cat "Nota de Crédito SII: " ?folio-nota " que anula Factura SII " ?folio " de " ?material " a " ?colaborador)) (actividad dar-nota-de-credito-anomina-con-monto)))
   (assert (cargo (tipo-de-documento 56) (electronico true) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?nombre) (cuenta banco-estado) (monto ?total) (glosa (str-cat " nota-credito " ?material))))
   (assert (abono (tipo-de-documento 56) (electronico true) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?nombre) (cuenta notas-de-credito) (monto ?neto) (glosa (str-cat " nota-credito " ?material))))
   (assert (abono (tipo-de-documento 56) (electronico true) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?nombre) (cuenta iva-debito) (monto ?iva) (glosa (str-cat " nota-credito " ?material))))
   (assert (ccm (folio ?folio) (partida ?numero) (tipo-documento 56) (monto-total ?total) (razon-social-contraparte ?colaborador) (rut-contraparte ?rut) (monto-neto ?neto)))
   (printout t "-->nc Nota de Crédito SII" ?folio-nota " de la Factura SII " ?folio " de " ?material " por un valor de $" ?total crlf))

(defrule ACTIVIDAD::dar-nota-de-debito-manual
   (revision (partida ?numero) (rechazado false))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (actual (mes ?mes))
   (ticket (numero ?numero))
   (empresa (nombre ?nombre))
   (nota-de-debito-manual (archivo ?archivo) (rut ?rut) (subcuenta ?subcuenta) (neto ?neto) (iva ?iva) (total ?total) (folio-debito ?folio-debito) (folio-credito ?folio-credito) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano))
   (test (and (not (eq nil ?total)) (> ?total 0)))
   (test (and (not (eq nil ?neto)) (> ?neto 0)))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (assert (partida (archivo ?archivo) (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion (str-cat "Nota de Débito Manual: " ?folio-debito " que anula a Nota de Crédito SII " ?folio-credito)) (actividad dar-nota-de-debito-manual)))
   (assert (cargo (tipo-de-documento 56) (electronico true) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?nombre) (cuenta banco-estado) (monto ?total) (glosa (str-cat " nota-debito " ?folio-debito))))
   (assert (abono (tipo-de-documento 56) (electronico true) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?nombre) (cuenta iva-debito) (monto ?iva) (glosa nota-debito)))
   (assert (abono (tipo-de-documento 56) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?nombre) (cuenta ?subcuenta) (monto ?neto) (glosa (str-cat " nota-debito " ?folio-debito))))
   (assert (ccm (folio ?folio-debito) (partida ?numero) (tipo-documento 56) (monto-total ?neto) (razon-social-contraparte ?subcuenta) (rut-contraparte ?rut) (monto-neto ?neto))))

(defrule ACTIVIDAD::dar-nota-de-debito-sii
   (revision (partida ?numero) (rechazado false))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (actual (mes ?mes))
   (ticket (numero ?numero))
   (empresa (nombre ?nombre))
   (nota-de-credito-de-subcuenta-existente (rut ?rut) (subcuenta ?subcuenta) (folio-nota ?folio-credito) (total ?total) (neto ?neto) (iva ?iva))
   (nota-de-debito-sii (archivo ?archivo) (folio-debito ?folio-debito) (folio-credito ?folio-credito) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano))
   (test (and (not (eq nil ?total)) (> ?total 0)))
   (test (and (not (eq nil ?neto)) (> ?neto 0)))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (assert (partida (archivo ?archivo) (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion (str-cat "Nota de Débito SII: " ?folio-debito " que anula a Nota de Crédito SII " ?folio-credito)) (actividad dar-nota-de-debito-sii)))
   (assert (cargo (tipo-de-documento 56) (electronico true) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?nombre) (cuenta banco-estado) (monto ?total) (glosa (str-cat " nota-debito " ?folio-debito))))
   (assert (abono (tipo-de-documento 56) (electronico true) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?nombre) (cuenta iva-credito) (monto ?iva) (glosa nota-debito)))
   (assert (abono (tipo-de-documento 56) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?nombre) (cuenta ?subcuenta) (monto ?neto) (glosa (str-cat " nota-debito " ?folio-debito))))
   (assert (ccm (folio ?folio-credito) (partida ?numero) (tipo-documento 56) (monto-total ?neto) (rut-contraparte ?rut) (monto-neto ?neto))))

(defrule ACTIVIDAD::dar-nota-de-credito-sii
   (revision (partida ?numero) (rechazado false))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (actual (mes ?mes))
   (ticket (numero ?numero))
   (empresa (nombre ?nombre))
   ?f1 <- (venta-sii (rut ?rut) (partida ?numero_2) (folio ?folio) (unidades ?unidades) (costo_unitario ?costo_unitario) (dia ?dia_1) (mes ?mes_2) (ano ?ano) (credito ?credito) (colaborador ?colaborador) (material ?material) (total ?total) (neto ?neto) (iva ?iva))
   (nota-de-credito-sii (folio-nota ?folio-nota) (folio ?folio) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (archivo ?archivo))
   (test (neq nil ?material))
   (test (neq nil ?colaborador))
   (test (eq nil ?credito))
   (test (and (not (eq nil ?total)) (> ?total 0)))
   (test (and (not (eq nil ?neto)) (> ?neto 0)))
   (test (and (not (eq nil ?iva)) (> ?iva 0)))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (assert (partida (proveedor ?colaborador) (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion (str-cat "Nota de Crédito SII: " ?folio-nota " que anula Factura SII " ?folio " de " ?material " a " ?colaborador)) (actividad dar-nota-de-credito-sii) (archivo (str-cat "../nota-de-credito-propia-" ?folio ".png"))))
   (assert (abono (tipo-de-documento 61) (electronico true) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?nombre) (cuenta banco-estado) (monto ?total) (glosa (str-cat " nota-credito " ?material))))
   (assert (cargo (tipo-de-documento 61) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?nombre) (cuenta ventas-con-factura-afecta) (monto ?neto) (glosa (str-cat " nota-credito " ?material))))
   (assert (cargo (tipo-de-documento 61) (electronico true) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?nombre) (cuenta iva-debito) (monto ?iva) (glosa (str-cat " nota-credito " ?material))))
   (assert (ccm (folio ?folio) (partida ?numero) (tipo-documento 61) (monto-total ?total) (rut-contraparte ?rut) (monto-iva-recuperable ?iva) (razon-social-contraparte ?colaborador) (monto-neto ?neto)))
   (printout t "-->nc Nota de Crédito SII" ?folio-nota " de la Factura SII " ?folio " de " ?material " por un valor de $" ?total crlf))

(defrule ACTIVIDAD::dar-nota-de-credito-a-venta
   (revision (partida ?numero) (rechazado false))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (actual (mes ?mes))
   (ticket (numero ?numero))
   (empresa (nombre ?nombre))
   ?f1 <- (venta (rut ?rut) (partida ?numero_2) (folio ?folio) (unidades ?unidades) (costo_unitario ?costo_unitario) (dia ?dia_1) (mes ?mes_2) (ano ?ano) (credito ?credito) (colaborador ?colaborador) (material ?material) (total ?total) (neto ?neto) (iva ?iva))
   (nota-de-credito (folio-nota ?folio-nota) (folio ?folio) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano))
   (test (neq nil ?material))
   (test (neq nil ?colaborador))
   (test (eq nil ?credito))
   (test (and (not (eq nil ?total)) (> ?total 0)))
   (test (and (not (eq nil ?neto)) (> ?neto 0)))
   (test (and (not (eq nil ?iva)) (> ?iva 0)))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (assert (cuenta (nombre ?colaborador) (descripcion (str-cat creditos-otorgados-a- ?colaborador)) (tipo acreedora) (grupo pasivo) (circulante true) (padre colaboradores) (origen nominativo)))
   (assert (partida (proveedor ?colaborador) (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion (str-cat "Nota de Crédito : " ?folio-nota " que anula Factura " ?folio " de " ?material " a " ?colaborador)) (actividad dar-nota-de-credito)))
   (assert (abono (tipo-de-documento 61) (electronico true) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?nombre) (cuenta ?colaborador) (monto ?total) (glosa (str-cat " nota-credito " ?material))))
   (assert (cargo (tipo-de-documento 61) (electronico true) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?nombre) (cuenta ventas-con-factura-afecta) (monto ?neto) (glosa (str-cat " nota-credito " ?material))))
   (assert (cargo (tipo-de-documento 61) (electronico true) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?nombre) (cuenta iva-debito) (monto ?iva) (glosa (str-cat " nota-credito " ?material))))
   (assert (ccm (folio ?folio) (partida ?numero) (tipo-documento 61) (monto-total ?total) (rut-contraparte ?rut) (monto-iva-recuperable ?iva) (razon-social-contraparte ?colaborador) (monto-neto ?neto)))
   (printout t "-->nc Nota de Crédito " ?folio-nota " de la Factura " ?folio " de " ?material " por un valor de $" ?total crlf))

(defrule ACTIVIDAD::vender-a-cliente-al-contado
   (revision (partida ?numero) (rechazado false))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (actual (mes ?mes))
   (ticket (numero ?numero))
   (empresa (nombre ?nombre))
   ?f1 <- (venta (rut ?rut) (folio ?folio) (tipo-de-documento ?tipo-de-documento) (partida ?numero) (unidades ?unidades) (costo_unitario ?costo_unitario) (dia ?dia) (mes ?mes) (ano ?ano) (cliente ?cliente) (material ?material) (total ?total) (neto ?neto) (iva ?iva) (credito ?credito))
   (test (not (eq nil ?material)))
   (test (eq nil ?credito))
   (test (and (not (eq nil ?total)) (> ?total 0)))
   (test (and (not (eq nil ?neto)) (> ?neto 0)))
   (test (and (not (eq nil ?iva)) (> ?iva 0)))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (retract ?f1)
   (assert (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion (str-cat "Por venta a contado a " ?cliente)) (actividad vender-a-cliente-al-contado)))
   (assert (abono (tipo-de-documento ?tipo-de-documento) (empresa ?nombre) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (cuenta ventas-con-factura-afecta) (monto ?neto) (glosa (str-cat (str-cat ?material ->>-) ?cliente))))
   (assert (cargo (tipo-de-documento ?tipo-de-documento) (empresa ?nombre) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (cuenta caja) (monto ?total) (glosa (str-cat venta-al-contado-de- ?material -a- ?cliente))))
   (assert (abono (tipo-de-documento ?tipo-de-documento) (empresa ?nombre) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (cuenta iva-debito) (monto ?iva) (glosa (str-cat por-venta-al-contado-de- ?material))))
   (assert (ccm (folio ?folio) (partida ?numero) (tipo-documento ?tipo-de-documento) (monto-total ?total) (rut-contraparte ?rut) (monto-iva-recuperable ?iva) (razon-social-contraparte ?cliente) (monto-neto ?neto)))
   (printout t "****************************************************************************************" crlf)
   (printout t " -->vc Vendiendo a cliente: " ?cliente crlf)
   (printout t "      " ?material " por un valor de $ " ?total crlf)
   (printout t "****************************************************************************************" crlf))

(defrule ACTIVIDAD::vender-al-credito-y-efectivo-exento
   (revision (partida ?numero) (rechazado false))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (actual (mes ?mes))
   (ticket (numero ?numero))
   (empresa (nombre ?nombre))
   ?f1 <- (venta (folio ?folio) (rut ?rut) (tipo-de-documento 34) (partida ?numero) (unidades ?unidades) (costo_unitario ?costo_unitario) (dia ?dia) (mes ?mes) (ano ?ano) (credito ?credito) (cliente ?cliente) (material ?material) (total ?total) (neto ?neto) (iva ?iva) (exento ?exento) (efectivo ?efectivo))
   (test (not (eq nil ?material)))
   (test (and (not (eq nil ?credito)) (> ?credito 0)))
   (test (and (not (eq nil ?total)) (> ?total 0)))
   (test (neq nil ?efectivo))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (bind ?proporcion (/ ?credito ?total))
   (retract ?f1)
   (assert (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion (str-cat "Por venta a " ?cliente)) (actividad vender-al-credito-y-efectivo-exento) (archivo (str-cat "../factura-propia-exenta-" ?folio ".png"))))
   (assert (abono (tipo-de-documento 34) (empresa ?nombre) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (cuenta ventas-con-factura-exenta) (monto ?total) (glosa (str-cat (str-cat ?material ->>-) ?cliente))))
   (assert (cargo (tipo-de-documento 34) (empresa ?nombre) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (cuenta caja) (monto ?efectivo) (glosa (str-cat (str-cat (str-cat venta-fiada-de- ?material) -a-) ?cliente))))
   (assert (cuenta (nombre ?cliente) (tipo-de-documento 34) (partida ?numero) (empresa ?nombre) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion ?cliente) (tipo acreedora) (grupo pasivo) (circulante true) (padre cuentas-por-cobrar) (origen real)))
   (assert (cargo (tipo-de-documento 34) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?nombre) (cuenta cuentas-por-cobrar) (monto (round ?credito)) (glosa (str-cat credito-otorgado-a-este-cliente-cuando-la-venta-de- ?material))))
   (assert (ccm (folio ?folio) (partida ?numero) (tipo-documento 34) (rut-contraparte ?rut) (razon-social-contraparte ?cliente) (monto-neto 0) (monto-exento ?exento) (monto-total ?total)))
   (printout t "****************************************************************************************" crlf)
   (printout t crlf "****** -->vexento Vendiendo exento al crédito y efectivo " ?material " por un valor de $" ?credito " de un valor total de " ?total crlf)
   (printout t "****************************************************************************************" crlf))

(defrule ACTIVIDAD::vender-al-credito-y-efectivo-afecto
   (revision (partida ?numero) (rechazado false))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (actual (mes ?mes))
   (ticket (numero ?numero))
   (empresa (nombre ?nombre))
   ?f1 <- (venta (folio ?folio) (rut ?rut) (tipo-de-documento ?tipo-de-documento) (partida ?numero) (unidades ?unidades) (costo_unitario ?costo_unitario) (dia ?dia) (mes ?mes) (ano ?ano) (credito ?credito) (cliente ?cliente) (material ?material) (total ?total) (neto ?neto) (iva ?iva) (efectivo ?efectivo) (archivo ?archivo) (glosa ?glosa))
   (test (not (eq nil ?material)))
   (test (and (not (eq nil ?credito)) (> ?credito 0)))
   (test (and (not (eq nil ?total)) (> ?total 0)))
   (test (neq nil ?efectivo))
   (test (and (not (eq nil ?iva)) (> ?iva 0)))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (bind ?proporcion (/ ?credito ?total))
   (retract ?f1)
   (assert (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion ?glosa) (actividad vender-al-credito-y-efectivo-afecto) (archivo ?archivo)))
   (assert (abono (tipo-de-documento ?tipo-de-documento) (empresa ?nombre) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (cuenta ventas-con-factura-afecta) (monto ?neto) (glosa (str-cat (str-cat ?material ->>-) ?cliente))))
   (assert (cargo (tipo-de-documento ?tipo-de-documento) (empresa ?nombre) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (cuenta caja) (monto ?efectivo) (glosa (str-cat (str-cat (str-cat venta-fiada-de- ?material) -a-) ?cliente))))
   (assert (abono (tipo-de-documento ?tipo-de-documento) (empresa ?nombre) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (cuenta iva-debito) (monto ?iva) (glosa (str-cat por-venta-fiada-de- ?material))))
   (assert (cuenta (nombre ?cliente) (tipo-de-documento ?tipo-de-documento) (partida ?numero) (empresa ?nombre) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion ?cliente) (tipo deudor) (grupo activo) (circulante true) (padre cuentas-por-cobrar) (origen real)))
   (assert (cargo (tipo-de-documento ?tipo-de-documento) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?nombre) (cuenta ?cliente) (monto (round ?credito)) (glosa (str-cat credito-otorgado-a-este-cliente-cuando-la-venta-de- ?material))))
   (assert (inventario (partida ?numero) (operacion venta) (mes ?mes) (ano ?ano) (dia ?dia) (material ?material) (ct (* ?unidades ?costo_unitario)) (u ?unidades) (cu ?costo_unitario))
           (glosa (str-cat por-compra-al-credito-de- ?material)))
   (assert (ccm (folio ?folio) (partida ?numero) (tipo-documento ?tipo-de-documento) (monto-total ?total) (monto-iva-recuperable ?iva) (rut-contraparte ?rut) (razon-social-contraparte ?cliente) (monto-neto ?neto)))
   (printout t "****************************************************************************************" crlf)
   (printout t crlf "****** -->v Vendiendo al crédito y efectivo " ?material " por un valor de $" ?credito " de un valor total de " ?total crlf)
   (printout t "****************************************************************************************" crlf))

(defrule ACTIVIDAD::vender-al-credito
   (revision (partida ?numero) (rechazado false))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (actual (mes ?mes))
   (ticket (numero ?numero))
   (empresa (nombre ?nombre))
   ?f1 <- (venta (folio ?folio) (rut ?rut) (tipo-de-documento ?tipo-de-documento) (partida ?numero) (unidades ?unidades) (costo_unitario ?costo_unitario) (dia ?dia) (mes ?mes) (ano ?ano) (credito ?credito) (cliente ?cliente) (material ?material) (total ?total) (neto ?neto) (iva ?iva) (efectivo ?efectivo))
   (test (not (eq nil ?material)))
   (test (and (not (eq nil ?credito)) (> ?credito 0)))
   (test (and (not (eq nil ?total)) (> ?total 0)))
   (test (eq nil ?efectivo))
   (test (and (not (eq nil ?iva)) (> ?iva 0)))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (bind ?proporcion (/ ?credito ?total))
   (retract ?f1)
   (assert (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion (str-cat "Por venta a " ?cliente)) (actividad vender-al-credito)))
   (assert (abono (tipo-de-documento ?tipo-de-documento) (empresa ?nombre) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (cuenta ventas-con-factura-afecta) (monto ?neto) (glosa (str-cat (str-cat ?material ->>-) ?cliente))))
   (assert (cargo (tipo-de-documento ?tipo-de-documento) (empresa ?nombre) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (cuenta caja) (monto ?efectivo) (glosa (str-cat (str-cat (str-cat venta-fiada-de- ?material) -a-) ?cliente))))
   (assert (abono (tipo-de-documento ?tipo-de-documento) (empresa ?nombre) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (cuenta iva-debito) (monto ?iva) (glosa (str-cat por-venta-fiada-de- ?material))))
   (assert (cuenta (nombre ?cliente) (partida ?numero) (empresa ?nombre) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion ?cliente) (tipo acreedora) (grupo pasivo) (circulante true) (padre clientes) (origen nominativo)))
   (assert (cargo (tipo-de-documento ?tipo-de-documento) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?nombre) (cuenta ?cliente) (monto (round ?credito)) (glosa (str-cat credito-otorgado-a-este-cliente-cuando-la-venta-de- ?material))))
   (assert (inventario (partida ?numero) (operacion venta) (mes ?mes) (ano ?ano) (dia ?dia) (material ?material) (ct (* ?unidades ?costo_unitario)) (u ?unidades) (cu ?costo_unitario))
           (glosa (str-cat por-compra-al-credito-de- ?material)))
   (assert (ccm (folio ?folio) (partida ?numero) (tipo-documento ?tipo-de-documento) (monto-total ?total) (rut-contraparte ?rut) (razon-social-contraparte ?cliente) (monto-neto ?neto)))
   (printout t "****************************************************************************************" crlf)
   (printout t crlf "****** -->v Vendiendo al crédito " ?material " por un valor de $" ?credito " de un valor total de " ?total crlf)
   (printout t "****************************************************************************************" crlf))

(defrule ACTIVIDAD::gastar-al-comprar
   (revision (partida ?numero) (rechazado false))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (actual (mes ?mes))
   (ticket (numero ?numero))
   (empresa (nombre ?nombre))
   ?f1 <- (gasto-sobre-compras (folio ?folio) (rut ?rut) (tipo-de-documento ?tipo-de-documento) (unidades ?unidades) (costo_unitario ?costo-unitario) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (proveedor ?proveedor) (servicio ?servicio) (neto ?neto) (total ?total) (iva ?iva) (glosa ?glosa) (material ?material))
   (test (> ?iva 0))
   (test (> ?neto 0))
   (test (> ?total 0))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (retract ?f1)
   (assert (partida (proveedor ?proveedor) (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion ?glosa) (actividad gastar-al-comprar)))
   (assert (abono (tipo-de-documento ?tipo-de-documento) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?nombre) (cuenta caja) (monto ?total) (glosa (str-cat (str-cat (str-cat a- ?proveedor) -por-pago-en-efectivo-de-) ?servicio))))
   (assert (cargo (tipo-de-documento ?tipo-de-documento) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?nombre) (cuenta gastos-sobre-compras) (monto ?neto) (glosa (str-cat (str-cat (str-cat pago-a- ?proveedor) -por-perdida-de-gastos-en-) ?servicio))))
   (assert (cargo (tipo-de-documento ?tipo-de-documento) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?nombre) (cuenta iva-credito) (monto ?iva) (glosa (str-cat credito-fiscal-por-compra-afecta- ?servicio))))
   (assert (inventario (partida ?numero) (operacion gasto-sobre-compra) (u ?unidades) (cu ?costo-unitario) (mes ?mes) (dia ?dia) (ano ?ano) (ct (round (* ?unidades ?costo-unitario))) (material ?material)))
   (assert (ccm (folio ?folio) (partida ?numero) (tipo-documento ?tipo-de-documento) (monto-total ?total) (rut-contraparte ?rut) (monto-iva-recuperable ?iva) (razon-social-contraparte ?proveedor) (monto-neto ?neto)))
   (printout t "-->p Pagando un gasto sobre compras de $" ?total " a" ?proveedor crlf))

(defrule ACTIVIDAD::despagar-con-cheque
   (revision (partida ?numero) (rechazado false))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (actual (mes ?mes))
   (ticket (numero ?numero))
   (empresa (nombre ?nombre))
   ?f1 <- (despago (folio ?folio) (rut ?rut) (partida ?numero) (dia ?dia) (proveedor ?proveedor) (servicio ?servicio) (neto ?neto) (total ?total) (iva ?iva) (mes ?mes) (ano ?ano) (glosa ?glosa))
   (test (neq nil ?proveedor))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (retract ?f1)
   (assert (partida (proveedor ?proveedor) (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion ?glosa) (actividad despagar-con-cheque)))
   (assert (abono (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?nombre) (cuenta banco-estado) (monto ?total) (glosa (str-cat (str-cat (str-cat proveedor- ?proveedor) -por-servicio-afecto-de-) ?servicio))))
   (assert (cuenta (nombre ?proveedor) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion ?proveedor) (tipo acreedora) (grupo pasivo) (circulante true) (padre proveedores) (origen nominativo)))
   (assert (cargo (partida ?numero) (mes ?mes) (dia ?dia) (ano ?ano) (empresa ?nombre) (cuenta ?proveedor) (monto (round ?total)) (glosa (str-cat gastos-de-una-compra-pagados-a- ?servicio))))
   (assert (ccm (folio ?folio) (partida ?numero) (tipo-documento despago) (monto-total ?total) (rut-contraparte ?rut) (monto-iva-recuperable ?iva) (razon-social-contraparte ?proveedor) (monto-neto ?neto)))
   (printout t "despago- Pagando cheque debido a proveedor " ?proveedor " por un valor total de $" ?total crlf))

(defrule ACTIVIDAD::pagar-neto-mas-iva-a-proveedor
   (revision (partida ?numero) (rechazado false))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (actual (mes ?mes))
   (ticket (numero ?numero))
   (partida (dia ?dia) (numero ?numero))
   (empresa (nombre ?nombre))
   ?f1 <- (pago (folio ?folio) (rut ?rut) (tipo-de-documento ?tipo-de-documento) (partida ?numero) (proveedor ?proveedor) (servicio ?servicio) (neto ?neto) (total ?total) (iva ?iva) (mes ?mes) (ano ?ano) (glosa ?glosa))
   (test (> ?iva 0))
   (test (> ?neto 0))
   (test (> ?total 0))
   (test (neq nil ?proveedor))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (halt)
   (printout t "No revisado" crlf)
   (retract ?f1)
   (assert (partida (proveedor ?proveedor) (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion ?glosa) (actividad pagar-neto-mas-iva-a-proveedor)))
   (assert (cargo (tipo-de-documento ?tipo-de-documento) (partida ?numero) (dia ?dia) (mes ?mes) (empresa ?nombre) (cuenta caja) (monto ?total) (glosa (str-cat (str-cat (str-cat proveedor- ?proveedor) -por-servicio-afecto-de-) ?servicio))))
   (assert (cargo (tipo-de-documento ?tipo-de-documento) (partida ?numero) (dia ?dia) (mes ?mes) (empresa ?nombre) (cuenta compras) (monto ?neto) (glosa (str-cat (str-cat (str-cat proveedor- ?proveedor) -por-servicio-afecto-de-) ?servicio))))
   (assert (cargo (tipo-de-documento ?tipo-de-documento) (partida ?numero) (dia ?dia) (mes ?mes) (empresa ?nombre) (cuenta iva-credito) (monto ?iva) (glosa (str-cat por-servicio-afecto-de- ?servicio))))
   (assert (cuenta (nombre ?proveedor) (partida ?numero) (dia ?dia) (descripcion pagos-realizados-a-proveedor-pinsal) (tipo acreedora) (grupo pasivo) (circulante true) (padre proveedores) (origen nominativo)))
   (assert (abono (tipo-de-documento ?tipo-de-documento) (partida ?numero) (dia ?dia) (empresa ?nombre) (cuenta ?proveedor) (monto (round ?total)) (glosa (str-cat gastos-de-una-compra-pagados-a- ?servicio))))
   (assert (ccm (folio ?folio) (partida ?numero) (tipo-documento ?tipo-de-documento) (monto-total ?total) (rut-contraparte ?rut) (monto-iva-recuperable ?iva) (razon-social-contraparte ?proveedor) (monto-neto ?neto)))
   (printout t "-->p Pagando a proveedor " ?proveedor " por un valor total de $" ?total crlf))

(defrule ACTIVIDAD::pagar-retenciones-de-honorarios
   (revision (partida ?numero) (rechazado false))
   (actual (mes ?mes))
   (ticket (numero ?numero))
   (empresa (nombre ?empresa))
   ?p <- (pago-de-retenciones-de-honorarios (folio ?folio) (rut ?rut) (mes ?mes) (ano ?ano) (partida ?numero) (pagado false) (monto ?retenciones))
   =>
   (bind ?dia 31)
   (modify ?p (pagado true))
   (assert (partida (empresa ?empresa) (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion (str-cat "Por pago de retenciones de honorarios " ?mes)) (actividad pagar-retenciones-de-honorarios)))
   (assert (cargo (tipo-de-documento pago-de-retenciones-de-honorarios) (cuenta retenciones-por-pagar) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (monto ?retenciones) (glosa (str-cat por-pago-de-retenciones-de-honorarios ?retenciones))))
   (assert (abono (tipo-de-documento pago-de-retenciones-de-honorarios) (cuenta banco-estado) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (monto ?retenciones) (glosa (str-cat por-pago-de-retenciones-de-honorarios ?retenciones))))
   (assert (ccm (folio ?folio) (partida ?numero) (tipo-documento pagar-retenciones-honorarios) (monto-total ?retenciones) (rut-contraparte ?rut)))
   (printout t "-->rh-pago " tab ?retenciones tab ?mes crlf))

(defrule ACTIVIDAD::depreciar-herramienta
   (revision (partida ?numero) (rechazado false))
   (actual (mes ?mes))
   (ticket (numero ?numero))
   (empresa (nombre ?empresa))
   ?p <- (depreciacion (herramienta ?herramienta) (mes ?mes) (ano ?ano) (partida ?numero) (pagado false) (monto ?monto))
   =>
   (bind ?dia 31)
   (modify ?p (pagado true))
   (assert (partida (empresa ?empresa) (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion (str-cat "Por depreciacion en " ?mes " de " ?herramienta)) (actividad depreciacion-herramienta)))
   (assert (cargo (tipo-de-documento depreciacion) (cuenta depreciacion) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (monto ?monto) (glosa (str-cat por-depreciacion-de-herramienta- ?herramienta))))
   (assert (abono (tipo-de-documento depreciacion-de-herramienta) (cuenta depreciacion-acumulada-herramientas) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (monto ?monto) (glosa (str-cat por-reconocimiento-de-depreciacion-de- ?herramienta))))
   (assert (ccm (folio na) (partida ?numero) (tipo-documento depreciacion-herramienta) (monto-total ?monto)))
   (printout t "-->dep-activo-fijo " tab ?monto tab ?mes crlf))

(defrule ACTIVIDAD::amortizar-intangible
   (revision (partida ?numero) (rechazado false))
   (actual (mes ?mes))
   (ticket (numero ?numero))
   (empresa (nombre ?empresa))
   ?p <- (amortizacion (intangible ?intangible) (mes ?mes) (ano ?ano) (partida ?numero) (pagado false) (monto ?monto))
   =>
   (bind ?dia 31)
   (modify ?p (pagado true))
   (assert (partida (empresa ?empresa) (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion (str-cat "Por amortizacion en " ?mes " de " ?intangible)) (actividad amortizacion)))
   (assert (cargo (tipo-de-documento amortizacion) (cuenta amortizacion-intangibles) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (monto ?monto) (glosa (str-cat por-amortizacion-de-intangible- ?intangible))))
   (assert (abono (tipo-de-documento amortizacion-de-intangible) (cuenta amortizacion-acumulada-intangibles) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (monto ?monto) (glosa (str-cat por-pago-de-amortizacion-de- ?intangible))))
   (assert (ccm (folio na) (partida ?numero) (tipo-documento amortizacion-intangible) (monto-total ?monto)))
   (printout t "-->am-intangible " tab ?monto tab ?mes crlf))

(defrule ACTIVIDAD::amortizar-instantanea-de-intangible
   (revision (partida ?numero) (rechazado false))
   (actual (mes ?mes))
   (ticket (numero ?numero))
   (empresa (nombre ?empresa))
   ?p <- (amortizacion-instantanea-extracontable (intangible ?intangible) (mes ?mes) (ano ?ano) (partida ?numero) (pagado false) (monto ?monto))
   =>
   (bind ?dia 31)
   (modify ?p (pagado true))
   (assert (partida (empresa ?empresa) (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion (str-cat "Por amortizacion en " ?mes " de " ?intangible)) (actividad amortizacion)))
   (assert (cargo (tipo-de-documento amortizacion) (cuenta amortizacion-instantanea-de-intangibles) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (monto ?monto) (glosa (str-cat por-amortizacion-instantanea-de-intangible- ?intangible))))
   (assert (abono (tipo-de-documento amortizacion) (cuenta amortizacion-acumulada-instantanea) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (monto ?monto) (glosa (str-cat por-amortizacion-instantanea-de-intangible- ?intangible))))
   (assert (ccm (folio na) (partida ?numero) (tipo-documento amortizacion-instantanea-extracontable) (monto-total ?monto)))
   (printout t "-->ai-intangible " tab ?monto tab ?mes crlf))

(defrule ACTIVIDAD::pagar-ppv
   (revision (partida ?numero) (rechazado false))
   (actual (mes ?mes))
   (ticket (numero ?numero))
   (empresa (nombre ?empresa))
   ?p <- (pago-de-ppv (mes ?mes) (ano ?ano) (partida ?numero) (pagado false) (monto ?ppv))
   =>
   (bind ?dia 31)
   (modify ?p (pagado true))
   (assert (partida (empresa ?empresa) (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion (str-cat "Por pago del ppv " ?mes)) (actividad pagar-ppv)))
   (assert (cargo (tipo-de-documento pago-de-ppv) (cuenta ppv) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (monto ?ppv) (glosa (str-cat por-pago-de-ppm ?ppv))))
   (assert (abono (tipo-de-documento pago-de-ppv) (cuenta banco-estado) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (monto ?ppv) (glosa (str-cat por-pago-de-ppm ?ppv))))
   (assert (ccm (folio na) (partida ?numero) (tipo-documento pagar-ppv) (monto-total ?ppv)))
   (printout t "-->ppv-pago " tab ?ppv tab ?mes crlf))

(defrule ACTIVIDAD::constituir-spa
   (revision (partida ?numero) (rechazado false))
   (constitucion-de-spa (mes ?mes) (ano ?ano) (partida ?numero) (capital ?capital) (numero-de-acciones ?numero-de-acciones) (serie ?serie) (nominativa ?nominativa) (valor-nominal ?valor-nominal))
   =>
   (halt))

(defmodule IVA
   (import MAIN deftemplate ?ALL))

(deffunction IVA::mes_to_numero (?p0))

(deffunction IVA::numero_to_mes (?p0))

(deffunction IVA::proximo_mes (?p0))

(deffunction IVA::to_serial_date (?p0 ?p1 ?p2))

(deftemplate IVA::hacer
   (slot cuenta)
   (slot mes))

(deffunction IVA::mes_to_numero
   (?mes)
   (switch ?mes
      (case enero then
         1)
      (case febrero then
         2)
      (case marzo then
         3)
      (case abril then
         4)
      (case mayo then
         5)
      (case junio then
         6)
      (case julio then
         7)
      (case agosto then
         8)
      (case septiembre then
         9)
      (case octubre then
         10)
      (case noviembre then
         11)
      (case diciembre then
         12)))

(deffunction IVA::numero_to_mes
   (?numero)
   (switch ?numero
      (case 1 then
         enero)
      (case 2 then
         febrero)
      (case 3 then
         marzo)
      (case 4 then
         abril)
      (case 5 then
         mayo)
      (case 6 then
         junio)
      (case 7 then
         julio)
      (case 8 then
         agosto)
      (case 9 then
         septiembre)
      (case 10 then
         octubre)
      (case 11 then
         noviembre)
      (case 12 then
         diciembre)
      (case 13 then
         enero)
      (case 14 then
         febrero)))

(deffunction IVA::proximo_mes
   (?mes))

(deffunction IVA::to_serial_date
   (?dia ?mes ?ano)
   (+ (* 10000 ?ano) (* 100 (mes_to_numero ?mes)) ?dia))

(defrule IVA::inicio-kindle-k-iva-rules
   (declare (salience 10000))
   (empresa (nombre ?empresa))
   =>
   (bind ?archivo (str-cat "./doc/" ?empresa "/iva.markdown"))
   (open ?archivo k "w")
   (printout k "--- " crlf)
   (printout k "layout: page" crlf)
   (printout k "--- " crlf)
   (printout k "" crlf))

(defrule IVA::fin-kindle-k
   (declare (salience -10000))
   =>
   (close k))

(defrule IVA::inicio-de-modulo-IVA
   (declare (salience 10000))
   =>
   (printout t "--módulo----------------------- IVA ----------------------" crlf)
   (set-strategy lex))

(defrule IVA::genera-resumenes
   (declare (salience -1000))
   =>
   (printout t "--módulo----resumen------------ IVA ----------------------" crlf)
   (printout t "NOTA: El IVA-DEBITO no se acumula de un mes al siguiente." crlf)
   (printout t "El haber del iva-debito se compensa con el saldo del iva-credito" crlf)
   (printout t "y si sobra algo, se paga por medio del f29." crlf)
   (printout t "El IVA-CREDITO se acumula de un mes al siguiente" crlf)
   (printout t "y al compensarse con el haber del IVA-DEBITO, disminiurá." crlf)
   (printout t "Cada mes puede aumentar si hubo compras." crlf)
   (printout t crlf)
   (assert (acarreo-de-iva (valor 0)))
   (assert (resumen)))

(defrule IVA::fin-modulo-IVA
   (declare (salience -10000))
   =>
   (printout t "--módulo----fin ------------ IVA ----------------------" crlf)
   (unwatch rules))

(defrule IVA::partida-sin-revisar
   ?iva <- (ajuste-de-iva (partida ?partida) (mes ?mes) (ano ?ano) (hecho true))
   (not (exists
             (revision (partida ?partida) (revisado true))))
   =>
   (printout t "============== W A R N I N G =========================" crlf)
   (printout t "Partida sin Revisar: " ?partida crlf)
   (printout t "Edite el archivo de revisiones y agregue una revisión para la partida " ?partida crlf)
   (printout t crlf)
   (printout t "======================================================" crlf)
   (halt))

(defrule IVA::agregar-partida-de-ppm
   ?iva <- (ajuste-de-iva (partida ?partida) (mes ?mes) (ano ?ano) (hecho true))
   =>
   (assert (pago-de-ppm (partida ?partida) (mes ?mes) (ano ?ano))))

(defrule IVA::solo-debito
   (resumen)
   ?iva <- (ajuste-de-iva (partida ?partida) (mes ?mes) (ano ?ano) (hecho false))
   (mensuales (mes ?mes) (cuenta iva-credito) (haber ?haber-c) (debe ?debe-c))
   (not (exists
             (mensuales (mes ?mes) (cuenta iva-debito) (haber ?haber-d) (debe ?debe-d))))
   =>
   (modify ?iva (hecho true))
   (printout t "Resumen: " ?mes crlf)
   (printout t "Solo hay debito" crlf))

(defrule IVA::solo-credito
   (resumen)
   ?iva <- (ajuste-de-iva (partida ?partida) (mes ?mes) (ano ?ano) (hecho false))
   (not (exists
             (mensuales (mes ?mes) (cuenta iva-credito) (haber ?haber-c) (debe ?debe-c))))
   (mensuales (mes ?mes) (cuenta iva-debito) (haber ?haber-d) (debe ?debe-d))
   =>
   (modify ?iva (hecho true))
   (printout t "Resumen: " ?mes crlf)
   (printout t "Solo hay credito" crlf)
   (halt))

(defrule IVA::resumen-mensual
   (actual (mes ?mes))
   (ticket (numero ?partida))
   (resumen)
   ?iva <- (ajuste-de-iva (partida ?partida) (mes ?mes) (ano ?ano) (hecho false))
   ?iva-credito <- (mensuales (mes ?mes) (cuenta iva-credito) (haber ?haber-c) (debe ?debe-c))
   ?iva-debito <- (mensuales (mes ?mes) (cuenta iva-debito) (haber ?haber-d) (debe ?debe-d))
   ?acarreo <- (acarreo-de-iva (valor ?remanente))
   (balance (mes ?mes_top) (ano ?ano_top))
   (tasas (utm ?utm) (mes ?mes) (ano ?ano))
   (test (>= (to_serial_date 31 ?mes_top ?ano_top) (to_serial_date 1 ?mes ?ano)))
   =>
   (printout t crlf crlf)
   (printout t "====================================================" crlf)
   (printout t "Resumen: " ?mes tab "Partida " ?partida crlf)
   (printout t "====================================================" crlf)
   (printout t "cuenta IVA-DEBITO" tab "DEBE" tab "HABER" crlf)
   (printout t tab tab tab ?debe-d tab ?haber-d crlf)
   (bind ?saldo-iva-debito (- ?haber-d ?debe-d))
   (printout t "---------------------------------------" crlf)
   (printout t tab tab tab tab ?saldo-iva-debito crlf)
   (printout t crlf)
   (printout t crlf)
   (printout t "Ajustando el crédito de iva para " tab ?mes crlf)
   (printout t "Debe Anterior--- + " ?debe-c crlf)
   (printout t "Remanente    --- + " ?remanente crlf)
   (bind ?debe-actual-c (+ ?debe-c ?remanente))
   (printout t "          ----------------" crlf)
   (printout t "Debe Actual--- - = " ?debe-actual-c crlf)
   (printout t crlf)
   (printout t "cuenta IVA-CREDITO" tab "DEBE" tab "HABER" crlf)
   (printout t tab tab tab ?debe-actual-c tab ?haber-c crlf)
   (bind ?saldo-iva-credito (- (+ ?debe-c ?remanente) ?haber-c))
   (printout t "---------------------------------------" crlf)
   (printout t tab tab tab ?saldo-iva-credito crlf)
   (printout t crlf)
   (printout k "<table> <tbody>" crlf)
   (printout k "<tr> <td colspan='6' style = 'font-style: small; background-color: azure'>" ?mes "</td></tr>" crlf)
   (printout k "<tr> <td colspan='2' style='background-color: lightyellow'> IVA CREDITO </td> <td colspan='2' style='background-color: beige'> IVA DEBITO </td> </tr> " crlf)
   (printout k "<tr> <td> DEBE </td> <td> HABER </td> <td> DEBE </td><td> HABER </td> </tr> " crlf)
   (printout k "<tr> <td>" ?debe-actual-c "</td> <td> " ?haber-c "</td> <td> " ?debe-d "</td><td> " ?haber-d "</td> </tr>" crlf)
   (printout k "<tr> <td>" ?saldo-iva-credito "</td> <td></td><td></td><td>" ?saldo-iva-debito "</td> </tr>" crlf)
   (bind ?credito (+ (- ?debe-c ?haber-c) ?remanente))
   (bind ?debito (- ?haber-d ?debe-d))
   (if (> ?credito ?debito)
      then
      (printout t "Como el saldo acreedor IVA-DEBITO es MENOR que el saldo deudor IVA-CREDITO " crlf)
      (printout t "Se restará del saldo IVA-CREDITO el haber IVA-DEBITO " crlf)
      (printout t "Ello es: -------" tab ?saldo-iva-credito tab "-" tab ?debito crlf)
      (bind ?remanente (- ?saldo-iva-credito ?debito))
      (printout t "De ello resulta un remanente de: " tab ?remanente crlf)
      (printout t "Este remanente se usará el mes siguiente: y se debe reajustar con la" crlf)
      (printout t "inflación" crlf)
      (printout t crlf)
      (printout t "Ajustando todo el haber del IVA-DEBITO contra el saldo del IVA-CREDITO por: " ?debito crlf)
      (modify ?iva (hecho true) (haber ?debito))
      (modify ?acarreo (valor ?remanente) (ajustado false))
      (assert (remanente-de-iva (partida ?partida) (valor ?remanente) (mes ?mes) (ano ?ano) (utm ?utm)))
      (assert (ajuste-de-iva-contra-credito (partida ?partida) (monto ?debito) (mes ?mes) (ano ?ano)))
      (printout k "<tr> <td style='font-weight: bold; font-size: large; background-color: azure'>" ?remanente "</td> <td></td> <td> </td><td> </td> </tr>" crlf)
      (printout k "</tbody> </table>" crlf))
   (if (> ?debito ?credito)
      then
      (printout t "Como el saldo acreedor IVA-DEBITO es MAYOR que el saldo deudor IVA-CREDITO " crlf)
      (printout t "Se usará todo el saldo IVA-CREDITO para hacer disminuir el saldo acreedor IVA-DEBITO " crlf)
      (bind ?compensacion (- ?saldo-iva-debito ?saldo-iva-credito))
      (printout t "Ello es: " tab ?saldo-iva-debito tab "-" tab ?saldo-iva-credito " = " ?compensacion crlf)
      (printout t "De ello resulta que el remanente de crédito IVA habrá sido eliminado." crlf)
      (printout t "pero, en cambio,  habrá que pagar el iva-debito en exceso de:" crlf)
      (printout t ?compensacion crlf)
      (printout t "Ajustando iva contra debito por: " tab ?compensacion crlf)
      (modify ?iva (hecho true) (debe ?credito))
      (modify ?acarreo (valor 0) (ajustado false))
      (assert (remanente-de-iva (partida ?partida) (valor 0) (mes ?mes) (ano ?ano) (utm ?utm)))
      (assert (ajuste-de-iva-contra-debito (partida ?partida) (monto ?compensacion) (mes ?mes) (ano ?ano)))
      (printout k "<tr> <td></td> <td></td> <td> </td><td style='font-size: large; font-weight: bold; color: white; background-color: crimson'>" ?compensacion "</td> </tr>" crlf)
      (printout k "</tbody> </table>" crlf)))

(defrule IVA::emitir-partida-de-ajuste-de-remanente
   (empresa (nombre ?empresa))
   (or  (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (actividad ajustar-iva-contra-credito))
        (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (actividad ajustar-iva-contra-debito)))
   ?remanente <- (remanente-de-iva (emitido false) (determinado true) (ajustado true) (valor ?antes) (valor-ajustado ?calculado) (mes ?mes-que-declara) (mes-de-ajuste ?mes-de-pago) (ano ?ano-que-declara) (ano-de-ajuste ?ano-de-pago) (utm ?utm))
   (acarreo-de-iva (valor ?acarreo))
   (test (eq ?mes (numero_to_mes (- (mes_to_numero ?mes-de-pago) 1))))
   (f29 (partida ?partida-f29) (mes ?mes) (ano ?ano))
   =>
   (bind ?zero77 0)
   (modify ?remanente (emitido true))
   (if (> ?calculado ?antes)
      then
      (bind ?ajuste (round (- ?calculado ?antes)))
      (assert (cargo (tipo-de-documento remanente-iva) (cuenta iva-credito) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano-de-pago) (empresa ?empresa) (monto ?ajuste) (glosa (str-cat por-remanente-de-iva- ?mes-de-pago ?ajuste))))
      (assert (abono (tipo-de-documento remanente-iva) (cuenta ganancia-por-correccion-monetaria) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano-de-pago) (empresa ?empresa) (monto ?ajuste) (glosa (str-cat por-remanente-de-iva- ?mes-de-pago ?ajuste))))
      (printout t "-->ari Ajustar a Ingresos Remanente de IVA " ?mes tab ?ajuste crlf)
      (printout k "<table> <tbody> " crlf)
      (printout k "<tr> <td >-->ari Ajustar a Ingresos Remanente de IVA </td><td> " ?mes "-" ?ano-de-pago "</td> <td style='font-weight: bold; font-size: large; background-color: azure'> (+) " ?ajuste "</td> </tr>" crlf)
      (printout k "<tr> <td style='font-weight: bold; font-size: large; background-color: ivory'>" ?antes "</td> <td> (+) " ?ajuste " </td><td style='font-weight: bold; font-size: large; background-color: gold'  > (=) " ?calculado "</td> <td> f29 504 </td><td> Remanente de crédito fiscal del mes anterior</td> </tr>" crlf)
      (bind ?zero77 (+ ?acarreo ?ajuste))
      (printout k "<tr> <td style='font-weight: bold; font-size: large; background-color: ivory'>" ?acarreo "</td> <td> (+) " ?ajuste " </td><td style='font-weight: bold; font-size: large; background-color: greenyellow' > (=) " ?zero77 "</td> <td> f29 077 </td><td>Remanente del crédito fiscal para el mes siguiente</td></tr>" crlf))
   (if (< ?calculado ?antes)
      then
      (bind ?ajuste (round (- ?antes ?calculado)))
      (assert (abono (tipo-de-documento remanente-iva) (cuenta iva-credito) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (monto ?ajuste) (glosa (str-cat por-remanente-de-iva- ?mes-de-pago ?ajuste))))
      (assert (cargo (tipo-de-documento remanente-iva) (cuenta perdida-por-correccion-monetaria) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (monto ?ajuste) (glosa (str-cat por-remanente-de-iva- ?mes-de-pago ?ajuste))))
      (printout t "-->ari Ajustar a Gastos Remanente de IVA " ?mes tab ?ajuste crlf)
      (printout k "<table> <tbody> " crlf)
      (printout k "<tr> <td>-->ari Ajustar a Gastos Remanente de IVA </td><td> " ?mes "</td> <td style='font-weight: bold; font-size: large; background-color: lightpink' > (-)" ?ajuste "</td> </tr>" crlf)
      (printout k "<tr> <td style='font-weight: bold; font-size: large; background-color: azure'>" ?antes "</td> <td> (-) " ?ajuste " </td><td style='font-weight: bold; font-size: large; background-color: gold'  > (=) " ?calculado "</td> <td> f29 504 </td><td> Remanente de crédito fiscal del mes anterior</td> </tr>" crlf)
      (bind ?zero77 (- ?acarreo ?ajuste))
      (printout k "<tr> <td style='font-weight: bold; font-size: large; background-color: azure'>" ?acarreo "</td> <td> (-) " ?ajuste " </td><td style='font-weight: bold; font-size: large; background-color: greenyellow' > (=) " ?zero77 "</td> <td> f29 077 </td><td>Remanente del crédito fiscal para el mes siguiente</td></tr>" crlf))
   (if (= ?calculado ?antes)
      then
      (bind ?ajuste 0)
      (bind ?dia 31)
      (bind ?zero77 (+ ?acarreo ?ajuste))
      (printout t "-->ari No es necesario Ajustar Remanente de IVA " ?mes tab ?ajuste crlf)
      (printout k "<table> <tbody> " crlf)
      (printout k "<tr> <td>-->ari No es necesario Ajustar Remanente de IVA </td><td> " ?mes "</td> <td>" ?ajuste "</td> </tr>" crlf)
      (printout k "<tr> <td style='font-weight: bold; font-size: large; background-color: azure'>" ?antes "</td> <td> (+) " ?ajuste " </td><td style='font-weight: bold; font-size: large; background-color: lightyellow'  > (=) " ?calculado "</td> <td> f29 504 </td><td> Remanente de crédito fiscal del mes anterior</td> </tr>" crlf)
      (printout k "<tr> <td style='font-weight: bold; font-size: large; background-color: azure'>" ?acarreo "</td> <td> (+) " ?ajuste " </td><td style='font-weight: bold; font-size: large; background-color: lightyellow' > (=) " ?zero77 "</td> <td> f29 077 </td><td>Remanente del crédito fiscal para el mes siguiente</td></tr>" crlf))
   (assert (formulario-f29 (partida ?partida-f29) (codigo "077") (descripcion "REMANENTE DE CREDITO FISC. ") (valor ?zero77) (mes ?mes) (ano ?ano)))
   (assert (formulario-f29 (partida ?partida-f29) (codigo "504") (descripcion "REMANENTE CREDITO FISCAL MES ANTERIOR. ") (valor ?calculado) (mes ?mes) (ano ?ano)))
   (assert (ccm (folio na) (partida ?numero) (tipo-documento ajuste-remanente-iva) (monto-total ?ajuste)))
   (printout t "-------------------------------------------------------" crlf))

(defrule IVA::warning-falta-dato-de-tasa
   ?remanente <- (remanente-de-iva (determinado true) (ajustado false) (emitido false) (mes-de-ajuste ?mes-de-ajuste) (ano-de-ajuste ?ano-de-ajuste))
   (not (tasas (utm ?utm-de-ajuste) (ano ?ano-de-ajuste) (mes ?mes-de-ajuste)))
   =>
   (printout t "Falta la tasa utm del mes: " tab ?mes-de-ajuste crlf)
   (printout t "Busque el dato en sii y luego agréguelo al archivo de tasas." crlf)
   (halt))

(defrule IVA::efectuar-reajuste-de-remanente-de-iva
   ?remanente <- (remanente-de-iva (determinado true) (ajustado false) (emitido false) (valor ?antes) (mes ?mes) (mes-de-ajuste ?mes-de-ajuste) (ano ?ano) (ano-de-ajuste ?ano-de-ajuste) (utm ?utm))
   (tasas (utm ?utm-de-ajuste) (ano ?ano-de-ajuste) (mes ?mes-de-ajuste))
   ?acarreo <- (acarreo-de-iva (valor ?valor-acarreo) (ajustado false))
   (test (neq nil ?mes-de-ajuste))
   (test (neq nil ?ano-de-ajuste))
   =>
   (bind ?antes-en-utm (round (/ (round (/ (* ?antes 100) ?utm)) 100)))
   (printout t antes-en-utm ?antes-en-utm 100 crlf)
   (bind ?calculado (round (* ?antes-en-utm ?utm-de-ajuste)))
   (printout t "El valor ajustado del remanente de iva  es: " ?calculado crlf)
   (printout t "El acarreo es de: " tab ?valor-acarreo crlf)
   (modify ?remanente (ajustado true) (valor-ajustado ?calculado))
   (modify ?acarreo (valor ?calculado) (ajustado true))
   (printout t "El acarreo fue actualizado a: " tab ?calculado crlf))

(defrule IVA::determinar-mes-de-ajuste-de-remanente-de-iva
   ?remanente <- (remanente-de-iva (emitido false) (determinado false) (ajustado false) (valor ?iva) (mes ?mes) (ano ?ano) (utm ?utm))
   =>
   (bind ?proximo-mes (numero_to_mes (+ 2 (mes_to_numero ?mes))))
   (printout t ?proximo-mes crlf)
   (if (or (eq ?proximo-mes enero) (eq ?proximo-mes febrero))
      then
      (bind ?ano (+ ?ano 1)))
   (printout t "En determinar mes de ajuste de remanente de iva " ?proximo-mes tab ?ano crlf)
   (printout k "<tr> <td> Determinando mes de ajuste de remanente de IVA </td><td> " ?proximo-mes "</td> <td>" ?ano "</td> </tr>" crlf)
   (modify ?remanente (determinado true) (mes-de-ajuste ?proximo-mes) (ano-de-ajuste ?ano)))

(defrule IVA::encabezado
   (actual (mes ?mes))
   ?cuenta <- (cuenta (partida ?Numero&nil) (nombre ?nombre) (nombre-sii ?nombre-sii) (descripcion ?descripcion) (origen real))
   (exists
        (cuenta (nombre ?nombre) (partida ?Numero2&~?Numero) (saldo ?saldo)))
   (balance (mes ?mes_top) (ano ?ano_top))
   (test (>= (to_serial_date 31 ?mes_top ?ano_top) (to_serial_date 1 ?mes ?ano_top)))
   =>
   (assert (hacer (cuenta ?nombre) (mes ?mes)))
   (assert (mensuales (mes ?mes) (cuenta ?nombre))))

(defrule IVA::IVA-filas
   (empresa (nombre ?empresa))
   (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano))
   (actual (mes ?mes))
   ?hacer <- (hacer (cuenta ?nombre) (mes ?mes))
   ?cuenta <- (cuenta (recibida ?recibida) (tipo-de-documento ?tipo-de-documento) (activo-fijo ?activo-fijo) (nombre ?nombre) (partida ?partida) (debe ?debe) (haber ?haber) (mes ?mes) (mostrado-en-t false) (ajustado-iva false) (origen real))
   ?mensuales <- (mensuales (mes ?mes) (mostrado false) (totalizado false) (cuenta ?nombre) (debe ?total_debe) (haber ?total_haber))
   (test (and (neq nil ?partida) (> ?partida 0)))
   (balance (mes ?mes_top) (ano ?ano_top))
   (test (>= (to_serial_date 31 ?mes_top ?ano_top) (to_serial_date 1 ?mes ?ano_top)))
   =>
   (modify ?cuenta (ajustado-iva true))
   (modify ?mensuales (debe (+ ?total_debe ?debe)) (haber (+ ?total_haber ?haber)))
   (printout t "IVA-filas: " ?mes tab ?debe tab ?haber tab ?nombre crlf))

(defrule IVA::ajustar-iva-contra-debito
   (declare (salience 10000))
   (actual (mes ?mes))
   (ticket (numero ?numero))
   (empresa (nombre ?empresa))
   ?imposiciones <- (ajuste-de-iva-contra-debito (mes ?mes) (ano ?ano) (partida ?numero) (pagado false) (monto ?monto))
   =>
   (bind ?dia 31)
   (assert (partida (empresa ?empresa) (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion (str-cat "Por ajuste del Credito Fiscal Contra el Debito Fiscal, mes de " ?mes)) (actividad ajustar-iva-contra-debito)))
   (assert (cargo (tipo-de-documento ajuste-iva-debito) (cuenta iva-credito) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (monto ?monto) (glosa (str-cat por-pago-de-iva ?monto))))
   (assert (abono (tipo-de-documento ajuste-iva-debito) (cuenta iva-debito) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (monto ?monto) (glosa (str-cat por-pago-de-iva ?monto))))
   (assert (ccm (folio na) (partida ?numero) (tipo-documento ajustar-iva-contra-debito) (monto-total ?monto)))
   (printout t "-->ami Ajuste Mensual de IVA " ?mes tab ?monto crlf))

(defrule IVA::ajustar-iva-contra-credito
   (declare (salience 10000))
   (actual (mes ?mes))
   (ticket (numero ?numero))
   (empresa (nombre ?empresa))
   ?imposiciones <- (ajuste-de-iva-contra-credito (mes ?mes) (ano ?ano) (partida ?numero) (pagado false) (monto ?monto))
   =>
   (bind ?dia 31)
   (assert (partida (empresa ?empresa) (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion (str-cat "Por ajuste del Debito Fiscal Contra el Credito Fiscal, mes de " ?mes)) (actividad ajustar-iva-contra-credito)))
   (assert (abono (tipo-de-documento ajuste-iva-credito) (cuenta iva-credito) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (monto ?monto) (glosa (str-cat por-pago-de-iva ?monto))))
   (assert (cargo (tipo-de-documento ajuste-iva-credito) (cuenta iva-debito) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (monto ?monto) (glosa (str-cat por-pago-de-iva ?monto))))
   (assert (ccm (folio na) (partida ?numero) (tipo-documento ajustar-iva-contra-credito) (monto-total ?monto)))
   (printout t "-->ami Ajuste Mensual de IVA " ?mes tab ?monto crlf))

(defmodule ECUACION
   (import MAIN deftemplate ?ALL))

(defrule ECUACION::inicio-de-modulo-ecuacion
   (declare (salience 10000))
   (empresa (nombre ?empresa))
   (balance (ano ?ano))
   =>
   (set-strategy breadth)
   (printout t "--------------------- ECUACION ------------------" crlf))

(defrule ECUACION::alerta-cuentas-con-saldo-negativo
   ?f1 <- (cuenta (nombre ?nombre) (saldo ?saldo))
   (test (< ?saldo 0))
   =>
   (retract ?f1)
   (printout t "OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO" crlf)
   (printout t " ALERTA ---> " ?nombre " tiene saldo negativo, puede ser un ERROR  " crlf)
   (printout t "OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO" crlf crlf))

(defrule ECUACION::sumando-activos-circulantes
   (declare (salience 9))
   (empresa (nombre ?empresa))
   (balance (ano ?ano_top))
   ?f1 <- (cuenta (ano ?ano) (empresa ?empresa) (grupo activo) (nombre ?nombre) (saldo ?saldo) (circulante true) (mayoreado false) (balanceado false) (padre false) (origen real))
   ?f2 <- (ecuacion (empresa ?empresa) (ano ?ano) (activo-circulante ?activo-circulante))
   (test (> ?saldo 0))
   (test (> ?ano_top ?ano))
   =>
   (bind ?total (+ ?activo-circulante ?saldo))
   (modify ?f2 (activo-circulante ?total))
   (modify ?f1 (balanceado true))
   (printout t "--+acirculante= " ?total tab ?saldo " de " ?nombre crlf))

(defrule ECUACION::sumando-activos-fijos-a-ecuacion
   (declare (salience 9))
   (empresa (nombre ?empresa))
   (balance (ano ?ano_top))
   ?f1 <- (cuenta (ano ?ano) (empresa ?empresa) (grupo activo) (nombre ?nombre) (saldo ?saldo) (origen real) (circulante false) (balanceado false))
   ?f2 <- (ecuacion (empresa ?empresa) (ano ?ano) (activo-fijo ?activo-fijo))
   (test (> ?saldo 0))
   (test (> ?ano_top ?ano))
   =>
   (bind ?total (+ ?activo-fijo ?saldo))
   (modify ?f2 (activo-fijo ?total))
   (modify ?f1 (balanceado true))
   (printout t "--+a f i j o  = " ?total tab ?saldo " de " ?nombre crlf))

(defrule ECUACION::sumando-pasivos-circulantes-a-ecuacion
   (declare (salience 9))
   (empresa (nombre ?empresa))
   (balance (ano ?ano_top))
   ?f1 <- (cuenta (ano ?ano) (empresa ?empresa) (grupo pasivo) (nombre ?nombre) (saldo ?saldo) (circulante true) (origen real) (balanceado false))
   ?f2 <- (ecuacion (empresa ?empresa) (ano ?ano) (pasivo-circulante ?pasivo-circulante))
   (test (> ?saldo 0))
   (test (> ?ano_top ?ano))
   =>
   (bind ?total (+ ?pasivo-circulante ?saldo))
   (modify ?f2 (pasivo-circulante ?total))
   (modify ?f1 (balanceado true))
   (printout t "--+pcirculante= " ?total tab ?saldo " de " ?nombre crlf))

(defrule ECUACION::sumando-pasivos-fijos-a-ecuacion
   (declare (salience 9))
   (empresa (nombre ?empresa))
   (balance (ano ?ano_top))
   ?f1 <- (cuenta (ano ?ano) (empresa ?empresa) (grupo pasivo) (nombre ?nombre) (saldo ?saldo) (origen real) (verificada false) (circulante false))
   ?f2 <- (ecuacion (empresa ?empresa) (ano ?ano) (pasivo-fijo ?pasivo-fijo))
   (test (> ?saldo 0))
   (test (> ?ano_top ?ano))
   =>
   (bind ?total (+ ?pasivo-fijo ?saldo))
   (modify ?f2 (pasivo-fijo ?total))
   (modify ?f1 (verificada true))
   (printout t "--+p f i j o  = " ?total tab ?saldo " de " ?nombre crlf))

(defrule ECUACION::sumando-activos-a-ecuacion
   (declare (salience 8))
   (empresa (nombre ?empresa))
   (balance (ano ?ano_top))
   ?f1 <- (cuenta (ano ?ano) (empresa ?empresa) (grupo activo) (nombre ?nombre) (saldo ?saldo) (verificada false) (origen real))
   ?f2 <- (ecuacion (empresa ?empresa) (ano ?ano) (activos ?activos))
   (test (> ?saldo 0))
   (test (> ?ano_top ?ano))
   =>
   (bind ?total (+ ?activos ?saldo))
   (modify ?f2 (empresa ?empresa) (activos ?total))
   (modify ?f1 (verificada true))
   (printout t "--+a c t i v o= " ?total tab ?saldo " de " ?nombre crlf))

(defrule ECUACION::sumando-pasivos-a-ecuacion
   (declare (salience 9))
   (empresa (nombre ?empresa))
   (balance (ano ?ano_top))
   ?f1 <- (cuenta (ano ?ano) (empresa ?empresa) (grupo pasivo) (nombre ?nombre) (saldo ?saldo) (verificada false) (origen real))
   ?f2 <- (ecuacion (empresa ?empresa) (ano ?ano) (pasivos ?pasivos))
   (test (> ?saldo 0))
   (test (> ?ano_top ?ano))
   =>
   (bind ?total (+ ?pasivos ?saldo))
   (modify ?f2 (empresa ?empresa) (pasivos ?total))
   (modify ?f1 (verificada true))
   (printout t "--+p a s i v o= " ?total tab ?saldo " de " ?nombre crlf))

(defrule ECUACION::sumando-patrimonio-a-ecuacion
   (declare (salience 9))
   (empresa (nombre ?empresa))
   (balance (ano ?ano_top))
   ?f1 <- (cuenta (empresa ?empresa) (ano ?ano) (nombre ?nombre) (grupo patrimonio) (saldo ?saldo) (verificada false) (origen real))
   ?f2 <- (ecuacion (empresa ?empresa) (ano ?ano) (patrimonio ?patrimonio))
   (test (> ?saldo 0))
   (test (> ?ano_top ?ano))
   =>
   (bind ?total (+ ?patrimonio ?saldo))
   (modify ?f2 (patrimonio ?total))
   (modify ?f1 (verificada true))
   (printout t "--+patrimonio = " ?total tab ?saldo " de " ?nombre crlf))

(defrule ECUACION::sumando-resultados-a-ecuacion
   (declare (salience 9))
   (empresa (nombre ?empresa))
   (balance (ano ?ano_top))
   ?f1 <- (cuenta (empresa ?empresa) (ano ?ano) (nombre ?nombre) (grupo resultados) (saldo ?saldo) (origen real) (verificada false))
   ?f2 <- (ecuacion (empresa ?empresa) (ano ?ano) (resultados ?resultados))
   (test (> ?saldo 0))
   (test (> ?ano_top ?ano))
   =>
   (bind ?total (+ ?resultados ?saldo))
   (modify ?f2 (resultados ?total))
   (modify ?f1 (verificada true))
   (printout t "--+resultados= " ?total tab ?saldo " de " ?nombre crlf))

(defrule ECUACION::activos
   (empresa (nombre ?empresa))
   (balance (ano ?ano_top))
   ?f1 <- (cuenta (empresa ?empresa) (ano ?ano) (tipo ?tipo) (grupo activo) (nombre ?nombre) (debe ?debe) (haber ?haber) (saldo ?saldo) (codigo ?codigo) (verificada true) (origen real) (descripcion ?descripcion))
   (test (> ?ano_top ?ano))
   =>
   (printout t ?tipo tab activos tab tab (round ?debe) tab "|" tab (round ?haber) tab "->s" tab (round ?saldo) tab tab ?nombre crlf))

(defrule ECUACION::pasivos
   (empresa (nombre ?empresa))
   (balance (ano ?ano_top))
   ?f1 <- (cuenta (empresa ?empresa) (ano ?ano) (tipo ?tipo) (grupo pasivo) (nombre ?nombre) (debe ?debe) (haber ?haber) (saldo ?saldo) (codigo ?codigo) (verificada true) (origen real) (descripcion ?descripcion))
   (test (> ?ano_top ?ano))
   =>
   (printout t ?tipo -pasivos tab (round ?debe) tab "|" tab (round ?haber) tab "->s" tab (round ?saldo) tab tab ?nombre tab crlf))

(defrule ECUACION::patrimonio
   (empresa (nombre ?empresa))
   (balance (ano ?ano_top))
   ?f1 <- (cuenta (empresa ?empresa) (ano ?ano) (tipo ?tipo) (grupo patrimonio) (nombre ?nombre) (debe ?debe) (haber ?haber) (saldo ?saldo) (codigo ?codigo) (verificada true) (origen real) (descripcion ?descripcion))
   (test (> ?ano_top ?ano))
   =>
   (printout t ?tipo -patrimonio tab (round ?debe) tab "|" tab ?haber tab "->s" tab ?saldo tab tab ?nombre tab crlf))

(defrule ECUACION::liquidadora
   (empresa (nombre ?empresa))
   (balance (ano ?ano_top))
   ?f1 <- (cuenta (empresa ?empresa) (ano ?ano) (grupo liquidadora) (tipo ?tipo) (nombre ?nombre) (debe ?debe) (haber ?haber) (saldo ?saldo) (codigo ?codigo) (origen real) (descripcion ?descripcion))
   (test (> ?ano_top ?ano))
   =>
   (printout t ?tipo -liquidadora tab (round ?debe) tab "|" tab (round ?haber) tab (round ?saldo) tab "->s" tab ?nombre tab crlf))

(defrule ECUACION::igualdad-del-inventario
   (declare (salience -100))
   (empresa (nombre ?empresa))
   (balance (ano ?ano_top))
   ?f1 <- (ecuacion (empresa ?empresa) (ano ?ano) (activos ?activos) (pasivos ?pasivos) (patrimonio ?patrimonio) (resultados ?resultados))
   (test (> ?ano_top ?ano))
   =>
   (bind ?fuentes (+ ?pasivos ?patrimonio))
   (printout t "(" ?activos "?=" ?fuentes ")" crlf)
   (if (= ?fuentes ?activos)
      then
      (printout t ?activos "=" ?pasivos "+" ?patrimonio crlf tab tab ":) A=P+K" crlf crlf))
   (if (not (= ?fuentes ?activos))
      then
      (printout t ?activos "<>" ?pasivos "+" ?patrimonio crlf crlf)))

(defrule ECUACION::ecuaciones
   (declare (salience -101))
   (ecuacion (empresa ?empresa) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano))
   =>
   (printout t "ecuación de la partida " tab ?numero tab ?dia " de " ?mes tab ?ano crlf))

(defmodule REMANENTE
   (import MAIN deftemplate ?ALL)
   (export deftemplate ?ALL))

(deffunction REMANENTE::mes_to_numero (?p0))

(deffunction REMANENTE::to_serial_date (?p0 ?p1 ?p2))

(deffunction REMANENTE::mes_to_numero
   (?mes)
   (switch ?mes
      (case enero then
         1)
      (case febrero then
         2)
      (case marzo then
         3)
      (case abril then
         4)
      (case mayo then
         5)
      (case junio then
         6)
      (case julio then
         7)
      (case agosto then
         8)
      (case septiembre then
         9)
      (case octubre then
         10)
      (case noviembre then
         11)
      (case diciembre then
         12)))

(deffunction REMANENTE::to_serial_date
   (?dia ?mes ?ano)
   (+ (* 10000 ?ano) (* 100 (mes_to_numero ?mes)) ?dia))

(defrule REMANENTE::inicio-de-modulo-mensual
   (declare (salience 10000))
   (empresa (nombre ?empresa))
   =>
   (set-strategy breadth)
   (printout t "--------------------AJUSTES DE REMANENTES ------------------" crlf))

(defrule REMANENTE::codigos-f29-remanente-de-iva
   (declare (salience 10000))
   (actual (mes ?mes))
   (tasas (utm ?utm) (mes ?mes-anterior) (ano ?ano-anterior))
   (tasas (utm ?utm-pago) (mes ?mes-de-pago) (ano ?ano-de-pago))
   ?f <- (f29 (partida ?numero) (mes ?mes) (ano ?ano))
   ?imposiciones <- (ajuste-de-remanente-de-iva (partida ?partida) (mes-anterior ?mes-anterior) (ano-anterior ?ano-anterior) (mes ?mes) (ano ?ano) (mes-de-pago ?mes-de-pago) (ano-de-pago ?ano-de-pago) (mostrar-en ?mostrar-en) (antes ?antes))
   (ticket (numero ?numero))
   (empresa (nombre ?empresa))
   =>
   (bind ?antes-en-utm (round (/ (round (/ (* ?antes 100) ?utm)) 100)))
   (printout t antes-en-utm ?antes-en-utm 100 crlf)
   (bind ?calculado (round (* ?antes-en-utm ?utm-pago)))
   (assert (partida (empresa ?empresa) (numero ?numero) (dia 31) (mes ?mes) (ano ?ano) (descripcion (str-cat "Formulario F29 " ?mes)) (actividad codigos-f29)))
   (assert (acumulador-mensual (cuenta 77) (mes ?mes-anterior) (ano ?ano-anterior) (debe 0) (haber 0)))
   (assert (sumar (qty 1) (debe ?calculado) (haber 0) (cuenta 77) (mes ?mes-anterior) (ano ?ano-anterior)))
   (assert (acumulador-mensual (cuenta 504) (mes ?mes) (ano ?ano) (debe 0) (haber 0)))
   (assert (sumar (qty 1) (debe ?calculado) (haber 0) (cuenta 504) (mes ?mes) (ano ?ano))))

(defrule REMANENTE::ajustar-remanente-de-iva
   (declare (salience 10000))
   (tasas (utm ?utm) (mes ?mes-anterior) (ano ?ano-anterior))
   (tasas (utm ?utm-pago) (mes ?mes-de-pago) (ano ?ano-de-pago))
   (actual (mes ?mes))
   (ticket (numero ?numero))
   (empresa (nombre ?empresa))
   ?imposiciones <- (ajuste-de-remanente-de-iva (mes-anterior ?mes-anterior) (ano-anterior ?ano-anterior) (mes-que-se-declara-en-el-f29 ?mes-que-se-declara) (mes-en-que-se-presenta-el-f29 ?mes-en-que-se-presenta) (mes ?mes) (ano ?ano) (mes-de-pago ?mes-de-pago) (ano-de-pago ?ano-de-pago) (mostrar-en ?mostrar-en) (antes ?antes) (partida ?numero) (pagado false))
   =>
   (printout t "------- " ?mes crlf)
   (printout t "Remanente Generado en" tab ?mes-anterior crlf)
   (printout t "Mes que se declara en el f29" tab ?mes-que-se-declara crlf)
   (printout t "Mes en que se presenta f29" tab ?mes-en-que-se-presenta crlf)
   (printout t "Mes en que se presenta el f29" tab ?mostrar-en crlf)
   (printout t "Mes para el que se ajusta el remanente " ?mes-de-pago crlf)
   (printout t "utm del periodo de declaracion ( " ?mes " de " ?ano " )" tab ?utm crlf)
   (printout t "utm del periodo de presentacion ( " ?mes-de-pago " de " ?ano-de-pago " )" tab ?utm-pago crlf)
   (printout t "Monto de Remanente Generado en " ?mes-anterior " de " ?ano-anterior tab ?antes crlf)
   (bind ?antes-en-utm (round (/ (round (/ (* ?antes 100) ?utm)) 100)))
   (printout t "                 ....................... en utm " tab tab ?antes-en-utm crlf)
   (bind ?calculado (round (* ?antes-en-utm ?utm-pago)))
   (printout t "               ................ajustado para " ?mes-de-pago " de " ?ano-de-pago tab ?calculado crlf)
   (printout t "               ........... presentado en 504 de " ?mes " de " ?ano tab ?calculado crlf)
   (if (> ?calculado ?antes)
      then
      (bind ?ajuste (round (- ?calculado ?antes)))
      (bind ?dia 31)
      (assert (partida (empresa ?empresa) (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion (str-cat "Por ajuste del remanente de IVA. El valor actualizado de 504 f29 es de: " ?calculado " para " ?mostrar-en)) (actividad ajuste-a-ingreso-remanente-de-iva)))
      (assert (cargo (tipo-de-documento remanente-iva) (cuenta iva-credito) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (monto ?ajuste) (glosa (str-cat por-remanente-de-iva- ?mes-de-pago ?ajuste))))
      (assert (abono (tipo-de-documento remanente-iva) (cuenta ganancia-por-correccion-monetaria) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (monto ?ajuste) (glosa (str-cat por-remanente-de-iva- ?mes-de-pago ?ajuste))))
      (printout t "-->ari Ajustar a Ingresos Remanente de IVA " ?mes tab ?ajuste crlf))
   (if (< ?calculado ?antes)
      then
      (bind ?ajuste (round (- ?antes ?calculado)))
      (bind ?dia 31)
      (assert (partida (empresa ?empresa) (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion (str-cat "Por ajuste del remanente de IVA. El valor actualizado de 504 f29 es de: " ?calculado " para " ?mostrar-en)) (actividad ajuste-a-gastos-de-remanente-de-iva)))
      (assert (abono (tipo-de-documento remanente-iva) (cuenta iva-credito) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (monto ?ajuste) (glosa (str-cat por-remanente-de-iva- ?mes-de-pago ?ajuste))))
      (assert (cargo (tipo-de-documento remanente-iva) (cuenta perdida-por-correccion-monetaria) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (monto ?ajuste) (glosa (str-cat por-remanente-de-iva- ?mes-de-pago ?ajuste))))
      (printout t "-->ari Ajustar a Gastos Remanente de IVA " ?mes tab ?ajuste crlf))
   (if (= ?calculado ?antes)
      then
      (bind ?ajuste 0)
      (bind ?dia 31)
      (assert (partida (empresa ?empresa) (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion (str-cat "Por ajuste del remanente de IVA. El valor actualizado de 504 f29 es de: " ?antes " para " ?mes-de-pago)) (actividad ajuste-a-ingreso-remanente-de-iva)))
      (printout t "-->ari No es necesario Ajustar Remanente de IVA " ?mes tab ?ajuste crlf))
   (assert (ccm (folio na) (partida ?numero) (tipo-documento ajuste-remanente-iva) (monto-total ?ajuste)))
   (printout t "-------------------------------------------------------" crlf))

(defmodule MENSUAL
   (import MAIN deftemplate ?ALL))

(deffunction MENSUAL::mes_to_numero (?p0))

(deffunction MENSUAL::to_serial_date (?p0 ?p1 ?p2))

(deffunction MENSUAL::mes_to_numero
   (?mes)
   (switch ?mes
      (case enero then
         1)
      (case febrero then
         2)
      (case marzo then
         3)
      (case abril then
         4)
      (case mayo then
         5)
      (case junio then
         6)
      (case julio then
         7)
      (case agosto then
         8)
      (case septiembre then
         9)
      (case octubre then
         10)
      (case noviembre then
         11)
      (case diciembre then
         12)))

(deffunction MENSUAL::to_serial_date
   (?dia ?mes ?ano)
   (+ (* 10000 ?ano) (* 100 (mes_to_numero ?mes)) ?dia))

(defrule MENSUAL::inicio-de-modulo-mensual
   (declare (salience 10000))
   (empresa (nombre ?empresa))
   =>
   (set-strategy breadth)
   (printout t "--------------------- MENSUAL ------------------" crlf))

(defrule MENSUAL::inicio-kindle-k-mensual-rules
   (declare (salience 10000))
   (empresa (nombre ?empresa))
   (balance (mes ?mes))
   (selecciones (inspect-f29-code ?codigo))
   =>
   (bind ?archivo (str-cat "./doc/" ?empresa "/codigos-f29-" ?mes ".markdown"))
   (open ?archivo k "w")
   (printout k "--- " crlf)
   (printout k "layout: page" crlf)
   (printout k "--- " crlf)
   (printout k "" crlf)
   (printout k "<table>" crlf)
   (printout k "<thead> <th style='background-color: lavender' colspan='10'> CODIGO " ?codigo tab ?mes " </th></thead>" crlf)
   (printout k "<tr><th> partida </th> <th> doc </th> <th> mes </th> <th>  cuenta  </th> <th> saldo  </th> <th>   qty </th> <th> debe </th><th> " suma " </th>  <th> haber </th> <th> " suma " </th>  </tr>" crlf)
   (printout k "<tbody>" crlf))

(defrule MENSUAL::fin
   (declare (salience -100))
   =>
   (printout k "</tbody>" crlf)
   (printout k "</table>" crlf)
   (close k))

(defrule MENSUAL::fin-de-modulo-mensual
   (declare (salience -10000))
   (empresa (nombre ?empresa))
   =>
   (set-strategy breadth)
   (printout t "-------Resumen----------- MENSUAL ------------------" crlf)
   (assert (resumen)))

(defrule MENSUAL::resumen
   (resumen)
   ?acc <- (acumulador-mensual (cuenta ?cuenta) (qty ?qty) (debe ?debe) (haber ?haber) (mes ?mes) (ano ?ano))
   =>
   (printout t ?qty tab ?debe tab ?haber tab ?ano tab ?mes tab ?cuenta crlf))

(defrule MENSUAL::banco-estado
   (actual (mes ?mes))
   (cuenta (partida ?partida) (nombre ?nombre) (mes ?mes) (ano ?ano) (debe ?debe))
   (test (eq banco-estado ?nombre))
   =>)

(defrule MENSUAL::ventas
   (actual (mes ?mes))
   (cuenta (partida ?partida) (nombre ?nombre) (mes ?mes) (ano ?ano) (haber ?haber))
   (test (eq ventas ?nombre))
   =>)

(defrule MENSUAL::creando-acumulador
   (declare (salience 9000))
   (cuenta (partida ?partida) (nombre ?cuenta) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   (not (exists
             (acumulador-mensual (cuenta ?cuenta) (mes ?mes) (ano ?ano))))
   (test (not (or (eq ?cuenta letras-por-pagar) (eq ?cuenta costos-de-ventas) (eq ?cuenta compras) (eq ?cuenta gastos-en-investigacion-y-desarrollo))))
   (test (or (> ?haber 0) (> ?debe 0)))
   =>
   (assert (acumulador-mensual (cuenta ?cuenta) (debe 0) (haber 0) (mes ?mes) (ano ?ano)))
   (printout t "Cuenta acumulador mensual " tab ?cuenta tab ?mes crlf))

(defrule MENSUAL::creando-acumulador-39
   (declare (salience 9000))
   (cuenta (nombre retencion-de-iva-articulo-11) (partida ?partida) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   (not (exists
             (acumulador-mensual (cuenta 39) (mes ?mes) (ano ?ano))))
   (test (or (> ?haber 0) (> ?debe 0)))
   =>
   (assert (acumulador-mensual (cuenta 39) (mes ?mes) (ano ?ano) (debe 0) (haber 0)))
   (printout t "Cuenta acumulador mensual 39 " tab ?mes crlf))

(defrule MENSUAL::creando-acumulador-151
   (declare (salience 9000))
   (cuenta (tipo-de-documento 33) (nombre retenciones-por-pagar) (partida ?partida) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   (not (exists
             (acumulador-mensual (cuenta 151) (mes ?mes) (ano ?ano))))
   (test (or (> ?haber 0) (> ?debe 0)))
   =>
   (assert (acumulador-mensual (cuenta 151) (mes ?mes) (ano ?ano) (debe 0) (haber 0)))
   (printout t "Cuenta acumulador mensual 151 " tab ?mes crlf))

(defrule MENSUAL::creando-acumulador-110-afecta
   (declare (salience 9000))
   (cuenta (tipo-de-documento 39) (nombre ventas-con-eboleta-afecta) (partida ?partida) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   (not (exists
             (acumulador-mensual (cuenta 110) (mes ?mes) (ano ?ano))))
   (test (or (> ?haber 0) (> ?debe 0)))
   =>
   (assert (acumulador-mensual (cuenta 110) (mes ?mes) (ano ?ano) (debe 0) (haber 0)))
   (printout t "Cuenta acumulador mensual 110 afecta " tab ?mes crlf))

(defrule MENSUAL::creando-acumulador-110-exenta
   (declare (salience 9000))
   (cuenta (tipo-de-documento 39) (nombre ventas-con-eboleta-exenta) (partida ?partida) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   (not (exists
             (acumulador-mensual (cuenta 110) (mes ?mes) (ano ?ano))))
   (test (or (> ?haber 0) (> ?debe 0)))
   =>
   (assert (acumulador-mensual (cuenta 110) (mes ?mes) (ano ?ano) (debe 0) (haber 0)))
   (printout t "Cuenta acumulador mensual 110 exenta  " tab ?mes crlf))

(defrule MENSUAL::creando-acumulador-503-factura-afecta
   (declare (salience 9000))
   (cuenta (tipo-de-documento 33) (nombre ventas-con-factura-afecta) (partida ?partida) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   (not (exists
             (acumulador-mensual (cuenta 503) (mes ?mes) (ano ?ano))))
   (test (or (> ?haber 0) (> ?debe 0)))
   =>
   (assert (acumulador-mensual (cuenta 503) (mes ?mes) (ano ?ano) (debe 0) (haber 0)))
   (printout t "Cuenta acumulador mensual 503 factura afecta " tab ?mes crlf))

(defrule MENSUAL::creando-acumulador-509
   (declare (salience 9000))
   (cuenta (tipo-de-documento 61) (nombre iva-debito) (partida ?partida) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   (not (exists
             (acumulador-mensual (cuenta 509) (mes ?mes) (ano ?ano))))
   (test (or (> ?haber 0) (> ?debe 0)))
   (nota-de-credito-sii (folio-nota ?folio-nota) (folio ?folio) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (archivo ?archivo))
   ?f1 <- (venta-sii (rut ?rut) (partida ?numero_2) (folio ?folio) (unidades ?unidades) (costo_unitario ?costo_unitario) (dia ?dia_1) (mes ?mes_2) (ano ?ano) (credito ?credito) (colaborador ?colaborador) (material ?material) (total ?total) (neto ?neto) (iva ?iva))
   =>
   (assert (acumulador-mensual (cuenta 509) (mes ?mes) (ano ?ano) (debe 0) (haber 0)))
   (printout t "Cuenta acumulador mensual 509 " tab ?mes crlf))

(defrule MENSUAL::creando-acumulador-510
   (declare (salience 9000))
   (cuenta (nombre iva-debito) (tipo-de-documento 61) (partida ?partida) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   (not (exists
             (acumulador-mensual (cuenta 510) (mes ?mes) (ano ?ano))))
   (test (or (> ?haber 0) (> ?debe 0)))
   (nota-de-credito-sii (folio-nota ?folio-nota) (folio ?folio) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (archivo ?archivo))
   ?f1 <- (venta-sii (rut ?rut) (partida ?numero_2) (folio ?folio) (unidades ?unidades) (costo_unitario ?costo_unitario) (dia ?dia_1) (mes ?mes_2) (ano ?ano) (credito ?credito) (colaborador ?colaborador) (material ?material) (total ?total) (neto ?neto) (iva ?iva))
   =>
   (assert (acumulador-mensual (cuenta 510) (mes ?mes) (ano ?ano) (debe 0) (haber 0)))
   (printout t "Cuenta acumulador mensual 510 " tab ?mes crlf))

(defrule MENSUAL::creando-acumulador-511
   (declare (salience 9000))
   (cuenta (partida ?partida) (nombre iva-credito) (electronico true) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   (not (exists
             (acumulador-mensual (cuenta 511) (mes ?mes) (ano ?ano))))
   (test (or (> ?haber 0) (> ?debe 0)))
   =>
   (assert (acumulador-mensual (cuenta 511) (mes ?mes) (ano ?ano) (debe 0) (haber 0)))
   (printout t "Cuenta acumulador mensual 511 " tab ?mes crlf))

(defrule MENSUAL::creando-acumulador-512
   (declare (salience 9000))
   (cuenta (partida ?partida) (tipo-de-documento 56) (nombre banco-estado) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   (not (exists
             (acumulador-mensual (cuenta 512) (mes ?mes) (ano ?ano))))
   =>
   (assert (acumulador-mensual (cuenta 512) (mes ?mes) (ano ?ano) (debe 0) (haber 0)))
   (printout t "Cuenta acumulador mensual 512 " tab ?mes crlf))

(defrule MENSUAL::creando-acumulador-513
   (declare (salience 9000))
   (cuenta (partida ?partida) (tipo-de-documento 56) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   (not (exists
             (acumulador-mensual (cuenta 513) (mes ?mes) (ano ?ano))))
   (test (or (> ?haber 0) (> ?debe 0)))
   =>
   (assert (acumulador-mensual (cuenta 513) (mes ?mes) (ano ?ano) (debe 0) (haber 0)))
   (printout t "Cuenta acumulador mensual 513 " tab ?mes crlf))

(defrule MENSUAL::creando-acumulador-515
   (declare (salience 9000))
   (cuenta (partida ?partida) (tipo-de-documento 45) (nombre retenciones-por-pagar) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   (not (exists
             (acumulador-mensual (cuenta 515) (mes ?mes) (ano ?ano))))
   (test (or (> ?haber 0) (> ?debe 0)))
   =>
   (assert (acumulador-mensual (cuenta 515) (mes ?mes) (ano ?ano) (debe 0) (haber 0)))
   (printout t "Cuenta acumulador mensual 515" tab ?mes crlf))

(defrule MENSUAL::creando-acumulador-519
   (declare (salience 9000))
   (or  (cuenta (partida ?partida) (activo-fijo false) (tipo-de-documento 33) (nombre banco-estado) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
        (cuenta (partida ?partida) (activo-fijo false) (tipo-de-documento 33) (nombre caja) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano)))
   (not (exists
             (acumulador-mensual (cuenta 519) (mes ?mes) (ano ?ano))))
   (test (or (> ?haber 0) (> ?debe 0)))
   =>
   (assert (acumulador-mensual (cuenta 519) (mes ?mes) (ano ?ano) (debe 0) (haber 0)))
   (printout t "Cuenta acumulador mensual 519 " tab ?mes crlf))

(defrule MENSUAL::creando-acumulador-520
   (declare (salience 9000))
   (cuenta (partida ?partida) (activo-fijo false) (tipo-de-documento 33) (nombre iva-credito) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   (not (exists
             (acumulador-mensual (cuenta 520) (mes ?mes) (ano ?ano))))
   (test (or (> ?haber 0) (> ?debe 0)))
   =>
   (assert (acumulador-mensual (cuenta 520) (mes ?mes) (ano ?ano)))
   (printout t "Cuenta acumulador mensual 520 " tab ?mes crlf))

(defrule MENSUAL::creando-acumulador-524
   (declare (salience 9000))
   (cuenta (partida ?partida) (activo-fijo true) (tipo-de-documento 33) (nombre banco-estado) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   (not (exists
             (acumulador-mensual (cuenta 524) (mes ?mes) (ano ?ano))))
   (test (or (> ?haber 0) (> ?debe 0)))
   =>
   (assert (acumulador-mensual (cuenta 524) (mes ?mes) (ano ?ano)))
   (printout t "Cuenta acumulador mensual 524 " tab ?mes crlf))

(defrule MENSUAL::creando-acumulador-525
   (declare (salience 9000))
   (cuenta (partida ?partida) (nombre herramientas) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   (not (exists
             (acumulador-mensual (cuenta 525) (mes ?mes) (ano ?ano))))
   (test (or (> ?haber 0) (> ?debe 0)))
   =>
   (assert (acumulador-mensual (cuenta 525) (mes ?mes) (ano ?ano)))
   (printout t "Cuenta acumulador mensual 525 " tab ?mes crlf))

(defrule MENSUAL::creando-acumulador-527
   (declare (salience 9000))
   (cuenta (partida ?partida) (recibida false) (tipo-de-documento 61) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   (not (exists
             (acumulador-mensual (cuenta 527) (mes ?mes) (ano ?ano))))
   (test (or (> ?haber 0) (> ?debe 0)))
   =>
   (assert (acumulador-mensual (cuenta 527) (mes ?mes) (ano ?ano)))
   (printout t "Cuenta acumulador mensual 527 " tab ?mes crlf))

(defrule MENSUAL::creando-acumulador-528
   (declare (salience 9000))
   (cuenta (partida ?partida) (nombre iva-credito) (recibida true) (tipo-de-documento 61) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   (not (exists
             (acumulador-mensual (cuenta 528) (mes ?mes) (ano ?ano))))
   =>
   (assert (acumulador-mensual (cuenta 528) (mes ?mes) (ano ?ano)))
   (printout t "Cuenta acumulador mensual 528 " tab ?mes crlf))

(defrule MENSUAL::creando-acumulador-538
   (declare (salience 9000))
   (cuenta (nombre iva-debito) (tipo-de-documento 48) (partida ?partida) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   (not (exists
             (acumulador-mensual (cuenta 538) (mes ?mes) (ano ?ano))))
   (test (or (> ?haber 0) (> ?debe 0)))
   =>
   (assert (acumulador-mensual (cuenta 538) (mes ?mes) (ano ?ano) (debe 0) (haber 0)))
   (printout t "Cuenta acumulador mensual 538 " tab ?mes crlf))

(defrule MENSUAL::creando-acumulador-563
   (declare (salience 9000))
   (no)
   (cuenta (nombre ventas) (tipo-de-documento ?tipo-de-documento&:(numberp ?tipo-de-documento)) (partida ?partida) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   (not (exists
             (acumulador-mensual (cuenta 563) (mes ?mes) (ano ?ano))))
   (test (or (> ?haber 0) (> ?debe 0)))
   =>
   (assert (acumulador-mensual (cuenta 563) (mes ?mes) (ano ?ano) (debe 0) (haber 0)))
   (printout t "Cuenta acumulador mensual 563 " tab ?mes crlf))

(defrule MENSUAL::creando-acumulador-586-factura-exenta
   (declare (salience 9000))
   (cuenta (nombre ventas-con-factura-exenta) (tipo-de-documento ?tipo-de-documento) (partida ?partida) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   (not (exists
             (acumulador-mensual (cuenta 586) (mes ?mes) (ano ?ano))))
   (test (or (> ?haber 0) (> ?debe 0)))
   =>
   (assert (acumulador-mensual (cuenta 586) (mes ?mes) (ano ?ano) (debe 0) (haber 0)))
   (printout t "Cuenta acumulador mensual 586 " tab ?mes crlf))

(defrule MENSUAL::creando-acumulador-586-eboleta-exenta
   (declare (salience 9000))
   (cuenta (nombre ventas-con-eboleta-exenta) (tipo-de-documento ?tipo-de-documento) (partida ?partida) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   (not (exists
             (acumulador-mensual (cuenta 586) (mes ?mes) (ano ?ano))))
   (test (or (> ?haber 0) (> ?debe 0)))
   =>
   (assert (acumulador-mensual (cuenta 586) (mes ?mes) (ano ?ano) (debe 0) (haber 0)))
   (printout t "Cuenta acumulador mensual 586 " tab ?mes crlf))

(defrule MENSUAL::creando-acumulador-758
   (declare (salience 9000))
   (cuenta (nombre ventas-con-voucher-afecto) (partida ?partida) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   (not (exists
             (acumulador-mensual (cuenta 758) (mes ?mes) (ano ?ano))))
   (test (or (> ?haber 0) (> ?debe 0)))
   =>
   (assert (acumulador-mensual (cuenta 758) (mes ?mes) (ano ?ano) (debe 0) (haber 0)))
   (printout t "Cuenta acumulador mensual 758 " tab ?mes crlf))

(defrule MENSUAL::creando-acumulador-759
   (declare (salience 9000))
   (cuenta (nombre iva-debito) (tipo-de-documento 61) (partida ?partida) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   (not (exists
             (acumulador-mensual (cuenta 759) (mes ?mes) (ano ?ano))))
   (test (or (> ?haber 0) (> ?debe 0)))
   =>
   (assert (acumulador-mensual (cuenta 759) (mes ?mes) (ano ?ano) (debe 0) (haber 0)))
   (printout t "Cuenta acumulador mensual 759 " tab ?mes crlf))

(defrule MENSUAL::ordenar-incremento
   (declare (salience 9000))
   (cuenta (qty ?qty) (tipo-de-documento ?tipo-de-documento) (partida ?partida) (nombre ?cuenta) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   (test (or (> ?haber 0) (> ?debe 0)))
   =>
   (assert (sumar (partida ?partida) (qty ?qty) (tipo-de-documento ?tipo-de-documento) (debe ?debe) (haber ?haber) (cuenta ?cuenta) (mes ?mes) (ano ?ano)))
   (printout t "Sumando " ?debe "------------" tab ?haber tipo-de-documento tab ?tipo-de-documento crlf))

(defrule MENSUAL::ordenar-incremento-codigo-110-exenta
   (declare (salience 9000))
   (cuenta (partida ?partida) (qty ?qty) (tipo-de-documento 39) (nombre ventas-con-eboleta-exenta) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   (test (or (> ?haber 0) (> ?debe 0)))
   =>
   (assert (sumar (partida ?partida) (qty ?qty) (debe ?debe) (haber ?haber) (tipo-de-documento 39) (cuenta 110) (mes ?mes) (ano ?ano))))

(defrule MENSUAL::ordenar-incremento-codigo-110-boleta
   (declare (salience 9000))
   (cuenta (partida ?partida) (qty ?qty) (tipo-de-documento 39) (nombre ventas-con-eboleta-afecta) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   (test (or (> ?haber 0) (> ?debe 0)))
   =>
   (assert (sumar (partida ?partida) (qty ?qty) (debe ?debe) (tipo-de-documento 39) (haber ?haber) (cuenta 110) (mes ?mes) (ano ?ano)))
   (printout t "Sumando tipo 39 para codigo 110 " tab ?partida tab ?debe "------------" ?haber crlf))

(defrule MENSUAL::ordenar-incremento-codigo-151
   (declare (salience 9000))
   (cuenta (partida ?partida) (qty ?qty) (tipo-de-documento 33) (nombre retenciones-por-pagar) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   (test (or (> ?haber 0) (> ?debe 0)))
   =>
   (assert (sumar (partida ?partida) (qty ?qty) (debe ?debe) (tipo-de-documento 33) (haber ?haber) (cuenta 151) (mes ?mes) (ano ?ano)))
   (printout t "Sumando tipo 33 para codigo 151 " tab ?partida tab ?debe "------------" ?haber crlf))

(defrule MENSUAL::ordenar-incremento-509
   (declare (salience 9000))
   (cuenta (partida ?partida) (nombre iva-debito) (tipo-de-documento 61) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   (test (> ?debe 0))
   (test (or (> ?haber 0) (> ?debe 0)))
   (nota-de-credito-sii (folio-nota ?folio-nota) (folio ?folio) (partida ?partida) (dia ?dia) (mes ?mes) (ano ?ano) (archivo ?archivo))
   ?f1 <- (venta-sii (rut ?rut) (partida ?numero_2) (folio ?folio) (unidades ?unidades) (costo_unitario ?costo_unitario) (dia ?dia_1) (mes ?mes_2) (ano ?ano) (credito ?credito) (colaborador ?colaborador) (material ?material) (total ?total) (neto ?neto) (iva ?iva))
   =>
   (assert (sumar (partida ?partida) (debe ?debe) (haber ?haber) (tipo-de-documento 61) (cuenta 509) (mes ?mes) (ano ?ano)))
   (printout t "Sumando notas-de-credito 61 para 509 " tab ?partida tab ?debe "------------" ?haber crlf))

(defrule MENSUAL::ordenar-incremento-510
   (declare (salience 9000))
   (cuenta (partida ?partida) (nombre iva-debito) (tipo-de-documento 61) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   (test (> ?debe 0))
   (test (or (> ?haber 0) (> ?debe 0)))
   (nota-de-credito-sii (folio-nota ?folio-nota) (folio ?folio) (partida ?partida) (dia ?dia) (mes ?mes) (ano ?ano) (archivo ?archivo))
   ?f1 <- (venta-sii (rut ?rut) (partida ?numero_2) (folio ?folio) (unidades ?unidades) (costo_unitario ?costo_unitario) (dia ?dia_1) (mes ?mes_2) (ano ?ano) (credito ?credito) (colaborador ?colaborador) (material ?material) (total ?total) (neto ?neto) (iva ?iva))
   =>
   (assert (sumar (partida ?partida) (debe ?debe) (haber ?haber) (tipo-de-documento 61) (cuenta 510) (mes ?mes) (ano ?ano)))
   (printout t "Sumando iva-debito tipo de documento 61 para 510 " tab ?partida tab ?debe "------------" ?haber crlf))

(defrule MENSUAL::ordenar-incremento-codigo-511-33
   (declare (salience 9000))
   (cuenta (partida ?partida) (qty ?qty) (tipo-de-documento 33) (electronico true) (nombre iva-credito) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   (test (or (> ?haber 0) (> ?debe 0)))
   =>
   (assert (sumar (partida ?partida) (qty ?qty) (debe ?debe) (haber ?haber) (tipo-de-documento 33) (cuenta 511) (mes ?mes) (ano ?ano)))
   (printout t "Sumando iva-credito tipo-de-documento 33 para 511 " tab ?partida tab ?debe "------------" ?haber crlf))

(defrule MENSUAL::ordenar-incremento-codigo-39
   (declare (salience 9000))
   (cuenta (partida ?partida) (qty ?qty) (tipo-de-documento ?tipo-de-documento) (nombre retencion-de-iva-articulo-11) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   (test (or (> ?haber 0) (> ?debe 0)))
   =>
   (assert (sumar (partida ?partida) (qty ?qty) (debe ?debe) (haber ?haber) (tipo-de-documento ?tipo-de-documento) (cuenta 39) (mes ?mes) (ano ?ano)))
   (printout t "Sumando iva-retenido-articulo-11 para 39 " tab ?partida tab ?debe "------------" ?haber crlf))

(defrule MENSUAL::ordenar-incremento-codigo-511-61
   (declare (salience 9000))
   (cuenta (partida ?partida) (qty ?qty) (tipo-de-documento 61) (electronico true) (nombre iva-credito) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   (test (or (> ?haber 0) (> ?debe 0)))
   =>
   (assert (sumar (partida ?partida) (qty ?qty) (debe ?debe) (haber ?haber) (tipo-de-documento 61) (cuenta 511) (mes ?mes) (ano ?ano)))
   (printout t "Restando iva-credito tipo-de-documento 61  para 511 " tab ?partida tab ?debe "------------" ?haber crlf))

(defrule MENSUAL::ordenar-incremento-codigo-511-56
   (declare (salience 9000))
   (cuenta (partida ?partida) (qty ?qty) (tipo-de-documento 56) (electronico true) (nombre iva-credito) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   =>
   (assert (sumar (partida ?partida) (qty ?qty) (debe ?debe) (haber ?haber) (tipo-de-documento 56) (cuenta 511) (mes ?mes) (ano ?ano)))
   (printout t "Sumando iva-credito tipo-de-documento 56  para 511 " tab ?qty tab ?partida tab ?debe "------------" ?haber crlf))

(defrule MENSUAL::ordenar-incremento-codigo-512
   (declare (salience 9000))
   (cuenta (partida ?partida) (qty ?qty) (nombre banco-estado) (tipo-de-documento 56) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   =>
   (assert (sumar (partida ?partida) (qty ?qty) (debe ?debe) (tipo-de-documento 56) (haber ?haber) (cuenta 512) (mes ?mes) (ano ?ano)))
   (printout t "Sumando qty de tipo 56 para codigo 512 " tab ?qty tab ?partida tab ?debe "------------" ?haber crlf))

(defrule MENSUAL::ordenar-incremento-codigo-513
   (declare (salience 9000))
   (cuenta (partida ?partida) (qty ?qty) (tipo-de-documento 56) (nombre iva-debito) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   =>
   (assert (sumar (partida ?partida) (qty ?qty) (debe ?debe) (haber ?haber) (tipo-de-documento 56) (cuenta 513) (mes ?mes) (ano ?ano)))
   (printout t "Sumando tipo 56 para codigo 513 " tab ?qty tab ?partida tab ?debe "------------" ?haber crlf))

(defrule MENSUAL::ordenar-incremento-codigo-515
   (declare (salience 9000))
   (cuenta (partida ?partida) (qty ?qty) (tipo-de-documento 45) (nombre retenciones-por-pagar) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   (test (or (> ?haber 0) (> ?debe 0)))
   =>
   (assert (sumar (partida ?partida) (qty 1) (debe ?debe) (haber ?haber) (tipo-de-documento 45) (cuenta 515) (mes ?mes) (ano ?ano)))
   (printout t "Sumando tipo 45 para codigo 515 " tab ?partida tab ?debe "------------" ?haber crlf))

(defrule MENSUAL::ordenar-incremento-codigo-519
   (declare (salience 9000))
   (or  (cuenta (partida ?partida) (qty ?qty) (recibida true) (activo-fijo false) (electronico true) (tipo-de-documento 33) (nombre banco-estado) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
        (cuenta (partida ?partida) (qty ?qty) (recibida true) (activo-fijo false) (electronico true) (tipo-de-documento 33) (nombre caja) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano)))
   (test (or (> ?haber 0) (> ?debe 0)))
   =>
   (assert (sumar (partida ?partida) (qty ?qty) (debe ?debe) (haber ?haber) (tipo-de-documento 33) (cuenta 519) (mes ?mes) (ano ?ano)))
   (printout t "Sumando efectivo-y-equivalentes tipo-de-documento 33 para 519" tab ?debe "------------" ?haber crlf))

(defrule MENSUAL::ordenar-incremento-520
   (declare (salience 9000))
   (cuenta (partida ?partida) (activo-fijo false) (recibida true) (tipo-de-documento 33) (nombre iva-credito) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   (test (or (> ?haber 0) (> ?debe 0)))
   =>
   (assert (sumar (partida ?partida) (debe ?debe) (haber ?haber) (tipo-de-documento 33) (cuenta 520) (mes ?mes) (ano ?ano)))
   (printout t "Sumando tipo 33 para codigo 520 " tab ?partida tab ?debe "------------" ?haber crlf))

(defrule MENSUAL::ordenar-incremento-524
   (declare (salience 9000))
   (cuenta (partida ?partida) (activo-fijo true) (tipo-de-documento 33) (nombre banco-estado) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   (test (or (> ?haber 0) (> ?debe 0)))
   =>
   (assert (sumar (partida ?partida) (debe ?debe) (haber ?haber) (tipo-de-documento 33) (cuenta 524) (mes ?mes) (ano ?ano)))
   (printout t "Sumando tipo-de-documento 33 para codigo 524 " tab ?partida tab ?debe "------------" ?haber crlf))

(defrule MENSUAL::ordenar-incremento-525
   (declare (salience 9000))
   (cuenta (partida ?partida) (activo-fijo true) (nombre iva-credito) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   (test (or (> ?haber 0) (> ?debe 0)))
   =>
   (assert (sumar (partida ?partida) (debe ?debe) (haber ?haber) (tipo-de-documento iva-credito) (cuenta 525) (mes ?mes) (ano ?ano)))
   (printout t "Sumando iva-credito para 525 " tab ?partida tab ?debe "------------" ?haber crlf))

(defrule MENSUAL::ordenar-incremento-527
   (declare (salience 9000))
   (cuenta (partida ?partida) (nombre ingresos-brutos) (tipo-de-documento 61) (recibida false) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   (test (or (> ?haber 0) (> ?debe 0)))
   =>
   (assert (sumar (partida ?partida) (debe ?debe) (haber ?haber) (tipo-de-documento 61) (cuenta 527) (mes ?mes) (ano ?ano)))
   (printout t "Sumando notas-de-credito tipo-de-documento 61 para 527 " tab ?partida tab ?debe "------------" ?haber crlf))

(defrule MENSUAL::ordenar-incremento-528-son-notas-de-creditos-recibidas
   (declare (salience 9000))
   (cuenta (partida ?partida) (nombre iva-credito) (recibida true) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   =>
   (assert (sumar (partida ?partida) (debe ?debe) (haber ?haber) (cuenta 528) (mes ?mes) (ano ?ano)))
   (printout t "Sumando iva-debito para 528 " tab ?partida tab ?debe "------------" ?haber crlf))

(defrule MENSUAL::ordenar-incremento-503-factura-afecta-emitidas
   (declare (salience 9000))
   (cuenta (partida ?partida) (nombre ventas-con-factura-afecta) (tipo-de-documento 33) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   =>
   (assert (sumar (partida ?partida) (debe ?debe) (haber ?haber) (tipo-de-documento 33) (cuenta 503) (mes ?mes) (ano ?ano)))
   (printout t "Sumando 503 " tab ?partida tab ?debe "------------" ?haber crlf))

(defrule MENSUAL::ordenar-incremento-503-factura-exentas-emitidas
   (declare (salience 9000))
   (no)
   (cuenta (partida ?partida) (nombre ventas-con-factura-exenta) (tipo-de-documento 38) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   =>
   (assert (sumar (partida ?partida) (debe ?debe) (haber ?haber) (tipo-de-documento 38) (cuenta 503) (mes ?mes) (ano ?ano)))
   (printout t "Sumando 503 " tab ?partida tab ?debe "------------" ?haber crlf))

(defrule MENSUAL::ordenar-incremento-503-factura-exenta
   (declare (salience 9000))
   (no)
   (cuenta (partida ?partida) (tipo-de-documento ?tipo-de-documento) (nombre ventas-con-factura-exenta) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   (test (or (> ?haber 0) (> ?debe 0)))
   =>
   (assert (sumar (partida ?partida) (debe ?debe) (haber ?haber) (tipo-de-documento ?tipo-de-documento) (cuenta 503) (mes ?mes) (ano ?ano)))
   (printout t "Sumando tipo-de-documento 38 para 503 " tab ?partida tab ?debe "------------" ?haber crlf))

(defrule MENSUAL::ordenar-incremento-538
   (declare (salience 9000))
   (cuenta (partida ?partida) (tipo-de-documento 48) (nombre iva-debito) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   (test (or (> ?haber 0) (> ?debe 0)))
   =>
   (assert (sumar (partida ?partida) (debe ?debe) (haber ?haber) (tipo-de-documento 48) (cuenta 538) (mes ?mes) (ano ?ano)))
   (printout t "Sumando iva-debito tipo-de-documento 48 para 538 " tab ?partida tab ?debe "------------" ?haber crlf))

(defrule MENSUAL::ordenar-incremento-563
   (declare (salience 9000))
   (no)
   (or  (cuenta (partida ?partida) (nombre ingresos-brutos) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano)))
   (test (or (> ?haber 0) (> ?debe 0)))
   =>
   (assert (sumar (partida ?partida) (debe ?debe) (haber ?haber) (cuenta 563) (mes ?mes) (ano ?ano)))
   (printout t "Sumando ingreos-brutos para 563 " tab ?partida tab ?debe "------------" ?haber crlf)
   (halt))

(defrule MENSUAL::ordenar-incremento-586-factura-exenta
   (declare (salience 9000))
   (cuenta (partida ?partida) (tipo-de-documento ?tipo-de-documento) (nombre ventas-con-factura-exenta) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   (test (or (> ?haber 0) (> ?debe 0)))
   =>
   (assert (sumar (partida ?partida) (debe ?debe) (haber ?haber) (tipo-de-documento ?tipo-de-documento) (cuenta 586) (mes ?mes) (ano ?ano)))
   (printout t "Sumando iva-debito tipo-de-documento 38 para 586 " tab ?partida tab ?debe "------------" ?haber crlf))

(defrule MENSUAL::ordenar-incremento-586-eboleta-exenta
   (declare (salience 9000))
   (cuenta (partida ?partida) (tipo-de-documento ?tipo-de-documento) (nombre ventas-con-eboleta-exenta) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   (test (or (> ?haber 0) (> ?debe 0)))
   =>
   (assert (sumar (partida ?partida) (debe ?debe) (haber ?haber) (tipo-de-documento ?tipo-de-documento) (cuenta 586) (mes ?mes) (ano ?ano)))
   (printout t "Sumando iva-debito tipo-de-documento 38 para 586 " tab ?partida tab ?debe "------------" ?haber crlf))

(defrule MENSUAL::ordenar-incremento-758
   (declare (salience 9000))
   (cuenta (nombre ventas-con-voucher-afecto) (qty ?qty) (tipo-de-documento 48) (partida ?partida) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   (test (or (> ?haber 0) (> ?debe 0)))
   =>
   (assert (sumar (partida ?partida) (qty ?qty) (debe ?debe) (tipo-de-documento 48) (haber ?haber) (cuenta 758) (mes ?mes) (ano ?ano)))
   (printout t "Sumando qty ventas-con-voucher-afecto para 758 " tab ?partida tab ?debe "------------" ?haber crlf))

(defrule MENSUAL::ordenar-incremento-759
   (declare (salience 9000))
   (cuenta (nombre iva-debito) (tipo-de-documento 48) (partida ?partida) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   (test (or (> ?haber 0) (> ?debe 0)))
   =>
   (assert (sumar (partida ?partida) (debe ?debe) (haber ?haber) (tipo-de-documento 48) (cuenta 759) (mes ?mes) (ano ?ano)))
   (printout t "Sumando iva-debito tipo-de-documento 48 para 759 " tab ?partida tab ?debe "------------" ?haber crlf))

(defrule MENSUAL::sumar-incremento
   (declare (salience 9000))
   (balance (mes ?mes-balance))
   (selecciones (inspect-f29-code ?codigo))
   ?suma <- (sumar (partida ?partida) (qty ?qty-suma) (tipo-de-documento ?tipo-de-documento) (debe ?debe-suma) (haber ?haber-suma) (cuenta ?cuenta) (mes ?mes) (ano ?ano))
   ?acc <- (acumulador-mensual (cuenta ?cuenta) (qty ?qty) (debe ?debe) (haber ?haber) (mes ?mes) (ano ?ano))
   =>
   (retract ?suma)
   (modify ?acc (debe (+ ?debe ?debe-suma)) (tipo-de-documento ?tipo-de-documento) (haber (+ ?haber ?haber-suma)) (qty (+ ?qty-suma ?qty)))
   (printout t "SUmado " ?cuenta tab ?qty-suma tab ?debe-suma -------- ?haber-suma tab ?tipo-de-documento crlf)
   (if (and (eq ?mes ?mes-balance) (eq ?cuenta ?codigo))
      then
      (printout k "<tr> <td> " ?partida " </td> <td> " ?tipo-de-documento "</td> <td> " ?mes " </td> <td>  " ?cuenta " </td> <td> " (- (+ ?debe ?debe-suma) (+ ?haber ?haber-suma)) "</td> <td style='color: white; background-color: cornflowerblue'>  " ?qty-suma " </td> <td> " ?debe " </td> <td style='color: white; background-color: cornflowerblue'> " ?debe-suma "</td> <td> " ?haber "</td> <td style='color: white; background-color: cornflowerblue'>" ?haber-suma "  </td> </tr>" crlf)))

(defmodule PAGAR
   (import MAIN deftemplate ?ALL))

(deffunction PAGAR::mes_to_numero (?p0))

(deffunction PAGAR::to_serial_date (?p0 ?p1 ?p2))

(deftemplate PAGAR::iva
   (slot credito)
   (slot debito))

(deffunction PAGAR::mes_to_numero
   (?mes)
   (switch ?mes
      (case enero then
         1)
      (case febrero then
         2)
      (case marzo then
         3)
      (case abril then
         4)
      (case mayo then
         5)
      (case junio then
         6)
      (case julio then
         7)
      (case agosto then
         8)
      (case septiembre then
         9)
      (case octubre then
         10)
      (case noviembre then
         11)
      (case diciembre then
         12)))

(deffunction PAGAR::to_serial_date
   (?dia ?mes ?ano)
   (+ (* 10000 ?ano) (* 100 (mes_to_numero ?mes)) ?dia))

(defrule PAGAR::inicio-de-modulo-pagar
   (declare (salience 10000))
   (empresa (nombre ?empresa))
   (balance (ano ?ano))
   =>
   (set-strategy breadth)
   (printout t "--------------------- PAGAR ------------------" crlf)
   (assert (iva (credito 0) (debito 0))))

(defrule PAGAR::fin-de-modulo-pagar
   (declare (salience -10000))
   (empresa (nombre ?empresa))
   (balance (ano ?ano))
   =>
   (printout t "--------------------- fin de PAGAR ------------------" crlf))

(defrule PAGAR::codigos-f29-base-imponible
   (declare (salience -1))
   (empresa (nombre ?empresa))
   ?f <- (f29 (partida ?numero) (mes ?mes) (ano ?ano))
   (acumulador-mensual (cuenta ingresos-brutos) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   =>
   (bind ?monto (- ?haber ?debe))
   (assert (partida (empresa ?empresa) (numero ?numero) (dia 31) (mes ?mes) (ano ?ano) (descripcion (str-cat "Formulario F29 " ?mes)) (actividad codigos-f29)))
   (assert (formulario-f29 (partida ?numero) (codigo 563) (valor (round ?monto)) (descripcion "BASE IMPONIBLE") (mes ?mes) (ano ?ano))))

(defrule PAGAR::codigos-f29-ppm
   (declare (salience -1))
   (actual (mes ?mes))
   (tasas (ppm ?tasa-ppm) (mes ?mes) (ano ?ano))
   ?f <- (f29 (partida ?numero) (mes ?mes) (ano ?ano))
   (ticket (numero ?numero))
   (empresa (nombre ?empresa))
   (acumulador-mensual (cuenta ingresos-brutos) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   =>
   (bind ?ppm (* ?tasa-ppm (- ?haber ?debe)))
   (assert (partida (empresa ?empresa) (numero ?numero) (dia 31) (mes ?mes) (ano ?ano) (descripcion (str-cat "Formulario F29 " ?mes)) (actividad codigos-f29)))
   (assert (formulario-f29 (partida ?numero) (codigo "062") (valor (round ?ppm)) (descripcion "PPM NETO DETERMINADO") (mes ?mes) (ano ?ano)))
   (assert (formulario-f29 (partida ?numero) (codigo 115) (valor (* 100 ?tasa-ppm)) (descripcion "TASA PPM 1ra Categoria") (mes ?mes) (ano ?ano))))

(defrule PAGAR::codigos-f29-debito-notas-de-credito-563
   (declare (salience -1))
   (no)
   (empresa (nombre ?empresa))
   ?f <- (f29 (partida ?numero) (mes ?mes) (ano ?ano))
   (acumulador-mensual (cuenta 563) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   (test (> ?debe ?haber))
   =>
   (bind ?monto (- ?debe ?haber))
   (assert (partida (empresa ?empresa) (numero ?numero) (dia 31) (mes ?mes) (ano ?ano) (descripcion (str-cat "Formulario F29 " ?mes)) (actividad codigos-f29)))
   (assert (formulario-f29 (partida ?numero) (codigo 563) (valor ?monto) (descripcion "BASE IMPONIBLE") (mes ?mes) (ano ?ano))))

(defrule PAGAR::pagar-ppm
   (tasas (mes ?mes) (ano ?ano) (ppm ?tasa-ppm))
   (actual (mes ?mes))
   (ticket (numero ?numero))
   (empresa (nombre ?empresa))
   ?imposiciones <- (pago-de-ppm (mes ?mes) (ano ?ano) (partida ?numero) (pagado false))
   (acumulador-mensual (cuenta ingresos-brutos) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   =>
   (bind ?dia 31)
   (bind ?ppm (* ?tasa-ppm (- ?haber ?debe)))
   (assert (partida (empresa ?empresa) (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion (str-cat "Por pago del ppm, con factor de  " ?tasa-ppm " mes " ?mes)) (actividad pagar-ppm)))
   (assert (cargo (tipo-de-documento pago-de-ppm) (cuenta ppm) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (monto ?ppm) (glosa (str-cat por-pago-de-ppm ?ppm))))
   (assert (abono (tipo-de-documento pago-de-ppm) (cuenta banco-estado) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (monto ?ppm) (glosa (str-cat por-pago-de-ppm ?ppm))))
   (printout t "-->ppm-pago " tab ?haber tab ?ppm tab ?mes crlf))

(defrule PAGAR::codigos-f29-ppm-no
   (declare (salience -1))
   (no)
   (actual (mes ?mes))
   (tasas (ppm ?tasa-ppm) (mes ?mes) (ano ?ano))
   ?f <- (f29 (partida ?numero) (mes ?mes) (ano ?ano))
   (ticket (numero ?numero))
   (empresa (nombre ?empresa))
   (acumulador-mensual (cuenta 563) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   (test (> ?debe ?haber))
   =>
   (bind ?ppm (* ?tasa-ppm (- ?debe ?haber)))
   (assert (partida (empresa ?empresa) (numero ?numero) (dia 31) (mes ?mes) (ano ?ano) (descripcion (str-cat "Formulario F29 " ?mes)) (actividad codigos-f29)))
   (assert (formulario-f29 (partida ?numero) (codigo 62) (valor (round ?ppm)) (descripcion "PPM NETO DETERMINADO") (mes ?mes) (ano ?ano)))
   (assert (formulario-f29 (partida ?numero) (codigo 115) (valor (* 100 ?tasa-ppm)) (descripcion "TASA PPM 1ra Categoria") (mes ?mes) (ano ?ano))))

(defrule PAGAR::codigos-f29-ppv
   (declare (salience -1))
   (actual (mes ?mes))
   ?f <- (f29 (partida ?numero) (mes ?mes) (ano ?ano))
   (ticket (numero ?numero))
   (empresa (nombre ?empresa))
   (acumulador-mensual (cuenta ppv) (haber ?haber) (debe ?ppv) (mes ?mes) (ano ?ano))
   =>
   (printout t "ppv <- Código f29 ppv anotado " tab ?ppv crlf)
   (assert (partida (empresa ?empresa) (numero ?numero) (dia 31) (mes ?mes) (ano ?ano) (descripcion (str-cat "Formulario F29 " ?mes)) (actividad codigos-f29)))
   (assert (formulario-f29 (partida ?numero) (codigo 771) (valor (round ?ppv)) (descripcion "PPM VOLUNTARIO") (mes ?mes) (ano ?ano))))

(defrule PAGAR::pagar-ppm-no
   (no)
   (tasas (mes ?mes) (ano ?ano) (ppm ?tasa-ppm))
   (actual (mes ?mes))
   (ticket (numero ?numero))
   (empresa (nombre ?empresa))
   ?imposiciones <- (pago-de-ppm (mes ?mes) (ano ?ano) (partida ?numero) (pagado false))
   (acumulador-mensual (cuenta 563) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   (test (> ?debe ?haber))
   =>
   (bind ?dia 31)
   (bind ?ppm (* ?tasa-ppm (- ?debe ?haber)))
   (assert (partida (empresa ?empresa) (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion (str-cat "Por pago del ppm, con factor de  " ?tasa-ppm " mes " ?mes)) (actividad pagar-ppm)))
   (assert (cargo (tipo-de-documento pago-de-ppm) (cuenta ppm) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (monto ?ppm) (glosa (str-cat por-pago-de-ppm ?ppm))))
   (assert (abono (tipo-de-documento pago-de-ppm) (cuenta banco-estado) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (monto ?ppm) (glosa (str-cat por-pago-de-ppm ?ppm))))
   (printout t "-->ppm-pago " tab ?haber tab ?ppm tab ?mes crlf))

(defrule PAGAR::declarar-ppm
   (no)
   (actual (mes ?mes))
   (tasas (ppm ?tasa-ppm) (mes ?mes) (ano ?ano))
   (ticket (numero ?numero))
   (empresa (nombre ?empresa))
   ?imposiciones <- (declaracion-de-ppm (mes ?mes) (ano ?ano) (partida ?numero) (pagado false))
   (acumulador-mensual (cuenta ingresos-brutos) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   =>
   (bind ?dia 31)
   (bind ?ppm (* ?tasa-ppm (- ?haber ?debe)))
   (assert (partida (empresa ?empresa) (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion (str-cat "Provisionando ppm en " ?mes ". Aunque debiera hacerse en abril del año que sigue.")) (actividad declarar-ppm)))
   (assert (abono (tipo-de-documento declaracion-de-ppm) (cuenta ppm) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (monto ?ppm) (glosa (str-cat por-declarar-ppm ?ppm))))
   (assert (cargo (tipo-de-documento declaracion-de-ppm) (cuenta provision-impuesto-a-la-renta) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (monto ?ppm) (glosa (str-cat por-declarar-ppm ?ppm))))
   (printout t "-->ppm-declara " tab ?haber tab ?ppm tab ?mes crlf))

(defrule PAGAR::codigos-f29-retencion-tasa-ley-21-133
   (declare (salience -1))
   (actual (mes ?mes))
   ?f <- (f29 (partida ?numero) (mes ?mes) (ano ?ano))
   (ticket (numero ?numero))
   (empresa (nombre ?empresa))
   (acumulador-mensual (qty ?qty) (cuenta 151) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   =>
   (assert (partida (empresa ?empresa) (numero ?numero) (dia 31) (mes ?mes) (ano ?ano) (descripcion (str-cat "Formulario F29 " ?mes)) (actividad codigos-f29)))
   (assert (formulario-f29 (partida ?numero) (codigo 151) (valor ?haber) (descripcion "RETENCION TASA LEY 21.133 SOBRE RENTAS") (mes ?mes) (ano ?ano))))

(defrule PAGAR::codigos-f29-codigo-39
   (declare (salience -1))
   (empresa (nombre ?empresa))
   ?f <- (f29 (partida ?numero) (mes ?mes) (ano ?ano))
   (acumulador-mensual (qty ?qty) (cuenta 39) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   =>
   (bind ?monto (- ?debe ?haber))
   (assert (partida (empresa ?empresa) (numero ?numero) (dia 31) (mes ?mes) (ano ?ano) (descripcion (str-cat "Formulario F29 " ?mes)) (actividad codigos-f29)))
   (assert (formulario-f29 (partida ?numero) (codigo 39) (valor ?monto) (descripcion "IVA RETENIDO A TERCEROS POR CAMBIO DE SUJETO ") (mes ?mes) (ano ?ano))))

(defrule PAGAR::codigos-f29-codigo-511
   (declare (salience -1))
   (empresa (nombre ?empresa))
   ?f <- (f29 (partida ?numero) (mes ?mes) (ano ?ano))
   (acumulador-mensual (qty ?qty) (cuenta 511) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   =>
   (bind ?monto (- ?debe ?haber))
   (assert (partida (empresa ?empresa) (numero ?numero) (dia 31) (mes ?mes) (ano ?ano) (descripcion (str-cat "Formulario F29 " ?mes)) (actividad codigos-f29)))
   (assert (formulario-f29 (partida ?numero) (codigo 511) (valor ?monto) (descripcion "CRED.IVA POR DCTOS. ELECTRONICOS ") (mes ?mes) (ano ?ano))))

(defrule PAGAR::codigos-f29-codigo-512
   (declare (salience -1))
   (empresa (nombre ?empresa))
   ?f <- (f29 (partida ?numero) (mes ?mes) (ano ?ano))
   (acumulador-mensual (qty ?qty) (cuenta 512) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   =>
   (bind ?monto (- ?debe ?haber))
   (assert (partida (empresa ?empresa) (numero ?numero) (dia 31) (mes ?mes) (ano ?ano) (descripcion (str-cat "Formulario F29 " ?mes)) (actividad codigos-f29)))
   (assert (formulario-f29 (partida ?numero) (codigo 512) (valor ?qty) (descripcion "NOTAS DE DEBITO EMITIDAS DEL GIRO") (mes ?mes) (ano ?ano))))

(defrule PAGAR::codigos-f29-codigo-513
   (declare (salience -1))
   (empresa (nombre ?empresa))
   ?f <- (f29 (partida ?numero) (mes ?mes) (ano ?ano))
   (acumulador-mensual (qty ?qty) (cuenta 513) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   =>
   (bind ?monto (- ?haber ?debe))
   (assert (partida (empresa ?empresa) (numero ?numero) (dia 31) (mes ?mes) (ano ?ano) (descripcion (str-cat "Formulario F29 " ?mes)) (actividad codigos-f29)))
   (assert (formulario-f29 (partida ?numero) (codigo 513) (valor ?monto) (descripcion "DEBITO DE NOTAS DEBITO EMITIDAS DEL GIRO") (mes ?mes) (ano ?ano))))

(defrule PAGAR::codigos-f29-codigo-515
   (declare (salience -1))
   (empresa (nombre ?empresa))
   ?f <- (f29 (partida ?numero) (mes ?mes) (ano ?ano))
   (acumulador-mensual (qty ?qty) (cuenta 515) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   =>
   (bind ?monto (- ?haber ?debe))
   (assert (partida (empresa ?empresa) (numero ?numero) (dia 31) (mes ?mes) (ano ?ano) (descripcion (str-cat "Formulario F29 " ?mes)) (actividad codigos-f29)))
   (assert (formulario-f29 (partida ?numero) (codigo 515) (valor ?qty) (descripcion "CANT. FACTURA COMPRA IVA RETENIDO TOTAL") (mes ?mes) (ano ?ano))))

(defrule PAGAR::codigos-f29-codigo-142
   (declare (salience -1))
   (empresa (nombre ?empresa))
   ?f <- (f29 (partida ?numero) (mes ?mes) (ano ?ano))
   (acumulador-mensual (qty ?qty) (cuenta 586) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   =>
   (bind ?monto (- ?debe ?haber))
   (assert (partida (empresa ?empresa) (numero ?numero) (dia 31) (mes ?mes) (ano ?ano) (descripcion (str-cat "Formulario F29 " ?mes)) (actividad codigos-f29)))
   (assert (formulario-f29 (partida ?numero) (codigo 142) (valor (- 0 ?monto)) (descripcion "Neto Ventas/Servicios Exentos") (mes ?mes) (ano ?ano))))

(defrule PAGAR::codigos-f29-codigo-586
   (declare (salience -1))
   (empresa (nombre ?empresa))
   ?f <- (f29 (partida ?numero) (mes ?mes) (ano ?ano))
   (acumulador-mensual (qty ?qty) (cuenta 586) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   =>
   (bind ?monto (- ?debe ?haber))
   (assert (partida (empresa ?empresa) (numero ?numero) (dia 31) (mes ?mes) (ano ?ano) (descripcion (str-cat "Formulario F29 " ?mes)) (actividad codigos-f29)))
   (assert (formulario-f29 (partida ?numero) (codigo 586) (valor ?qty) (descripcion "Qty Ventas/Servicios Exentos") (mes ?mes) (ano ?ano))))

(defrule PAGAR::codigos-f29-codigo-587
   (declare (salience -1))
   (empresa (nombre ?empresa))
   ?f <- (f29 (partida ?numero) (mes ?mes) (ano ?ano))
   (acumulador-mensual (qty ?qty) (cuenta 515) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   =>
   (bind ?monto (- ?haber ?debe))
   (assert (partida (empresa ?empresa) (numero ?numero) (dia 31) (mes ?mes) (ano ?ano) (descripcion (str-cat "Formulario F29 " ?mes)) (actividad codigos-f29)))
   (assert (formulario-f29 (partida ?numero) (codigo 587) (valor ?monto) (descripcion "NETOFACT. COMPRA IVA-RETENIDO TOTAL") (mes ?mes) (ano ?ano))))

(defrule PAGAR::codigos-f29-codigo-758
   (declare (salience -1))
   (empresa (nombre ?empresa))
   ?f <- (f29 (partida ?numero) (mes ?mes) (ano ?ano))
   (acumulador-mensual (qty ?qty) (cuenta 758) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   =>
   (bind ?monto (- ?haber ?debe))
   (assert (partida (empresa ?empresa) (numero ?numero) (dia 31) (mes ?mes) (ano ?ano) (descripcion (str-cat "Formulario F29 " ?mes)) (actividad codigos-f29)))
   (assert (formulario-f29 (partida ?numero) (codigo 758) (valor ?qty) (descripcion "CANT. RECIBO DE PAGO MEDIOS ELECTRÓNICOS") (mes ?mes) (ano ?ano)))
   (assert (formulario-f29 (partida ?numero) (codigo 759) (valor (round (* 0.19 ?monto))) (descripcion "DÉB. RECIBO DE PAGO MEDIOS ELECTRÓNICOS") (mes ?mes) (ano ?ano))))

(defrule PAGAR::codigos-f29-codigo-759
   (declare (salience -1))
   (empresa (nombre ?empresa))
   ?f <- (f29 (partida ?numero) (mes ?mes) (ano ?ano))
   (acumulador-mensual (qty ?qty) (cuenta 768) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   =>
   (bind ?monto (- ?haber ?debe))
   (assert (partida (empresa ?empresa) (numero ?numero) (dia 31) (mes ?mes) (ano ?ano) (descripcion (str-cat "Formulario F29 " ?mes)) (actividad codigos-f29)))
   (assert (formulario-f29 (partida ?numero) (codigo 759) (valor (round (* 0.19 ?monto))) (descripcion "DÉB. RECIBO DE PAGO MEDIOS ELECTRÓNICOS") (mes ?mes) (ano ?ano))))

(defrule PAGAR::codigos-f29-debito-notas-de-credito-510
   (declare (salience -1))
   (empresa (nombre ?empresa))
   ?f <- (f29 (partida ?numero) (mes ?mes) (ano ?ano))
   (acumulador-mensual (cuenta 510) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   (test (< ?haber ?debe))
   =>
   (bind ?monto (- ?debe ?haber))
   (assert (partida (empresa ?empresa) (numero ?numero) (dia 31) (mes ?mes) (ano ?ano) (descripcion (str-cat "Formulario F29 " ?mes)) (actividad codigos-f29)))
   (assert (formulario-f29 (partida ?numero) (codigo 510) (valor ?monto) (descripcion "DEBITO N.CREDITO EMITIDAS/Ref FACTURA | NOTA-CREDITO-RECIBIDA-RETENCION-PARCIAL-CAMBIO-SUJETO") (mes ?mes) (ano ?ano))))

(defrule PAGAR::codigos-f29-qty-notas-de-credito-509
   (declare (salience -1))
   (empresa (nombre ?empresa))
   ?f <- (f29 (partida ?numero) (mes ?mes) (ano ?ano))
   (acumulador-mensual (qty ?qty) (cuenta 509) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   =>
   (assert (partida (empresa ?empresa) (numero ?numero) (dia 31) (mes ?mes) (ano ?ano) (descripcion (str-cat "Formulario F29 " ?mes)) (actividad codigos-f29)))
   (assert (formulario-f29 (partida ?numero) (codigo 509) (valor ?qty) (descripcion "QtyNOTAS CREDITO EMITIDAS/Ref FACTURA | NOTA-CREDITO-RECIBIDA-RETENCION-PARCIAL-CAMBIO-SUEJETO") (mes ?mes) (ano ?ano))))

(defrule PAGAR::codigos-f29-qty-sin-derecho-a-credito-fiscal
   (declare (salience -1))
   (empresa (nombre ?empresa))
   ?f <- (f29 (partida ?numero) (mes ?mes) (ano ?ano))
   (acumulador-mensual (cuenta intangibles) (qty ?qty) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano) (tipo-de-documento 33))
   (test (> ?debe ?haber))
   =>
   (bind ?monto (- ?debe ?haber))
   (assert (partida (empresa ?empresa) (numero ?numero) (dia 31) (mes ?mes) (ano ?ano) (descripcion (str-cat "Formulario F29 " ?mes)) (actividad codigos-f29)))
   (assert (formulario-f29 (partida ?numero) (codigo 584) (valor ?qty) (descripcion "CANT.INT.EX.NO GRAV.SINDER.CRED.FISCAL *en preparación ") (mes ?mes) (ano ?ano))))

(defrule PAGAR::codigos-f29-montos-sin-derecho-a-credito-fiscal
   (declare (salience -1))
   (empresa (nombre ?empresa))
   ?f <- (f29 (partida ?numero) (mes ?mes) (ano ?ano))
   (acumulador-mensual (cuenta intangibles) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano) (tipo-de-documento 33))
   (test (> ?debe ?haber))
   =>
   (bind ?monto (- ?debe ?haber))
   (assert (partida (empresa ?empresa) (numero ?numero) (dia 31) (mes ?mes) (ano ?ano) (descripcion (str-cat "Formulario F29 " ?mes)) (actividad codigos-f29)))
   (assert (formulario-f29 (partida ?numero) (codigo 562) (valor (round ?monto)) (descripcion "MONTO SINDER A CRED.FISCAL ") (mes ?mes) (ano ?ano))))

(defrule PAGAR::codigos-f29-debito-facturas-emitidas
   (declare (salience -1))
   (no)
   (empresa (nombre ?empresa))
   ?f <- (f29 (partida ?numero) (mes ?mes) (ano ?ano))
   (acumulador-mensual (cuenta ventas-con-factura-afecta) (tipo-de-documento 33) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   (test (> ?haber ?debe))
   =>
   (bind ?monto (- ?haber ?debe))
   (assert (partida (empresa ?empresa) (numero ?numero) (dia 31) (mes ?mes) (ano ?ano) (descripcion (str-cat "Formulario F29 " ?mes)) (actividad codigos-f29)))
   (assert (formulario-f29 (partida ?numero) (codigo 502) (valor (round (* ?monto 0.19))) (descripcion "DEBITOS FACTURAS EMITIDAS ") (mes ?mes) (ano ?ano))))

(defrule PAGAR::codigos-f29-codigo-503
   (declare (salience -1))
   (empresa (nombre ?empresa))
   ?f <- (f29 (partida ?numero) (mes ?mes) (ano ?ano))
   (acumulador-mensual (qty ?qty) (cuenta 503) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   =>
   (bind ?monto (- ?haber ?debe))
   (assert (partida (empresa ?empresa) (numero ?numero) (dia 31) (mes ?mes) (ano ?ano) (descripcion (str-cat "Formulario F29 " ?mes)) (actividad codigos-f29)))
   (assert (formulario-f29 (partida ?numero) (codigo 503) (valor ?qty) (descripcion "CANT. FACTURAS EMITIDAS") (mes ?mes) (ano ?ano)))
   (assert (formulario-f29 (partida ?numero) (codigo 502) (valor (round (* 0.19 ?monto))) (descripcion "DÉB. FACTURAS EMITIDAS") (mes ?mes) (ano ?ano))))

(defrule PAGAR::codigos-f29-qty-facturas-emitidas
   (declare (salience -1))
   (no)
   (empresa (nombre ?empresa))
   ?f <- (f29 (partida ?numero) (mes ?mes) (ano ?ano))
   (acumulador-mensual (qty ?qty) (cuenta ventas-con-factura-afecta) (tipo-de-documento 33) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   (test (> ?haber ?debe))
   =>
   (bind ?monto (- ?haber ?debe))
   (assert (partida (empresa ?empresa) (numero ?numero) (dia 31) (mes ?mes) (ano ?ano) (descripcion (str-cat "Formulario F29 " ?mes)) (actividad codigos-f29)))
   (assert (formulario-f29 (partida ?numero) (codigo 503) (valor ?qty) (descripcion "CANTIDAD FACTURAS EMITIDAS") (mes ?mes) (ano ?ano))))

(defrule PAGAR::codigos-f29-qty-boletas-emitidas-no
   (declare (salience -1))
   (no)
   (empresa (nombre ?empresa))
   ?f <- (f29 (partida ?numero) (mes ?mes) (ano ?ano))
   (acumulador-mensual (cuenta ventas-con-eboleta-afecta) (tipo-de-documento 39) (haber ?haber) (qty ?qty) (debe ?debe) (mes ?mes) (ano ?ano))
   (test (> ?haber ?debe))
   =>
   (bind ?monto (- ?haber ?debe))
   (assert (partida (empresa ?empresa) (numero ?numero) (dia 31) (mes ?mes) (ano ?ano) (descripcion (str-cat "Formulario F29 " ?mes)) (actividad codigos-f29)))
   (assert (formulario-f29 (partida ?numero) (codigo 110) (valor ?qty) (descripcion "CANT.DE DCTOS.BOLETAS") (mes ?mes) (ano ?ano))))

(defrule PAGAR::codigos-f29-qty-boletas-emitidas
   (declare (salience -1))
   (empresa (nombre ?empresa))
   ?f <- (f29 (partida ?numero) (mes ?mes) (ano ?ano))
   (acumulador-mensual (cuenta 110) (qty ?qty) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   =>
   (bind ?monto (- ?haber ?debe))
   (assert (partida (empresa ?empresa) (numero ?numero) (dia 31) (mes ?mes) (ano ?ano) (descripcion (str-cat "Formulario F29 " ?mes)) (actividad codigos-f29)))
   (assert (formulario-f29 (partida ?numero) (codigo 110) (valor ?qty) (descripcion "CANT.DE DCTOS.BOLETAS") (mes ?mes) (ano ?ano))))

(defrule PAGAR::codigos-f29-debito-boletas-emitidas
   (declare (salience -1))
   (empresa (nombre ?empresa))
   ?f <- (f29 (partida ?numero) (mes ?mes) (ano ?ano))
   (acumulador-mensual (cuenta 110) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   =>
   (bind ?monto (- ?haber ?debe))
   (assert (partida (empresa ?empresa) (numero ?numero) (dia 31) (mes ?mes) (ano ?ano) (descripcion (str-cat "Formulario F29 " ?mes)) (actividad codigos-f29)))
   (assert (formulario-f29 (partida ?numero) (codigo 111) (valor (round (* ?monto 0.19))) (descripcion "DEBITOS BOLETAS EMITIDAS ") (mes ?mes) (ano ?ano))))

(defrule PAGAR::codigos-f29-debito-debito-total
   (declare (salience -1))
   (no)
   (empresa (nombre ?empresa))
   ?f <- (f29 (partida ?numero) (mes ?mes) (ano ?ano))
   (acumulador-mensual (cuenta ventas) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   (test (> ?haber ?debe))
   =>
   (bind ?monto (- ?haber ?debe))
   (assert (partida (empresa ?empresa) (numero ?numero) (dia 31) (mes ?mes) (ano ?ano) (descripcion (str-cat "Formulario F29 " ?mes)) (actividad codigos-f29)))
   (assert (formulario-f29 (partida ?numero) (codigo 538) (valor (round (* ?monto 0.19))) (descripcion "TOTAL DEBITOS ") (mes ?mes) (ano ?ano))))

(defrule PAGAR::codigos-f29-debito-debito-538
   (declare (salience -1))
   (empresa (nombre ?empresa))
   ?f <- (f29 (partida ?numero) (mes ?mes) (ano ?ano))
   (acumulador-mensual (cuenta 538) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   (test (> ?haber ?debe))
   =>
   (bind ?monto (- ?haber ?debe))
   (assert (partida (empresa ?empresa) (numero ?numero) (dia 31) (mes ?mes) (ano ?ano) (descripcion (str-cat "Formulario F29 " ?mes)) (actividad codigos-f29)))
   (assert (formulario-f29 (partida ?numero) (codigo 538) (valor ?monto) (descripcion "TOTAL DEBITOS ") (mes ?mes) (ano ?ano))))

(defrule PAGAR::codigos-f29-debito-debito-524
   (declare (salience -1))
   (empresa (nombre ?empresa))
   ?f <- (f29 (partida ?numero) (mes ?mes) (ano ?ano))
   (acumulador-mensual (qty ?qty) (cuenta 524) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   =>
   (bind ?monto (- ?haber ?debe))
   (assert (partida (empresa ?empresa) (numero ?numero) (dia 31) (mes ?mes) (ano ?ano) (descripcion (str-cat "Formulario F29 " ?mes)) (actividad codigos-f29)))
   (assert (formulario-f29 (partida ?numero) (codigo 524) (valor ?qty) (descripcion "TOTAL FACTURA ACTIVO FIJO") (mes ?mes) (ano ?ano))))

(defrule PAGAR::codigos-f29-debito-debito-525
   (declare (salience -1))
   (empresa (nombre ?empresa))
   ?f <- (f29 (partida ?numero) (mes ?mes) (ano ?ano))
   (acumulador-mensual (cuenta 525) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   =>
   (bind ?monto (- ?debe ?haber))
   (assert (partida (empresa ?empresa) (numero ?numero) (dia 31) (mes ?mes) (ano ?ano) (descripcion (str-cat "Formulario F29 " ?mes)) (actividad codigos-f29)))
   (assert (formulario-f29 (partida ?numero) (codigo 525) (valor ?monto) (descripcion "CRÉD. RECUP. Y REINT. FACT. ACTIVO FIJO") (mes ?mes) (ano ?ano))))

(defrule PAGAR::codigos-f29-debito-debito-527
   (declare (salience -1))
   (empresa (nombre ?empresa))
   ?f <- (f29 (partida ?numero) (mes ?mes) (ano ?ano))
   (acumulador-mensual (cuenta 527) (qty ?qty) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   =>
   (bind ?monto (- ?debe ?haber))
   (assert (partida (empresa ?empresa) (numero ?numero) (dia 31) (mes ?mes) (ano ?ano) (descripcion (str-cat "Formulario F29 " ?mes)) (actividad codigos-f29)))
   (assert (formulario-f29 (partida ?numero) (codigo 527) (valor ?qty) (descripcion "CANT.NOTAS DE CREDITO RECIBIDAS") (mes ?mes) (ano ?ano))))

(defrule PAGAR::codigos-f29-debito-debito-528
   (declare (salience -1))
   (empresa (nombre ?empresa))
   ?f <- (f29 (partida ?numero) (mes ?mes) (ano ?ano))
   (acumulador-mensual (cuenta 528) (qty ?qty) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   =>
   (bind ?monto (- ?haber ?debe))
   (assert (partida (empresa ?empresa) (numero ?numero) (dia 31) (mes ?mes) (ano ?ano) (descripcion (str-cat "Formulario F29 " ?mes)) (actividad codigos-f29)))
   (assert (formulario-f29 (partida ?numero) (codigo 528) (valor ?monto) (descripcion "CREDITO RECUP.Y REINT/NOTAS DE CRED.") (mes ?mes) (ano ?ano))))

(defrule PAGAR::codigos-f29-creditos-recibidos-por-codigo-520-antiguo
   (declare (salience -1))
   (no)
   (empresa (nombre ?empresa))
   ?f <- (f29 (partida ?numero) (mes ?mes) (ano ?ano))
   (acumulador-mensual (cuenta 520) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   =>
   (bind ?monto (- ?debe ?haber))
   (assert (partida (empresa ?empresa) (numero ?numero) (dia 31) (mes ?mes) (ano ?ano) (descripcion (str-cat "Formulario F29 " ?mes)) (actividad codigos-f29)))
   (assert (formulario-f29 (partida ?numero) (codigo 520) (valor (round (* 0.19 ?monto))) (descripcion "CREDITOS REC. REINT/FACT. DEL GIRO ") (mes ?mes) (ano ?ano))))

(defrule PAGAR::codigos-f29-creditos-recibidos-por-codigo-520
   (declare (salience -1))
   (empresa (nombre ?empresa))
   ?f <- (f29 (partida ?numero) (mes ?mes) (ano ?ano))
   (acumulador-mensual (cuenta 520) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   =>
   (bind ?monto (- ?debe ?haber))
   (assert (partida (empresa ?empresa) (numero ?numero) (dia 31) (mes ?mes) (ano ?ano) (descripcion (str-cat "Formulario F29 " ?mes)) (actividad codigos-f29)))
   (assert (formulario-f29 (partida ?numero) (codigo 520) (valor ?monto) (descripcion "CREDITOS REC. REINT/FACT. DEL GIRO ") (mes ?mes) (ano ?ano))))

(defrule PAGAR::codigos-f29-qty-facturas-recibidos-por-codigo-519-antiguo
   (declare (salience -1))
   (no)
   (empresa (nombre ?empresa))
   ?f <- (f29 (partida ?numero) (mes ?mes) (ano ?ano))
   (acumulador-mensual (cuenta 520) (qty ?qty) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   =>
   (bind ?monto (- ?debe ?haber))
   (assert (partida (empresa ?empresa) (numero ?numero) (dia 31) (mes ?mes) (ano ?ano) (descripcion (str-cat "Formulario F29 " ?mes)) (actividad codigos-f29)))
   (assert (formulario-f29 (partida ?numero) (codigo 519) (valor ?qty) (descripcion "CANT.DE DCTOS.FACT.RECIB.DEL GIRO") (mes ?mes) (ano ?ano))))

(defrule PAGAR::codigos-f29-qty-facturas-recibidos-por-codigo-519
   (declare (salience -1))
   (empresa (nombre ?empresa))
   ?f <- (f29 (partida ?numero) (mes ?mes) (ano ?ano))
   (acumulador-mensual (cuenta 519) (qty ?qty) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   =>
   (bind ?monto (- ?debe ?haber))
   (assert (partida (empresa ?empresa) (numero ?numero) (dia 31) (mes ?mes) (ano ?ano) (descripcion (str-cat "Formulario F29 " ?mes)) (actividad codigos-f29)))
   (assert (formulario-f29 (partida ?numero) (codigo 519) (valor ?qty) (descripcion "CANT.DE DCTOS.FACT.RECIB.DEL GIRO") (mes ?mes) (ano ?ano))))

(defrule PAGAR::pagar-iva-debito-v2
   (declare (salience -1))
   (actual (mes ?mes_top))
   (ticket (numero ?numero))
   (empresa (nombre ?empresa))
   ?imposiciones <- (pago-de-iva (mes ?mes) (ano ?ano) (partida ?numero) (pagado false) (monto ?monto))
   ?c <- (cuenta (partida ?partida) (empresa ?empresa) (nombre iva-debito) (mes ?mes) (ano ?ano) (debe ?debe) (haber ?haber))
   (test (> (mes_to_numero ?mes_top) (mes_to_numero ?mes)))
   =>
   (bind ?dia 31)
   (assert (partida (empresa ?empresa) (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion (str-cat "Por pago de impuestos mensuales, mes de " ?mes)) (actividad pagar-impuestos-mensuales)))
   (assert (abono (tipo-de-documento f29) (cuenta banco-estado) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (monto ?monto) (glosa (str-cat por-pago-de-impuestos-mensuales ?monto))))
   (assert (cargo (tipo-de-documento f29) (cuenta iva-debito) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (monto ?monto) (glosa (str-cat por-pago-de-impuestos-mensuales ?monto)))))

(defrule PAGAR::codigos-f29-iva-a-pagar
   (declare (salience -1))
   (actual (mes ?mes_top))
   (ticket (numero ?numero))
   (empresa (nombre ?empresa))
   ?imposiciones <- (pago-de-iva (partida ?partida) (mes ?mes) (ano ?ano) (pagado false) (monto ?monto))
   (test (> (mes_to_numero ?mes_top) (mes_to_numero ?mes)))
   ?f <- (f29 (partida ?numero) (mes ?mes) (ano ?ano))
   =>
   (assert (partida (empresa ?empresa) (numero ?numero) (dia 31) (mes ?mes) (ano ?ano) (descripcion (str-cat "Formulario F29 " ?mes)) (actividad codigos-f29)))
   (assert (formulario-f29 (partida ?numero) (codigo 89) (descripcion (str-cat "IMP. DETERM. IVA partida " ?partida)) (valor (round ?monto)) (mes ?mes) (ano ?ano))))

(defrule PAGAR::codigos-f29-creditos-recibidos-por-codigo-504
   (declare (salience -1))
   (empresa (nombre ?empresa))
   ?f <- (f29 (partida ?numero) (mes ?mes) (ano ?ano))
   (acumulador-mensual (cuenta 504) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   =>
   (bind ?monto (- ?debe ?haber))
   (assert (partida (empresa ?empresa) (numero ?numero) (dia 31) (mes ?mes) (ano ?ano) (descripcion (str-cat "Formulario F29 " ?mes)) (actividad codigos-f29)))
   (assert (formulario-f29 (partida ?numero) (codigo 504) (valor ?monto) (descripcion "REMANENTE CREDITO MES ANTERIOR") (mes ?mes) (ano ?ano))))

(defrule PAGAR::codigos-f29-creditos-recibidos-por-codigo-077
   (declare (salience -1))
   (empresa (nombre ?empresa))
   ?f <- (f29 (partida ?numero) (mes ?mes) (ano ?ano))
   (acumulador-mensual (cuenta 77) (haber ?haber) (debe ?debe) (mes ?mes) (ano ?ano))
   =>
   (bind ?monto (- ?debe ?haber))
   (assert (partida (empresa ?empresa) (numero ?numero) (dia 31) (mes ?mes) (ano ?ano) (descripcion (str-cat "Formulario F29 " ?mes)) (actividad codigos-f29)))
   (assert (formulario-f29 (partida ?numero) (codigo 77) (valor ?monto) (descripcion "REMANENTE DE CREDITO FISC.") (mes ?mes) (ano ?ano))))

(defmodule VALOR_ACTIVOS
   (import MAIN deftemplate ?ALL))

(deffunction VALOR_ACTIVOS::mes_to_numero (?p0))

(deffunction VALOR_ACTIVOS::numero_to_mes (?p0))

(deffunction VALOR_ACTIVOS::proximo_mes (?p0))

(deffunction VALOR_ACTIVOS::to_serial_date (?p0 ?p1 ?p2))

(deftemplate VALOR_ACTIVOS::hacer
   (slot cuenta)
   (slot mes))

(deffunction VALOR_ACTIVOS::mes_to_numero
   (?mes)
   (switch ?mes
      (case enero then
         1)
      (case febrero then
         2)
      (case marzo then
         3)
      (case abril then
         4)
      (case mayo then
         5)
      (case junio then
         6)
      (case julio then
         7)
      (case agosto then
         8)
      (case septiembre then
         9)
      (case octubre then
         10)
      (case noviembre then
         11)
      (case diciembre then
         12)))

(deffunction VALOR_ACTIVOS::numero_to_mes
   (?numero)
   (switch ?numero
      (case 1 then
         enero)
      (case 2 then
         febrero)
      (case 3 then
         marzo)
      (case 4 then
         abril)
      (case 5 then
         mayo)
      (case 6 then
         junio)
      (case 7 then
         julio)
      (case 8 then
         agosto)
      (case 9 then
         septiembre)
      (case 10 then
         octubre)
      (case 11 then
         noviembre)
      (case 12 then
         diciembre)
      (case 13 then
         enero)
      (case 14 then
         febrero)))

(deffunction VALOR_ACTIVOS::proximo_mes
   (?mes))

(deffunction VALOR_ACTIVOS::to_serial_date
   (?dia ?mes ?ano)
   (+ (* 10000 ?ano) (* 100 (mes_to_numero ?mes)) ?dia))

(defrule VALOR_ACTIVOS::inicio-kindle-k-valor-activos-rules
   (declare (salience 10000))
   (empresa (nombre ?empresa))
   =>
   (bind ?archivo (str-cat "./doc/" ?empresa "/valor-activos.markdown"))
   (open ?archivo k "w")
   (printout k "--- " crlf)
   (printout k "layout: page" crlf)
   (printout k "--- " crlf))

(defrule VALOR_ACTIVOS::fin-kindle-k-valores-activos
   (declare (salience -10000))
   =>
   (close k))

(defrule VALOR_ACTIVOS::inicio-de-modulo-IVA
   (declare (salience 1000))
   =>
   (printout t "--módulo----------------------- VALOR-ACTIVOS ---------------------" crlf)
   (set-strategy lex))

(defrule VALOR_ACTIVOS::fin-modulo-DEPRECIACION
   (declare (salience -10000))
   =>
   (printout t "--módulo----fin ------------ VALOR-ACTIVOS ----------------------" crlf)
   (unwatch rules))

(defrule VALOR_ACTIVOS::revisar-depreciaciones
   ?d <- (depreciacion (partida ?numero) (herramienta ?herramienta) (mes ?mes) (ano ?ano) (monto ?monto))
   =>
   (printout t "Hay una depreciacion por :" ?monto " en la partida: " ?numero crlf)
   (printout t "Corresponde a " ?herramienta crlf)
   (printout t "Este comando debe ser reemplazado por ajustes-mensuales" crlf)
   (halt))

(defrule VALOR_ACTIVOS::revisar-amortizaciones
   ?d <- (amortizacion (partida ?numero) (intangible ?intangible) (mes ?mes) (ano ?ano) (monto ?monto))
   =>
   (printout t "Hay una amortización por: " ?monto " en la partida: " ?numero crlf)
   (printout t "Corresponde a " ?intangible crlf)
   (printout t "Este comando debe ser reemplazado por ajustes-mensuales" crlf)
   (halt))

(defrule VALOR_ACTIVOS::warning-partida-repetida
   (ajustes-mensuales (partida ?numero1) (mes ?mes) (ano ?ano))
   (ajustes-mensuales (partida ?numero2) (mes ?mes) (ano ?ano))
   (test (neq ?numero1 ?numero2))
   =>
   (printout t crlf crlf "°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°" crlf)
   (printout t "Warning: Hay dos comandos de ajustes-mensuales para el mismo mes" crlf)
   (printout t "°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°" crlf)
   (printout t "--- PARTIDA 1 ------" crlf)
   (printout t ?numero1 tab ?mes tab ?ano crlf)
   (printout t "--- PARTIDA 2 ------" crlf)
   (printout t ?numero2 tab ?mes tab ?ano crlf)
   (printout t "°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°" crlf)
   (printout t "Vaya al archivo de facts y modifique una de las dos." crlf)
   (halt))

(defrule VALOR_ACTIVOS::generar-partida-de-depreciacion-ultima-cuota
   (empresa (nombre ?empresa))
   (ajustes-mensuales (mes ?mes) (ano ?ano) (partida ?numero))
   (registro-de-depreciacion (metodo-tributario ?tributario) (metodo ?metodo) (nombre-del-activo ?nombre) (cuenta-del-activo ?activo) (cuenta-del-pasivo ?pasivo) (cuenta-acumuladora ?acc) (mes-de-adquisicion ?mes-inicio) (ano-de-adquisicion ?ano-inicio) (valor-de-adquisicion ?valor-de-adquisicion) (meses-de-vida-util ?duracion) (mes-final ?mes-final) (ano-final ?ano-final) (ultima-cuota ?monto&:(> ?monto 0)))
   (test (= (to_serial_date 31 ?mes-final ?ano-final) (to_serial_date 31 ?mes ?ano)))
   =>
   (bind ?dia 31)
   (assert (partida (empresa ?empresa) (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion (str-cat "Por depreciacion en " ?mes " de " ?nombre)) (actividad depreciacion-herramienta)))
   (assert (cargo (tipo-de-documento depreciacion) (cuenta ?pasivo) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (monto ?monto) (glosa (str-cat por-depreciacion-de-herramienta- ?nombre))))
   (assert (abono (tipo-de-documento depreciacion-de-herramienta) (cuenta ?acc) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (monto ?monto) (glosa (str-cat por-reconocimiento-de-depreciacion-de- ?nombre))))
   (assert (ccm (folio na) (partida ?numero) (tipo-documento depreciacion-herramienta) (monto-total ?monto)))
   (printout t "-->depreciacion-auto.-activo-fijo " tab ?monto tab ?mes crlf)
   (printout k "<table><tbody>" crlf)
   (printout k "<tr><td> " ?nombre "</td> <td>" ?mes "</td><td> Depreciando por: </td> <td>" ?monto "</td></tr>" crlf)
   (printout k "</tbody></table>" crlf))

(defrule VALOR_ACTIVOS::generar-partida-de-depreciacion
   (empresa (nombre ?empresa))
   (ajustes-mensuales (mes ?mes) (ano ?ano) (partida ?numero))
   (registro-de-depreciacion (metodo-tributario ?tributario) (metodo ?metodo) (nombre-del-activo ?nombre) (cuenta-del-activo ?activo) (cuenta-del-pasivo ?pasivo) (cuenta-acumuladora ?acc) (mes-de-adquisicion ?mes-inicio) (ano-de-adquisicion ?ano-inicio) (valor-de-adquisicion ?valor-de-adquisicion) (meses-de-vida-util ?duracion) (mes-final ?mes-final) (ano-final ?ano-final) (depreciacion-mensual ?monto) (ultima-cuota ?cuenta&:(> ?cuenta 0)))
   (test (<= (to_serial_date 31 ?mes-inicio ?ano-inicio) (to_serial_date 31 ?mes ?ano)))
   (test (> (to_serial_date 31 ?mes-final ?ano-final) (to_serial_date 31 ?mes ?ano)))
   =>
   (bind ?dia 31)
   (assert (partida (empresa ?empresa) (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion (str-cat "Por depreciacion en " ?mes " de " ?nombre)) (actividad depreciacion-herramienta)))
   (assert (cargo (tipo-de-documento depreciacion) (cuenta ?pasivo) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (monto ?monto) (glosa (str-cat por-depreciacion-de-herramienta- ?nombre))))
   (assert (abono (tipo-de-documento depreciacion-de-herramienta) (cuenta ?acc) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (monto ?monto) (glosa (str-cat por-reconocimiento-de-depreciacion-de- ?nombre))))
   (assert (ccm (folio na) (partida ?numero) (tipo-documento depreciacion-herramienta) (monto-total ?monto)))
   (printout t "-->depreciacion-auto.-activo-fijo " tab ?monto tab ?mes crlf)
   (printout k "<table><tbody>" crlf)
   (printout k "<tr><td> " ?nombre "</td> <td>" ?mes "</td><td> Depreciando por: </td> <td>" ?monto "</td></tr>" crlf)
   (printout k "</tbody></table>" crlf))

(defrule VALOR_ACTIVOS::generar-partida-de-amortizacion-ultima-cuota
   (empresa (nombre ?empresa))
   (ajustes-mensuales (mes ?mes) (ano ?ano) (partida ?numero))
   (registro-de-amortizacion (metodo-tributario ?tributario) (metodo ?metodo) (nombre-del-activo ?intangible) (cuenta-del-activo ?activo) (cuenta-del-pasivo ?pasivo) (cuenta-acumuladora ?acc) (mes-de-adquisicion ?mes-inicio) (ano-de-adquisicion ?ano-inicio) (mes-final ?mes-final) (ano-final ?ano-final) (valor-de-adquisicion ?valor-de-adquisicion) (meses-de-vida-util ?duracion) (amortizacion-mensual ?monto) (ultima-cuota ?cuota&:(> ?cuota 0)))
   (test (= (to_serial_date 31 ?mes-final ?ano-final) (to_serial_date 31 ?mes ?ano)))
   =>
   (bind ?dia 31)
   (assert (partida (empresa ?empresa) (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion (str-cat "Por amortizacion en " ?mes " de " ?intangible)) (actividad amortizacion)))
   (assert (cargo (tipo-de-documento amortizacion) (cuenta ?pasivo) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (monto ?cuota) (glosa (str-cat por-amortizacion-de-intangible- ?intangible))))
   (assert (abono (tipo-de-documento amortizacion-de-intangible) (cuenta ?acc) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (monto ?cuota) (glosa (str-cat por-pago-de-amortizacion-de- ?intangible))))
   (assert (ccm (folio na) (partida ?numero) (tipo-documento amortizacion-intangible) (monto-total ?monto)))
   (printout t "-->am.auto-intangible " tab ?monto tab ?mes crlf)
   (printout k "<table><tbody>" crlf)
   (printout k "<tr><td> " ?intangible "</td> <td>" ?mes "</td><td> Amortizando por: </td> <td>" ?cuota "</td></tr>" crlf)
   (printout k "</tbody></table>" crlf))

(defrule VALOR_ACTIVOS::generar-partida-de-amortizacion
   (empresa (nombre ?empresa))
   (ajustes-mensuales (mes ?mes) (ano ?ano) (partida ?numero))
   (registro-de-amortizacion (metodo-tributario ?tributario) (metodo ?metodo) (nombre-del-activo ?intangible) (cuenta-del-activo ?activo) (cuenta-del-pasivo ?pasivo) (cuenta-acumuladora ?acc) (mes-de-adquisicion ?mes-inicio) (ano-de-adquisicion ?ano-inicio) (mes-final ?mes-final) (ano-final ?ano-final) (valor-de-adquisicion ?valor-de-adquisicion) (meses-de-vida-util ?duracion) (amortizacion-mensual ?monto) (ultima-cuota ?cuota&:(> ?cuota 0)))
   (test (<= (to_serial_date 31 ?mes-inicio ?ano-inicio) (to_serial_date 31 ?mes ?ano)))
   (test (> (to_serial_date 31 ?mes-final ?ano-final) (to_serial_date 31 ?mes ?ano)))
   =>
   (bind ?dia 31)
   (assert (partida (empresa ?empresa) (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion (str-cat "Por amortizacion en " ?mes " de " ?intangible)) (actividad amortizacion)))
   (assert (cargo (tipo-de-documento amortizacion) (cuenta ?pasivo) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (monto ?monto) (glosa (str-cat por-amortizacion-de-intangible- ?intangible))))
   (assert (abono (tipo-de-documento amortizacion-de-intangible) (cuenta ?acc) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (monto ?monto) (glosa (str-cat por-pago-de-amortizacion-de- ?intangible))))
   (assert (ccm (folio na) (partida ?numero) (tipo-documento amortizacion-intangible) (monto-total ?monto)))
   (printout t "-->am.auto-intangible " tab ?monto tab ?mes crlf)
   (printout k "<table><tbody>" crlf)
   (printout k "<tr><td> " ?intangible "</td> <td>" ?mes "</td><td> Amortizando por: </td> <td>" ?monto "</td></tr>" crlf)
   (printout k "</tbody></table>" crlf))

(defrule VALOR_ACTIVOS::ajustar-ultima-cuota
   (or  ?r <- (registro-de-depreciacion (valor-de-adquisicion ?total) (nombre-del-activo ?nombre) (meses-de-vida-util ?duracion) (depreciacion-mensual ?devaluacion-mensual) (ultima-cuota 0))
        ?r <- (registro-de-amortizacion (valor-de-adquisicion ?total) (nombre-del-activo ?nombre) (meses-de-vida-util ?duracion) (amortizacion-mensual ?devaluacion-mensual) (ultima-cuota 0)))
   =>
   (bind ?devaluacion-mensual-calculada (/ ?total ?duracion))
   (bind ?total-nuevo (* ?devaluacion-mensual ?duracion))
   (printout t crlf)
   (printout t "Ajuste de la última cuota" crlf)
   (printout t "--------------------------------------------------------" crlf)
   (printout t ?nombre crlf)
   (printout t "Valor de compra: $" ?total crlf)
   (printout t "Tiempo de Vida Util: " ?duracion " meses " crlf)
   (printout t "Devaluación Mensual que se usa: $" ?devaluacion-mensual crlf)
   (printout t "cálculo de devaluacion mensual: $" ?devaluacion-mensual-calculada crlf)
   (printout t "Se debe restar: " (- ?total ?total-nuevo) " de la última devaluación." crlf)
   (printout t "La última devaluacion mensual debe ser por $" (- ?devaluacion-mensual (- ?total-nuevo ?total)) crlf)
   (modify ?r (ultima-cuota (- ?devaluacion-mensual (- ?total-nuevo ?total))))
   (printout t "--------------------------------------------------------" crlf))

(defrule VALOR_ACTIVOS::warning-parametros-incorrectos
   (or  ?r <- (registro-de-depreciacion (valor-de-adquisicion ?total) (nombre-del-activo ?nombre) (ano-de-adquisicion ?ano-inicial) (mes-de-adquisicion ?mes-inicial) (ano-final ?ano-final) (mes-final ?mes-final) (meses-de-vida-util ?duracion) (depreciacion-mensual ?devaluacion-mensual) (ultima-cuota ?ultima-cuota))
        ?r <- (registro-de-amortizacion (valor-de-adquisicion ?total) (nombre-del-activo ?nombre) (ano-de-adquisicion ?ano-inicial) (mes-de-adquisicion ?mes-inicial) (ano-final ?ano-final) (mes-final ?mes-final) (meses-de-vida-util ?duracion) (amortizacion-mensual ?devaluacion-mensual) (ultima-cuota ?ultima-cuota)))
   (test (< ?ano-final ?ano-inicial))
   (test (= ?mes-final ?mes-inicial))
   (test (neq (* (- ?ano-final ?ano-inicial) 12) ?duracion))
   =>
   (printout t "==================================================================" crlf)
   (printout t "WARNING: Hay parámetros incorrectos." crlf)
   (printout t "El activo con problemas es: " ?nombre crlf)
   (printout t "Revise el archivo de valores-de-activo y modifique lo que sea necesario." crlf)
   (printout t "==================================================================" crlf)
   (halt))

(defrule VALOR_ACTIVOS::warning-ultima-cuota-debe-ser-menor
   (or  ?r <- (registro-de-depreciacion (valor-de-adquisicion ?total) (nombre-del-activo ?nombre) (meses-de-vida-util ?duracion) (depreciacion-mensual ?devaluacion-mensual) (ultima-cuota ?ultima-cuota))
        ?r <- (registro-de-amortizacion (valor-de-adquisicion ?total) (nombre-del-activo ?nombre) (meses-de-vida-util ?duracion) (amortizacion-mensual ?devaluacion-mensual) (ultima-cuota ?ultima-cuota)))
   (test (< ?devaluacion-mensual ?ultima-cuota))
   =>
   (printout t "==================================================================" crlf)
   (printout t "WARNING La última cuota no está correcta, pero el error está en otro lado." crlf)
   (printout t "El activo con problemas es: " ?nombre crlf)
   (printout t "La ultima cuota que se calcula por el sistema es: " ?ultima-cuota crlf)
   (printout t "Revise el archivo de valores-de-activo y modifique" crlf)
   (printout t "la devaluacion-mensual para que sea mayor que: " (/ ?total ?duracion) crlf)
   (printout t "==================================================================" crlf)
   (halt))

(defrule VALOR_ACTIVOS::revisar-registros-de-depreciacion
   (registro-de-depreciacion (metodo-tributario ?tributario) (metodo ?metodo) (nombre-del-activo ?nombre) (cuenta-del-activo ?activo) (cuenta-del-pasivo ?pasivo) (cuenta-acumuladora ?acc) (mes-de-adquisicion ?mes-inicio) (ano-de-adquisicion ?ano-inicio) (valor-de-adquisicion ?valor-de-adquisicion) (meses-de-vida-util ?duracion) (depreciacion-mensual ?monto))
   =>
   (printout t crlf)
   (printout t "=========================================" crlf)
   (printout t ?nombre crlf)
   (printout t "=========================================" crlf)
   (printout t ?metodo " de: " ?nombre crlf)
   (printout t "Metodo tributario es: " ?tributario crlf)
   (printout t "Cuentas son: " crlf)
   (printout t "Activo: " ?activo crlf)
   (printout t "Pasivo: " ?pasivo crlf)
   (printout t "Acumuladora: " ?acc crlf)
   (printout t "Fue adquirido en: " ?mes-inicio " de " ?ano-inicio " por $" ?valor-de-adquisicion crlf)
   (printout t "Perderá todo su valor en: " ?duracion " meses " crlf)
   (printout t "Mensualmente hay que depreciarlo en: $" ?monto crlf)
   (printout t "=========================================" crlf)
   (printout k "<table> <tbody>" crlf)
   (printout k "<tr><th>" ?nombre "</th></tr>" crlf)
   (printout k "<tr><td>" ?metodo " de: </td><td> " ?nombre " </td> </tr> " crlf)
   (printout k "<tr><td> Metodo tributario es: </td><td> " ?tributario "</td></tr>" crlf)
   (printout k "<tr><td> Cuentas son:  </td></tr>" crlf)
   (printout k "<tr><td>  Activo: </td><td> " ?activo "</td></tr>" crlf)
   (printout k "<tr><td>  Pasivo: </td><td>  " ?pasivo "</td></tr>" crlf)
   (printout k "<tr><td> Acumuladora:</td><td>  " ?acc "</td></tr>" crlf)
   (printout k "<tr><td> Fue adquirido en: </td> <td> " ?mes-inicio " de " ?ano-inicio " por $" ?valor-de-adquisicion "</td></tr>" crlf)
   (printout k "<tr><td> Perderá todo su valor en: </td><td> " ?duracion " meses </td></tr> " crlf)
   (printout k "<tr><td> Mensualmente hay que depreciarlo en: </td><td> $" ?monto "</td></tr>" crlf)
   (printout k "</tbody></table> " crlf))

(defrule VALOR_ACTIVOS::revisar-registros-de-amortizacion
   (registro-de-amortizacion (metodo-tributario ?tributario) (metodo ?metodo) (nombre-del-activo ?nombre) (cuenta-del-activo ?activo) (cuenta-del-pasivo ?pasivo) (cuenta-acumuladora ?acc) (mes-de-adquisicion ?mes-inicio) (ano-de-adquisicion ?ano-inicio) (valor-de-adquisicion ?valor-de-adquisicion) (meses-de-vida-util ?duracion) (amortizacion-mensual ?monto))
   =>
   (printout t crlf)
   (printout t "=========================================" crlf)
   (printout t ?nombre crlf)
   (printout t "=========================================" crlf)
   (printout t ?metodo " de: " ?nombre crlf)
   (printout t "Metodo tributario es: " ?tributario crlf)
   (printout t "Cuentas son: " crlf)
   (printout t "Activo: " ?activo crlf)
   (printout t "Pasivo: " ?pasivo crlf)
   (printout t "Acumuladora: " ?acc crlf)
   (printout t "Fue adquirido en: " ?mes-inicio " de " ?ano-inicio " por $ " ?valor-de-adquisicion crlf)
   (printout t "Perderá todo su valor en: " ?duracion " meses " crlf)
   (printout t "Mensualmente hay que amortizarlo en: $ " ?monto crlf)
   (printout t "=========================================" crlf)
   (printout k "<table> <tbody>" crlf)
   (printout k "<tr><th>" ?nombre "</th></tr>" crlf)
   (printout k "<tr><td>" ?metodo " de: </td><td> " ?nombre " </td> </tr> " crlf)
   (printout k "<tr><td> Metodo tributario es: </td><td> " ?tributario "</td></tr>" crlf)
   (printout k "<tr><td> Cuentas son:  </td></tr>" crlf)
   (printout k "<tr><td>  Activo: </td><td> " ?activo "</td></tr>" crlf)
   (printout k "<tr><td>  Pasivo: </td><td>  " ?pasivo "</td></tr>" crlf)
   (printout k "<tr><td> Acumuladora:</td><td>  " ?acc "</td></tr>" crlf)
   (printout k "<tr><td> Fue adquirido en: </td> <td> " ?mes-inicio " de " ?ano-inicio " por $" ?valor-de-adquisicion "</td></tr>" crlf)
   (printout k "<tr><td> Perderá todo su valor en: </td><td> " ?duracion " meses </td></tr> " crlf)
   (printout k "<tr><td> Mensualmente hay que depreciarlo en: </td><td> $" ?monto "</td></tr>" crlf)
   (printout k "</tbody></table> " crlf))

(defmodule PARTIDA
   (import MAIN deftemplate ?ALL))

(deffunction PARTIDA::mes_to_numero (?p0))

(deffunction PARTIDA::to_serial_date (?p0 ?p1 ?p2))

(deffunction PARTIDA::mes_to_numero
   (?mes)
   (switch ?mes
      (case enero then
         1)
      (case febrero then
         2)
      (case marzo then
         3)
      (case abril then
         4)
      (case mayo then
         5)
      (case junio then
         6)
      (case julio then
         7)
      (case agosto then
         8)
      (case septiembre then
         9)
      (case octubre then
         10)
      (case noviembre then
         11)
      (case diciembre then
         12)))

(deffunction PARTIDA::to_serial_date
   (?dia ?mes ?ano)
   (+ (* 10000 ?ano) (* 100 (mes_to_numero ?mes)) ?dia))

(defrule PARTIDA::inicio-modulo-partida
   (declare (salience 10000))
   =>
   (printout t "------------------- PARTIDA --------------------" crlf))

(defrule PARTIDA::inicio-kindle-l-
   (declare (salience 9000))
   =>
   (if (neq nil l)
      then
      (close l))
   (printout t "------------------- inicio-kindle-l ------------" crlf)
   (bind ?archivo (str-cat "./templates/index.html"))
   (open ?archivo l "w")
   (printout l "{% extends \"clips.html\" %}" crlf)
   (printout l "{% load static %}" crlf)
   (printout l "{% block clips %}" crlf)
   (printout t "------------------- fin-kindle-l ------------" crlf))

(defrule PARTIDA::inicio-kindle-k-partida-rules
   (declare (salience 10000))
   (empresa (nombre ?empresa))
   =>
   (if (neq nil k)
      then
      (close k))
   (if (neq nil h)
      then
      (close h))
   (bind ?archivo (str-cat "./doc/" ?empresa "/empresa.markdown"))
   (open ?archivo k "w")
   (printout k "--- " crlf)
   (printout k "permalink: /" ?empresa "/libro-diario " crlf)
   (printout k "layout: page" crlf)
   (printout k "--- " crlf)
   (printout k "" crlf)
   (printout k "Contabilidad para Necios® usa el siguiente código de colores para este documento." crlf)
   (printout k "<ul>" crlf)
   (printout k "<li><span style='background-color: red'>[    ]</span> mensaje de alerta. </li>" crlf)
   (printout k "<li><span style='background-color: lavender'>[    ]</span> partida revisada y resultado bueno. </li>" crlf)
   (printout k "<li><span style='background-color: lightyellow'>[    ]</span> cuenta mayor del activo </li>" crlf)
   (printout k "<li><span style='background-color: azure'>[    ]</span> cuenta mayor del pasivo </li>" crlf)
   (printout k "<li><span style='color: white; background-color: cornflowerblue'>[    ]</span> cuenta de patrimonio </li>" crlf)
   (printout k "<li><span style='background-color: gold'>[    ]</span> ganancia </li>" crlf)
   (printout k "<li><span style='color: white; background-color: black'>[    ]</span> pérdida </li>" crlf)
   (printout k "<li><span style='background-color: blanchedalmond'>[    ]</span> subtotales de la transacción </li>" crlf)
   (printout k "</ul>" crlf)
   {
   (bind ?archivo (str-cat "./doc/" ?empresa "/f29.markdown"))
   (open ?archivo h "w")
   (printout h "--- " crlf)
   (printout h "layout: page" crlf)
   (printout h "--- " crlf))

(defrule PARTIDA::fin
   (declare (salience -100))
   =>
   (close k)
   (printout l "{% endblock %}" crlf)
   (close l)
   (close h))

(defrule PARTIDA::inicio-de-modulo-partida
   (declare (salience 8000))
   (ticket (numero ?numero))
   =>
   (assert (cabeza ?numero)))

(defrule PARTIDA::encabezado-con-error-de-old
   (no)
   (cabeza ?numero)
   (revision (revisado true) (partida ?numero) (folio ?folio) (descripcion ?descripcion) (legal ?legal) (rcv ?rcv) (ccm ?ccm) (a-corregir ?a-corregir) (old ?old) (tipo ?tipo))
   (test (neq ?numero ?old))
   =>
   (printout t "Error en old partida " ?numero tab old ?old crlf)
   (halt))

(defrule PARTIDA::encabezado-sin-revision
   (cabeza ?numero)
   (not (revision (partida ?numero)))
   ?partida <- (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   (not (formulario-f29 (partida ?numero)))
   =>
   (printout t crlf crlf crlf)
   (printout t "------------------  X  -sin-revisar -----------------------------" crlf)
   (printout t "==================================================================" crlf)
   (printout t FECHA tab Parcial tab Debe tab Haber tab Descripcion crlf)
   (printout t "==================================================================" crlf)
   (printout t "Partida " ?numero crlf)
   (printout t ".................................................................." crlf)
   (printout t "Esta partida no tiene un registro de revisión: Vaya al archivo " crlf)
   (printout t "de revisiones y agregue una línea (revision (partida " ?numero "))" crlf)
   (printout t "coloque (revision (partida " ?numero ") (revisado false ))  si no " crlf)
   (printout t "ha podido efectuar la revisión." crlf)
   (printout t "------------------------------------------------------------------" crlf)
   (halt))

(defrule PARTIDA::encabezado-f29
   ?c <- (cabeza ?numero)
   ?partida <- (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   (exists
        (formulario-f29 (partida ?numero)))
   (revision (libro-diario ?libro-diario) (voucher ?voucher) (revisado ?revisado) (partida ?numero) (folio ?folio) (descripcion ?descripcion) (legal ?legal) (rcv ?rcv) (ccm ?ccm) (a-corregir ?a-corregir) (old ?old) (tipo ?tipo))
   (selecciones (imprimir-detalles ?imprimir-detalles))
   =>
   (retract ?c)
   (printout t crlf crlf crlf)
   (printout t "------------------  F  -F29 -----------------------------" crlf)
   (printout t "==================================================================" crlf)
   (printout t FECHA tab Parcial tab Debe tab Haber tab Descripcion crlf)
   (printout t "==================================================================" crlf)
   (printout t "Partida " ?numero crlf)
   (printout t ".................................................................." crlf)
   (printout k "<p style='page-break-before: always;'>&nbsp;</p>" crlf)
   (printout k "<br>" ?descripcion crlf)
   (printout k "<br>" ?legal crlf)
   (printout k "<p style='color: white; background-color: red'> " ?a-corregir "</p>" crlf)
   (if (eq ?imprimir-detalles true)
      then
      (if (neq ?old " ")
         then
         (printout k "- [x] antiguo número de partida: " ?old crlf))
      (if (neq ?voucher " ")
         then
         (printout k "- [x] voucher en ccm: " ?voucher crlf))
      (if (neq ?tipo " ")
         then
         (printout k "- [x] tipo de asiento: " ?tipo crlf))
      (if (neq ?folio " ")
         then
         (printout k "- [x] folio: " ?folio crlf))
      (if (neq ?legal " ")
         then
         (printout k "- [x] notas legales: " ?legal crlf))
      (if (neq ?descripcion " ")
         then
         (printout k "- [x] descripción: " ?descripcion crlf))
      (if (neq ?a-corregir " ")
         then
         (printout k "- [x] a corregir: " ?a-corregir crlf))
      (if (eq ?rcv true)
         then
         (printout k "- [x] rcv" crlf)
         else
         (printout k "- [ ] rcv" crlf))
      (if (eq ?libro-diario true)
         then
         (printout k "- [x] libro-diario" crlf)
         else
         (printout k "- [ ] libro-diario" crlf))
      (if (eq ?ccm true)
         then
         (printout k "- [x] ccm" crlf)
         else
         (printout k "- [ ] ccm" crlf))
      (if (eq ?revisado true)
         then
         (printout k "- [x] revisado" crlf)
         (printout k "![](../revisado.png)" crlf)
         else
         (printout k "- [ ] revisado" crlf)))
   (printout k "<p style='page-break-after: always;'>&nbsp;</p>" crlf)
   (printout k "<table style='background-color:cornsilk'>" crlf)
   (printout k "<thead><th colspan='6'>Partida " ?numero "</th></thead>" crlf)
   (printout k " <thead> <th> </th> <th> " Código " </th> <th>  " Valor " </th> <th> " Descripción " </th> </thead>" crlf)
   (printout k "<tbody>" crlf)
   (printout l crlf crlf)
   (printout l "<br> <br> <br> <br> <br> <br> " crlf)
   (printout l "<table  class='table-bordered' >" crlf)
   (printout l "<thead><th colspan='6'>Partida " ?numero "</th></thead>" crlf)
   (printout l " <thead> <th> </th> <th> " Código " </th> <th>  " Valor " </th> <th> " Descripción " </th> </thead>" crlf)
   (printout l "<tbody>" crlf)
   (printout h crlf crlf)
   (printout h "<br> <br> <br> <br> <br> <br> " crlf)
   (printout h "<table  class='table-bordered' >" crlf)
   (printout h "<thead><th colspan='6'>Partida " ?numero "</th></thead>" crlf)
   (printout h " <thead> <th> </th> <th> " Código " </th> <th>  " Valor " </th> <th> " Descripción " </th> </thead>" crlf)
   (printout h "<tbody>" crlf)
   (assert (fila ?numero)))

(defrule PARTIDA::encabezado-no-f29-rechazado
   (no)
   (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (actividad rechazo))
   (revision (rechazado true) (libro-diario ?libro-diario) (voucher ?voucher) (revisado ?revisado) (partida ?numero) (folio ?folio) (descripcion ?descripcion) (legal ?legal) (rcv ?rcv) (ccm ?ccm) (a-corregir ?a-corregir) (old ?old) (tipo ?tipo))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   (not (formulario-f29 (partida ?numero)))
   (selecciones (imprimir-detalles ?imprimir-detalles))
   =>
   (printout t crlf crlf crlf)
   (printout t voucher-sii tab ?voucher crlf)
   (printout t ?old "--------------  R -revisado- Folio: " ?folio tab "tipo " ?tipo crlf)
   (printout t " Legal. " ?legal crlf)
   (printout t "RCV. " ?rcv tab "CCM: " ?ccm crlf)
   (printout t " Descripcion: " ?descripcion crlf)
   (printout t " A corregir: " ?a-corregir crlf)
   (printout t "==================================================================" crlf)
   (printout t FECHA tab Parcial tab Debe tab Haber tab Descripcion crlf)
   (printout t "==================================================================" crlf)
   (printout t "Partida " ?numero crlf)
   (printout t ".................................................................." crlf)
   (printout k "<p style='page-break-before: always;'>&nbsp;</p>" crlf)
   (printout k "<br>" ?descripcion crlf)
   (printout k "<p style='color: white; background-color: red'> " ?a-corregir "</p>" crlf)
   (printout k "<br>" ?legal crlf)
   (printout k "dia " ?dia " mes " ?mes " ano " ?ano crlf)
   (if (eq ?imprimir-detalles true)
      then
      (printout k "- [x] partida rechazada en SII " crlf)
      (if (neq ?old " ")
         then
         (printout k "- [x] antiguo número de partida: " ?old crlf))
      (if (neq ?voucher " ")
         then
         (printout k "- [x] voucher en ccm: " ?voucher crlf))
      (if (neq ?tipo " ")
         then
         (printout k "- [x] tipo de asiento: " ?tipo crlf))
      (if (neq ?folio " ")
         then
         (printout k "- [x] folio: " ?folio crlf))
      (if (neq ?legal " ")
         then
         (printout k "- [x] notas legales: " ?legal crlf))
      (if (neq ?descripcion " ")
         then
         (printout k "- [x] descripción: " ?descripcion crlf))
      (if (neq ?a-corregir " ")
         then
         (printout k "- [x] a corregir: " ?a-corregir crlf))
      (if (eq ?rcv true)
         then
         (printout k "- [x] rcv" crlf)
         else
         (printout k "- [ ] rcv" crlf))
      (if (eq ?libro-diario true)
         then
         (printout k "- [x] libro-diario" crlf)
         else
         (printout k "- [ ] libro-diario" crlf))
      (if (eq ?ccm true)
         then
         (printout k "- [x] ccm" crlf)
         else
         (printout k "- [ ] ccm" crlf))
      (if (eq ?revisado true)
         then
         (printout k "- [x] revisado" crlf)
         (printout k "![](../revisado.png)" crlf)
         else
         (printout k "- [ ] revisado" crlf)))
   (printout k "<table>" crlf)
   (if (eq ?revisado true)
      then
      (printout k "<thead> <th style='background-color: lavender' colspan='6'>Partida " ?numero "</th></thead>" crlf)
      else
      (printout k "<thead > <th colspan='6'>Partida " ?numero "</th></thead>" crlf))
   (printout k "<tbody>" crlf)
   (printout l crlf crlf)
   (printout l "<br> <br> <br> <br> <br> <br> " crlf)
   (printout l "<br>" ?descripcion crlf)
   (printout l "<br style='background-color: red'>" ?a-corregir crlf)
   (printout l "<br>" ?legal crlf)
   (if (neq ?old " ")
      then
      (printout l "- [x] antiguo número de partida: " ?old crlf))
   (if (neq ?voucher " ")
      then
      (printout l "- [x] voucher en ccm: " ?voucher crlf))
   (if (neq ?tipo " ")
      then
      (printout l "- [x] tipo de asiento: " ?tipo crlf))
   (if (neq ?folio " ")
      then
      (printout l "- [x] folio: " ?folio crlf))
   (if (neq ?legal " ")
      then
      (printout l "- [x] notas legales: " ?legal crlf))
   (if (neq ?descripcion " ")
      then
      (printout l "- [x] descripción: " ?descripcion crlf))
   (if (neq ?a-corregir " ")
      then
      (printout l "- [x] a corregir: " ?a-corregir crlf))
   (if (eq ?rcv true)
      then
      (printout l "- [x] rcv" crlf)
      else
      (printout l "- [ ] rcv" crlf))
   (if (eq ?libro-diario true)
      then
      (printout l "- [x] libro-diario" crlf)
      else
      (printout l "- [ ] libro-diario" crlf))
   (if (eq ?ccm true)
      then
      (printout l "- [x] ccm" crlf)
      else
      (printout l "- [ ] ccm" crlf))
   (printout l "- [x] revisado" crlf)
   (printout l "![](../revisado.png)" crlf)
   (printout l "<table style='background-color:aqua' >" crlf)
   (printout l "<thead><th colspan='6'>Partida " ?numero "</th></thead>" crlf)
   (printout l "<tbody>" crlf)
   (assert (fila ?numero)))

(defrule PARTIDA::encabezado-no-f29
   ?c <- (cabeza ?numero)
   ?partida <- (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano))
   (revision (rechazado ?rechazado) (libro-diario ?libro-diario) (voucher ?voucher) (revisado ?revisado) (partida ?numero) (folio ?folio) (descripcion ?descripcion) (legal ?legal) (rcv ?rcv) (ccm ?ccm) (a-corregir ?a-corregir) (old ?old) (tipo ?tipo))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   (not (formulario-f29 (partida ?numero)))
   (selecciones (imprimir-detalles ?imprimir-detalles))
   =>
   (retract ?c)
   (printout t crlf crlf crlf)
   (printout t voucher-sii tab ?voucher crlf)
   (printout t ?old "--------------  R -revisado- Folio: " ?folio tab "tipo " ?tipo crlf)
   (printout t " Legal. " ?legal crlf)
   (printout t "RCV. " ?rcv tab "CCM: " ?ccm crlf)
   (printout t " Descripcion: " ?descripcion crlf)
   (printout t " A corregir: " ?a-corregir crlf)
   (printout t "==================================================================" crlf)
   (printout t FECHA tab Parcial tab Debe tab Haber tab Descripcion crlf)
   (printout t "==================================================================" crlf)
   (printout t "Partida " ?numero crlf)
   (printout t ".................................................................." crlf)
   (printout k "<p style='page-break-before: always;'>&nbsp;</p>" crlf)
   (printout k "<br>" ?descripcion crlf)
   (printout k "<p style='color: white; background-color: red'> " ?a-corregir "</p>" crlf)
   (printout k "<br>" ?legal crlf)
   (if (eq ?imprimir-detalles true)
      then
      (if (eq ?rechazado true)
         then
         (printout k "- [x] partida rechazada en SII " crlf))
      (if (neq ?old " ")
         then
         (printout k "- [x] antiguo número de partida: " ?old crlf))
      (if (neq ?voucher " ")
         then
         (printout k "- [x] voucher en ccm: " ?voucher crlf))
      (if (neq ?tipo " ")
         then
         (printout k "- [x] tipo de asiento: " ?tipo crlf))
      (if (neq ?folio " ")
         then
         (printout k "- [x] folio: " ?folio crlf))
      (if (neq ?legal " ")
         then
         (printout k "- [x] notas legales: " ?legal crlf))
      (if (neq ?descripcion " ")
         then
         (printout k "- [x] descripción: " ?descripcion crlf))
      (if (neq ?a-corregir " ")
         then
         (printout k "- [x] a corregir: " ?a-corregir crlf))
      (if (eq ?rcv true)
         then
         (printout k "- [x] rcv" crlf)
         else
         (printout k "- [ ] rcv" crlf))
      (if (eq ?libro-diario true)
         then
         (printout k "- [x] libro-diario" crlf)
         else
         (printout k "- [ ] libro-diario" crlf))
      (if (eq ?ccm true)
         then
         (printout k "- [x] ccm" crlf)
         else
         (printout k "- [ ] ccm" crlf))
      (if (eq ?revisado true)
         then
         (printout k "- [x] revisado" crlf)
         (printout k "![](../revisado.png)" crlf)
         else
         (printout k "- [ ] revisado" crlf)))
   (printout k "<table id='Partida-" ?numero "'>" crlf)
   (if (eq ?revisado true)
      then
      (printout k "<thead> <th style='background-color: lavender' colspan='6'>Partida " ?numero "</th></thead>" crlf)
      else
      (printout k "<thead > <th colspan='6'>Partida " ?numero "</th></thead>" crlf))
   (printout k "<tbody>" crlf)
   (printout l crlf crlf)
   (printout l "<br> <br> <br> <br> <br> <br> " crlf)
   (printout l "<br>" ?descripcion crlf)
   (printout l "<br style='background-color: red'>" ?a-corregir crlf)
   (printout l "<br>" ?legal crlf)
   (if (neq ?old " ")
      then
      (printout l "- [x] antiguo número de partida: " ?old crlf))
   (if (neq ?voucher " ")
      then
      (printout l "- [x] voucher en ccm: " ?voucher crlf))
   (if (neq ?tipo " ")
      then
      (printout l "- [x] tipo de asiento: " ?tipo crlf))
   (if (neq ?folio " ")
      then
      (printout l "- [x] folio: " ?folio crlf))
   (if (neq ?legal " ")
      then
      (printout l "- [x] notas legales: " ?legal crlf))
   (if (neq ?descripcion " ")
      then
      (printout l "- [x] descripción: " ?descripcion crlf))
   (if (neq ?a-corregir " ")
      then
      (printout l "- [x] a corregir: " ?a-corregir crlf))
   (if (eq ?rcv true)
      then
      (printout l "- [x] rcv" crlf)
      else
      (printout l "- [ ] rcv" crlf))
   (if (eq ?libro-diario true)
      then
      (printout l "- [x] libro-diario" crlf)
      else
      (printout l "- [ ] libro-diario" crlf))
   (if (eq ?ccm true)
      then
      (printout l "- [x] ccm" crlf)
      else
      (printout l "- [ ] ccm" crlf))
   (printout l "- [x] revisado" crlf)
   (printout l "![](../revisado.png)" crlf)
   (printout l "<table style='background-color:aqua' >" crlf)
   (printout l "<thead><th colspan='6'>Partida " ?numero "</th></thead>" crlf)
   (printout l "<tbody>" crlf)
   (assert (fila ?numero)))

(defrule PARTIDA::footer
   (declare (salience 60))
   ?fila <- (fila ?numero)
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (empresa (nombre ?empresa) (razon ?razon))
   (partida (numero ?numero) (proveedor ?proveedor) (archivo ?archivo) (debe ?debe) (haber ?haber) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion ?descripcion) (actividad ?actividad))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   (not (formulario-f29 (partida ?numero)))
   =>
   (retract ?fila)
   (printout t "------------------------------------------------------------------" crlf)
   (printout t tab tab ?debe tab ?haber tab "( " ?dia " de " ?mes tab ?ano tab " )" crlf)
   (printout t "==================================================================" crlf)
   (printout t ?razon crlf)
   (printout t "Partida 00" ?numero ": " ?descripcion crlf)
   (if (neq nil ?proveedor)
      then
      (printout t "       efectuado a " ?proveedor crlf))
   (printout t ?actividad crlf)
   (printout t crlf crlf)
   (printout k "<tr> <td> </td> <td style='background-color: blanchedalmond'> " ?debe " </td> <td style='background-color: blanchedalmond'> " ?haber "</td> </tr>" crlf)
   (if (neq ?haber ?debe)
      then
      (printout k "<tr> <td> </td> <td colspan='2' style='color: white; background-color: red'> At: No se cumple la igualdad tributaria </td> </tr>" crlf)
      (printout k "<tr> <td> </td> <td colspan='2' style='background-color: blanchedalmond'> La compilación del kernel está ahora detenida. Corrija posibles errores en las reglas de actividad_rules.clp o corrija ingresos de abonos y cargos a este asiento contable. </td> </tr>" crlf)
      (halt))
   (printout k "<tr><td colspan='4'> " ?razon "</td> </tr> " crlf)
   (printout k "<tr><td colspan='4'> ( " ?dia " de " ?mes tab ?ano tab " ) </td> </tr>" crlf)
   (printout k "<tr><td colspan='8'> Partida " ?numero ": " ?descripcion " </td></tr>" crlf)
   (if (neq nil ?proveedor)
      then
      (printout k "<tr> <td colspan='7'>efectuado a " ?proveedor " </td> </tr>" crlf))
   (printout k "<tr><td colspan = '8'> " ?actividad "</td> </tr>" crlf)
   (if (neq nil ?archivo)
      then
      (printout k "<tr style='background-color: aliceblue'> <td colspan = '8'> <img src='" ?archivo "'></td> </tr>" crlf))
   (printout k "</tbody>" crlf)
   (printout k "</table>" crlf)
   (printout l "<tr> <td> </td> <td> " ?debe " </td> <td> " ?haber "</td> </tr>" crlf)
   (printout l "<tr><td colspan='4'> " ?razon "</td> </tr> " crlf)
   (printout l "<tr><td colspan='4'> ( " ?dia " de " ?mes tab ?ano tab " ) </td> </tr>" crlf)
   (printout l "<tr><td colspan='8'> Partida " ?numero ": " ?descripcion " </td></tr>" crlf)
   (if (neq nil ?proveedor)
      then
      (printout l "<tr> <td colspan='7'>efectuado a " ?proveedor " </td> </tr>" crlf))
   (printout l "<tr><td colspan = '8'> " ?actividad "</td> </tr>" crlf)
   (if (neq nil ?archivo)
      then
      (printout l "<tr> <td colspan = '8'> <img src='" ?archivo "'></td> </tr>" crlf))
   (printout l "</tbody>" crlf)
   (printout l "</table>" crlf))

(defrule PARTIDA::footer-f29
   (declare (salience 60))
   ?fila <- (fila ?numero)
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (empresa (nombre ?empresa) (razon ?razon))
   (partida (numero ?numero) (proveedor ?proveedor) (archivo ?archivo) (debe ?debe) (haber ?haber) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion ?descripcion) (actividad ?actividad))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   (exists
        (formulario-f29 (partida ?numero)))
   =>
   (retract ?fila)
   (printout t "------------------------------------------------------------------" crlf)
   (printout t tab tab ?debe tab ?haber tab "( " ?dia " de " ?mes tab ?ano tab " )" crlf)
   (printout t "==================================================================" crlf)
   (printout t ?razon crlf)
   (printout t "Partida 00" ?numero ": " ?descripcion crlf)
   (if (neq nil ?proveedor)
      then
      (printout t "       efectuado a " ?proveedor crlf))
   (printout t ?actividad crlf)
   (printout t crlf crlf)
   (printout k "</tbody></table><table>" crlf)
   (printout k "<tbody>" crlf)
   (printout k "<tr> <td> </td> <td> " ?debe " </td> <td> " ?haber "</td> </tr>" crlf)
   (printout k "<tr><td colspan='4'> " ?razon "</td> </tr> " crlf)
   (printout k "<tr><td colspan='4'> ( " ?dia " de " ?mes tab ?ano tab " ) </td> </tr>" crlf)
   (printout k "<tr><td colspan='8'> Partida " ?numero ": " ?descripcion " </td></tr>" crlf)
   (if (neq nil ?proveedor)
      then
      (printout k "<tr> <td colspan='7'>efectuado a " ?proveedor " </td> </tr>" crlf))
   (printout k "<tr><td colspan = '8'> " ?actividad "</td> </tr>" crlf)
   (if (neq nil ?archivo)
      then
      (printout k "<tr> <td colspan = '8'> <img src='" ?archivo "'></td> </tr>" crlf))
   (printout k "</tbody>" crlf)
   (printout k "</table>" crlf)
   (printout l "<tr> <td> </td> <td> " ?debe " </td> <td> " ?haber "</td> </tr>" crlf)
   (printout l "<tr><td colspan='4'> " ?razon "</td> </tr> " crlf)
   (printout l "<tr><td colspan='4'> ( " ?dia " de " ?mes tab ?ano tab " ) </td> </tr>" crlf)
   (printout l "<tr><td colspan='8'> Partida " ?numero ": " ?descripcion " </td></tr>" crlf)
   (if (neq nil ?proveedor)
      then
      (printout k "<tr> <td colspan='7'>efectuado a " ?proveedor " </td> </tr>" crlf))
   (printout l "<tr><td colspan = '8'> " ?actividad "</td> </tr>" crlf)
   (if (neq nil ?archivo)
      then
      (printout l "<tr> <td colspan = '8'> <img src='" ?archivo "'></td> </tr>" crlf))
   (printout l "</tbody>" crlf)
   (printout l "</table>" crlf)
   (printout h "<tr> <td> </td> <td> " ?debe " </td> <td> " ?haber "</td> </tr>" crlf)
   (printout h "<tr><td colspan='4'> " ?razon "</td> </tr> " crlf)
   (printout h "<tr><td colspan='4'> ( " ?dia " de " ?mes tab ?ano tab " ) </td> </tr>" crlf)
   (printout h "<tr><td colspan='8'> Partida " ?numero ": " ?descripcion " </td></tr>" crlf)
   (if (neq nil ?proveedor)
      then
      (printout k "<tr> <td colspan='7'>efectuado a " ?proveedor " </td> </tr>" crlf))
   (printout h "<tr><td colspan = '8'> " ?actividad "</td> </tr>" crlf)
   (if (neq nil ?archivo)
      then
      (printout h "<tr> <td colspan = '8'> <img src='" ?archivo "'></td> </tr>" crlf))
   (printout h "</tbody>" crlf)
   (printout h "</table>" crlf))

(defrule PARTIDA::encabezado-de-registro-de-accionistas
   (exists
        (registro-de-accionistas))
   =>
   (printout t "==================================================================" crlf)
   (printout t "Registro de Acccionistas")
   (printout t ".................................................................." crlf)
   (printout t crlf))

(defrule PARTIDA::muestra-registro-de-accionistas
   ?f <- (registro-de-accionistas (nombre ?nombre) (mostrado-en-partida false))
   (accionista (nombre ?nombre) (domicilio ?domicilio) (rut ?rut) (mes ?mes) (ano ?ano) (numero-de-acciones ?numero-de-acciones) (valor-nominal ?valor-nominal))
   =>
   (printout t "Nombre:       " ?nombre crlf)
   (printout t "RUT:          " ?rut crlf)
   (printout t "Domicilio:    " ?domicilio crlf)
   (printout t "Ingreso:      " ?mes tab ?ano crlf)
   (printout t "# Acciones:   " ?numero-de-acciones crlf)
   (printout t "Valor Nominal " ?valor-nominal crlf)
   (printout t "--------------------------------" crlf)
   (printout t crlf)
   (modify ?f (mostrado-en-partida true)))

(defrule PARTIDA::muestra-codigo-de-formulario-f29-sin-acumulacion
   (declare (salience 65))
   (fila ?numero)
   ?partida <- (partida (numero ?numero) (debe ?debe) (haber ?haber))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (empresa (nombre ?empresa))
   ?f <- (formulario-f29 (partida ?numero) (descripcion ?descripcion) (codigo ?codigo) (valor ?valor) (mes ?mes) (ano ?ano) (mostrado-en-partida false))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date 1 ?mes ?ano)))
   =>
   (printout t "codigo..." ?codigo tab ?valor tab ?descripcion crlf)
   (printout k " <tr> <td> </td> <td> " ?codigo " </td> <td>  " ?valor " </td> <td> " ?descripcion " </td> </tr>" crlf)
   (printout l " <tr> <td> </td> <td> " ?codigo " </td> <td>  " ?valor " </td> <td> " ?descripcion " </td> </tr>" crlf)
   (printout h " <tr> <td> </td> <td> " ?codigo " </td> <td>  " ?valor " </td> <td> " ?descripcion " </td> </tr>" crlf)
   (modify ?f (mostrado-en-partida true)))

(defrule PARTIDA::muestra-codigo-de-formulario-f29-con-acumulacion-504
   (declare (salience 66))
   (fila ?numero)
   ?partida <- (partida (numero ?numero) (debe ?debe) (haber ?haber))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (empresa (nombre ?empresa))
   ?f <- (formulario-f29 (partida ?numero) (descripcion ?descripcion) (codigo ?codigo&:(eq ?codigo 504)) (valor ?valor) (mes ?mes) (ano ?ano) (mostrado-en-partida false))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date 1 ?mes ?ano)))
   =>
   (printout t "codigo..." ?codigo tab ?valor tab ?descripcion crlf)
   (printout k " <tr> <td> </td> <td> " ?codigo " </td> <td>  " ?valor " </td> <td> " ?descripcion " </td> </tr>" crlf)
   (printout l " <tr> <td> </td> <td> " ?codigo " </td> <td>  " ?valor " </td> <td> " ?descripcion " </td> </tr>" crlf)
   (printout h " <tr> <td> </td> <td> " ?codigo " </td> <td>  " ?valor " </td> <td> " ?descripcion " </td> </tr>" crlf)
   (modify ?partida (debe (+ ?debe ?valor)) (haber (+ ?haber 0)))
   (modify ?f (mostrado-en-partida true)))

(defrule PARTIDA::muestra-codigo-de-formulario-f29-con-acumulacion-511
   (declare (salience 66))
   (fila ?numero)
   ?partida <- (partida (numero ?numero) (debe ?debe) (haber ?haber))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (empresa (nombre ?empresa))
   ?f <- (formulario-f29 (partida ?numero) (descripcion ?descripcion) (codigo ?codigo&:(eq ?codigo 511)) (valor ?valor) (mes ?mes) (ano ?ano) (mostrado-en-partida false))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date 1 ?mes ?ano)))
   (test (> ?ano (- ?ano_top 1)))
   =>
   (printout t "codigo..." ?codigo tab ?valor tab ?descripcion crlf)
   (printout k " <tr> <td> </td> <td> " ?codigo " </td> <td>  " ?valor " </td> <td> " ?descripcion " </td> </tr>" crlf)
   (printout l " <tr> <td> </td> <td> " ?codigo " </td> <td>  " ?valor " </td> <td> " ?descripcion " </td> </tr>" crlf)
   (printout h " <tr> <td> </td> <td> " ?codigo " </td> <td>  " ?valor " </td> <td> " ?descripcion " </td> </tr>" crlf)
   (modify ?partida (debe (+ ?debe ?valor)) (haber (+ ?haber 0)))
   (modify ?f (mostrado-en-partida true)))

(defrule PARTIDA::muestra-codigo-de-formulario-f29-con-acumulacion-538
   (declare (salience 66))
   (fila ?numero)
   ?partida <- (partida (numero ?numero) (debe ?debe) (haber ?haber))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (empresa (nombre ?empresa))
   ?f <- (formulario-f29 (partida ?numero) (descripcion ?descripcion) (codigo ?codigo&:(eq ?codigo 538)) (valor ?valor) (mes ?mes) (ano ?ano) (mostrado-en-partida false))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date 1 ?mes ?ano)))
   =>
   (printout t "codigo..." ?codigo tab ?valor tab ?descripcion crlf)
   (printout k " <tr> <td> </td> <td> " ?codigo " </td> <td>  " ?valor " </td> <td> " ?descripcion " </td> </tr>" crlf)
   (printout l " <tr> <td> </td> <td> " ?codigo " </td> <td>  " ?valor " </td> <td> " ?descripcion " </td> </tr>" crlf)
   (printout h " <tr> <td> </td> <td> " ?codigo " </td> <td>  " ?valor " </td> <td> " ?descripcion " </td> </tr>" crlf)
   (modify ?partida (debe (- ?debe ?valor)) (haber (+ ?haber 0)))
   (modify ?f (mostrado-en-partida true)))

(defrule PARTIDA::muestra-codigo-de-formulario-f29-con-acumulacion-111
   (declare (salience 66))
   (fila ?numero)
   ?partida <- (partida (numero ?numero) (debe ?debe) (haber ?haber))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (empresa (nombre ?empresa))
   ?f <- (formulario-f29 (partida ?numero) (descripcion ?descripcion) (codigo ?codigo&:(eq ?codigo 111)) (valor ?valor) (mes ?mes) (ano ?ano) (mostrado-en-partida false))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date 1 ?mes ?ano)))
   =>
   (printout t "codigo..." ?codigo tab ?valor tab ?descripcion crlf)
   (printout k " <tr> <td> </td> <td> " ?codigo " </td> <td>  " ?valor " </td> <td> " ?descripcion " </td> </tr>" crlf)
   (printout l " <tr> <td> </td> <td> " ?codigo " </td> <td>  " ?valor " </td> <td> " ?descripcion " </td> </tr>" crlf)
   (printout h " <tr> <td> </td> <td> " ?codigo " </td> <td>  " ?valor " </td> <td> " ?descripcion " </td> </tr>" crlf)
   (modify ?partida (debe (- ?debe ?valor)) (haber (+ ?haber 0)))
   (modify ?f (mostrado-en-partida true)))

(defrule PARTIDA::muestra-codigo-de-formulario-f29-con-acumulacion-77
   (declare (salience 66))
   (fila ?numero)
   ?partida <- (partida (numero ?numero) (debe ?debe) (haber ?haber))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (empresa (nombre ?empresa))
   ?f <- (formulario-f29 (partida ?numero) (descripcion ?descripcion) (codigo ?codigo&:(eq ?codigo 77)) (valor ?valor) (mes ?mes) (ano ?ano) (mostrado-en-partida false))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date 1 ?mes ?ano)))
   =>
   (printout t "codigo..." ?codigo tab ?valor tab ?descripcion crlf)
   (printout k " <tr> <td> </td> <td> " ?codigo " </td> <td>  " ?valor " </td> <td> " ?descripcion " </td> </tr>" crlf)
   (printout l " <tr> <td> </td> <td> " ?codigo " </td> <td>  " ?valor " </td> <td> " ?descripcion " </td> </tr>" crlf)
   (printout h " <tr> <td> </td> <td> " ?codigo " </td> <td>  " ?valor " </td> <td> " ?descripcion " </td> </tr>" crlf)
   (modify ?partida (debe (+ ?debe 0)) (haber (+ ?haber ?valor)))
   (modify ?f (mostrado-en-partida true)))

(defrule PARTIDA::muestra-codigo-de-formulario-f22-recuadro-17
   (declare (salience 65))
   (fila ?numero)
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (empresa (nombre ?empresa))
   (formulario-f22 (partida ?numero) (descripcion ?descripcion) (codigo ?codigo) (valor ?valor) (ano ?ano))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date 1 abril ?ano)))
   (test (> ?ano (- ?ano_top 1)))
   =>
   (printout t "codigo..." ?codigo tab ?valor tab ?descripcion crlf)
   (printout k " <tr> <td> </td> <td> " ?codigo " </td> <td>  " ?valor " </td> <td> " ?descripcion " </td> </tr>" crlf)
   (printout l " <tr> <td> </td> <td> " ?codigo " </td> <td>  " ?valor " </td> <td> " ?descripcion " </td> </tr>" crlf))

(defrule PARTIDA::muestra-libro-mayor-resultados-subcuentas
   (declare (salience 65))
   (fila ?numero)
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (empresa (nombre ?empresa))
   ?partida <- (partida (numero ?numero) (debe ?debe) (haber ?haber) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion ?descripcion))
   ?padre <- (cuenta (liquidada false) (partida ?numero) (empresa ?empresa) (nombre ?nombre) (dia ?dia) (mes ?mes) (ano ?ano) (debe ?debe1) (haber ?haber1) (saldo ?saldo1) (grupo resultado))
   ?cuenta <- (cuenta (mostrada-en-partida false) (partida ?numero) (empresa ?empresa) (padre ?nombre) (dia ?dia) (mes ?mes) (ano ?ano) (nombre ?nombre2) (debe ?debe2) (haber ?haber2) (saldo ?saldo2) (grupo resultado) (origen ?origen))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   (test (neq 0 (+ ?debe1 ?haber1)))
   =>
   (modify ?cuenta (mostrada-en-partida true))
   (printout t tab ?saldo2 tab tab tab ?nombre2 # ?nombre crlf)
   (printout k "<tr> <td>" ?saldo2 " </td> <td colspan='7'> " ?nombre2 # ?nombre " </td></tr>" crlf)
   (printout l "<tr> <td>" ?saldo2 " </td> <td colspan='7'> " ?nombre2 # ?nombre " </td></tr>" crlf))

(defrule PARTIDA::muestra-libro-mayor-activos-subcuentas
   (declare (salience 65))
   (fila ?numero)
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (empresa (nombre ?empresa))
   ?partida <- (partida (numero ?numero) (debe ?debe) (haber ?haber) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion ?descripcion))
   ?padre <- (cuenta (liquidada false) (partida ?numero) (empresa ?empresa) (nombre ?nombre) (dia ?dia) (mes ?mes) (ano ?ano) (debe ?debe1) (haber ?haber1) (saldo ?saldo1) (grupo activo))
   ?cuenta <- (cuenta (mostrada-en-partida false) (partida ?numero) (empresa ?empresa) (padre ?nombre) (dia ?dia) (mes ?mes) (ano ?ano) (nombre ?nombre2) (debe ?debe2) (haber ?haber2) (saldo ?saldo2) (grupo activo) (origen ?origen))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   (test (neq 0 (+ ?debe1 ?haber1)))
   =>
   (modify ?cuenta (mostrada-en-partida true))
   (printout t tab ?saldo2 tab tab tab ?nombre2 # ?nombre crlf)
   (printout k "<tr><td>" ?saldo2 "</td> <td colspan='7'>" ?nombre2 # ?nombre "</td> </tr>" crlf)
   (printout l "<tr><td>" ?saldo2 "</td> <td colspan='7'>" ?nombre2 # ?nombre "</td> </tr>" crlf))

(defrule PARTIDA::muestra-libro-mayor-pasivos-subcuentas
   (declare (salience 64))
   (fila ?numero)
   (empresa (nombre ?empresa))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   ?partida <- (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (debe ?debe) (haber ?haber))
   ?padre <- (cuenta (liquidada false) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (nombre ?nombre) (debe ?debe1) (haber ?haber1) (saldo ?saldo1) (grupo pasivo))
   ?cuenta <- (cuenta (mostrada-en-partida false) (partida ?numero) (empresa ?empresa) (padre ?nombre) (nombre ?nombre2) (dia ?dia) (mes ?mes) (ano ?ano) (debe ?debe2) (haber ?haber2) (saldo ?saldo2) (origen ?origen))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   (test (neq 0 (+ ?debe1 ?haber1)))
   =>
   (modify ?cuenta (mostrada-en-partida true))
   (printout t tab ?saldo2 tab tab tab tab ?nombre2 # ?nombre crlf)
   (printout k "<tr> <td> " ?saldo2 " </td> <td> </td> <td colspan='7'> " ?nombre2 # ?nombre " </td> </tr> " crlf)
   (printout l "<tr> <td> " ?saldo2 " </td> <td> </td> <td colspan='7'> " ?nombre2 # ?nombre " </td> </tr> " crlf))

(defrule PARTIDA::muestra-libro-mayor-activos-mayores
   (declare (salience 63))
   (fila ?numero)
   (empresa (nombre ?empresa))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   ?partida <- (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (debe ?debe) (haber ?haber))
   ?cuenta <- (cuenta (mostrada-en-partida false) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (nombre ?nombre) (debe ?debe1) (haber ?haber1) (saldo ?saldo) (padre false) (grupo activo))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   (test (neq 0 (+ ?debe1 ?haber1)))
   =>
   (modify ?partida (debe (+ ?debe ?debe1)) (haber (+ ?haber ?haber1)))
   (modify ?cuenta (mostrada-en-partida true))
   (printout t tab tab ?debe1 tab ?haber1 tab "a<" ?nombre ">" crlf)
   (printout k "<tr style='background-color: lightyellow'>  <td> </td> <td> " ?debe1 "</td> <td> " ?haber1 "</td> <td colspan='2'> a[" ?nombre "] </td> </tr>" crlf)
   (printout l "<tr>  <td> </td> <td> " ?debe1 "</td> <td> " ?haber1 "</td> <td colspan='2'> a[" ?nombre "] </td> </tr>" crlf))

(defrule PARTIDA::muestra-de-resultados-gold
   (declare (salience 62))
   (fila ?numero)
   (empresa (nombre ?empresa))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   ?partida <- (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (debe ?debe) (haber ?haber))
   ?cuenta <- (cuenta (mostrada-en-partida false) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (nombre ?nombre) (debe ?debe1) (haber ?haber1) (saldo ?saldo1) (padre false) (grupo resultado))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   (test (> ?haber1 0))
   =>
   (modify ?partida (debe (+ ?debe ?debe1)) (haber (+ ?haber ?haber1)))
   (modify ?cuenta (mostrada-en-partida true))
   (printout t tab tab ?debe1 tab ?haber1 tab tab "r<" ?nombre ">" crlf)
   (printout k "<tr style='background-color: gold'>  <td> </td> <td>" ?debe1 " </td> <td> " ?haber1 "</td> <td> </td> <td> r[" ?nombre "] </td> </tr>" crlf)
   (printout l "<tr>  <td> </td> <td>" ?debe1 " </td> <td> " ?haber1 "</td> <td> </td> <td> r[" ?nombre "] </td> </tr>" crlf))

(defrule PARTIDA::muestra-de-resultados-black
   (declare (salience 62))
   (fila ?numero)
   (empresa (nombre ?empresa))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   ?partida <- (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (debe ?debe) (haber ?haber))
   ?cuenta <- (cuenta (mostrada-en-partida false) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (nombre ?nombre) (debe ?debe1) (haber ?haber1) (saldo ?saldo1) (padre false) (grupo resultado))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   (test (> ?debe1 0))
   =>
   (modify ?partida (debe (+ ?debe ?debe1)) (haber (+ ?haber ?haber1)))
   (modify ?cuenta (mostrada-en-partida true))
   (printout t tab tab ?debe1 tab ?haber1 tab tab "r<" ?nombre ">" crlf)
   (printout k "<tr style='color: white; background-color: black'>  <td> </td> <td>" ?debe1 " </td> <td> " ?haber1 "</td> <td> </td> <td> r[" ?nombre "] </td> </tr>" crlf)
   (printout l "<tr>  <td> </td> <td>" ?debe1 " </td> <td> " ?haber1 "</td> <td> </td> <td> r[" ?nombre "] </td> </tr>" crlf))

(defrule PARTIDA::muestra-cuentas-tributarias
   (declare (salience 62))
   (fila ?numero)
   (empresa (nombre ?empresa))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   ?partida <- (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (debe ?debe) (haber ?haber))
   ?cuenta <- (cuenta (mostrada-en-partida false) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (nombre ?nombre) (debe ?debe1) (haber ?haber1) (saldo ?saldo1) (padre false) (grupo tributario))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (modify ?cuenta (mostrada-en-partida true))
   (printout t tab extra-contable tab ?debe1 tab ?haber1 tab tab "t<" ?nombre ">" crlf)
   (printout k "<tr>  <td>extra-contable </td> <td> " ?debe1 "</td> <td>" ?haber1 "</td> <td> </td> <td> t[" ?nombre "] </td></tr> " crlf)
   (printout l "<tr>  <td>extra-contable </td> <td> " ?debe1 "</td> <td>" ?haber1 "</td> <td> </td> <td> t[" ?nombre "] </td></tr> " crlf))

(defrule PARTIDA::muestra-libro-mayor-pasivos-mayores
   (declare (salience 62))
   (fila ?numero)
   (empresa (nombre ?empresa))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   ?partida <- (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (debe ?debe) (haber ?haber))
   ?cuenta <- (cuenta (mostrada-en-partida false) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (nombre ?nombre) (debe ?debe1) (haber ?haber1) (saldo ?saldo1) (padre false) (grupo pasivo))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   (test (neq 0 (+ ?debe1 ?haber1)))
   =>
   (modify ?partida (debe (+ ?debe ?debe1)) (haber (+ ?haber ?haber1)))
   (modify ?cuenta (mostrada-en-partida true))
   (printout t tab tab ?debe1 tab ?haber1 tab tab "p<" ?nombre ">" crlf)
   (printout k "<tr style='background-color: azure'>  <td> </td> <td> " ?debe1 " </td> <td> " ?haber1 " </td> <td> </td><td> p[" ?nombre "] </td> </tr>" crlf)
   (printout l "<tr>  <td> </td> <td> " ?debe1 " </td> <td> " ?haber1 " </td> <td> </td><td> p[" ?nombre "] </td> </tr>" crlf))

(defrule PARTIDA::muestra-libro-patrimonio
   (declare (salience 61))
   (fila ?numero)
   (empresa (nombre ?empresa))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   ?partida <- (partida (numero ?numero) (debe ?debe) (haber ?haber) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion ?descripcion))
   ?cuenta <- (cuenta (mostrada-en-partida false) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (nombre ?nombre) (debe ?debe1) (haber ?haber1) (saldo ?saldo1) (padre false) (grupo patrimonio) (origen real))
   (test (> ?saldo1 0))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (modify ?partida (debe (+ ?debe ?debe1)) (haber (+ ?haber ?haber1)))
   (modify ?cuenta (mostrada-en-partida true))
   (printout t tab tab ?debe1 tab ?haber1 tab tab "k<" ?nombre ">" crlf)
   (printout k " <tr style='color: white; background-color: cornflowerblue' > <td> </td> <td> " ?debe1 " </td> <td>  " ?haber1 " </td> <td> </td> <td> k[" ?nombre "]</td> </tr>" crlf)
   (printout l " <tr> <td> </td> <td> " ?debe1 " </td> <td>  " ?haber1 " </td> <td> </td> <td> k[" ?nombre "]</td> </tr>" crlf))

(defmodule PEDIDO
   (import MAIN deftemplate ?ALL))

(defrule PEDIDO::inicio-kindle-k-pedido-rules
   (declare (salience 10000))
   (empresa (nombre ?empresa))
   =>
   (if (neq nil k)
      then
      (close k))
   (bind ?archivo (str-cat "./doc/" ?empresa "/pedidos.markdown"))
   (open ?archivo k "w")
   (printout k "--- " crlf)
   (printout k "layout: page" crlf)
   (printout k "--- " crlf))

(defrule PEDIDO::fin-pedido-rules
   (declare (salience -100))
   =>
   (close k))

(defrule PEDIDO::pedidos
   (declare (salience 10))
   (pedido (id ?id))
   =>
   (printout t "Pedido " ?id " encontrado" crlf)
   (printout k "<p>Pedido " ?id " encontrado </p>" crlf))

(defrule PEDIDO::materiales
   (compra-de-materiales (pedido ?id) (partida ?numero))
   (pedido (id ?id))
   =>
   (printout t "Materiales de Pedido " ?id " encontrado en partida " ?numero crlf)
   (printout k "<p> Materiales de Pedido " ?id " encontrado en partida </p> " ?numero crlf))

(defrule PEDIDO::compra
   (compra (pedido ?id) (partida ?numero))
   (pedido (id ?id))
   =>
   (printout t "Compra de Pedido " ?id " encontrado en partida " ?numero crlf)
   (printout k "<p> Compra de Pedido " ?id " encontrado en partida </p> " ?numero crlf))

(defrule PEDIDO::insumos
   (insumos (pedido ?id) (partida ?numero))
   (pedido (id ?id))
   =>
   (printout t "Insumo de Pedido " ?id " encontrado en partida " ?numero crlf)
   (printout k "<p> Insumo de Pedido " ?id " encontrado en partida </p> " ?numero crlf))

(defrule PEDIDO::inventario
   (inventario (pedido ?id) (partida ?numero))
   (pedido (id ?id))
   =>
   (printout t "Inventario de Pedido " ?id " encontrado en partida " ?numero crlf)
   (printout k "<p>Inventario de Pedido " ?id " encontrado en partida </p> " ?numero crlf))

(defmodule T
   (import MAIN deftemplate ?ALL))

(deffunction T::mes_to_numero (?p0))

(deffunction T::to_serial_date (?p0 ?p1 ?p2))

(deffunction T::mes_to_numero
   (?mes)
   (switch ?mes
      (case enero then
         1)
      (case febrero then
         2)
      (case marzo then
         3)
      (case abril then
         4)
      (case mayo then
         5)
      (case junio then
         6)
      (case julio then
         7)
      (case agosto then
         8)
      (case septiembre then
         9)
      (case octubre then
         10)
      (case noviembre then
         11)
      (case diciembre then
         12)))

(deffunction T::to_serial_date
   (?dia ?mes ?ano)
   (+ (* 10000 ?ano) (* 100 (mes_to_numero ?mes)) ?dia))

(defrule T::inicio-de-modulo-T
   (declare (salience 10000))
   =>
   (printout t "--módulo----------------------- T ----------------------" crlf)
   (set-strategy depth))

(defrule T::fin-modulo-T
   (declare (salience -10000))
   =>
   (printout t "--módulo----resumen------------ T ----------------------" crlf))

(defrule T::inicio-kindle-k-t-rules
   (declare (salience 10000))
   (empresa (nombre ?empresa))
   =>
   (bind ?archivo (str-cat "./doc/" ?empresa "/libro-mayor.markdown"))
   (open ?archivo k "w")
   (printout k "--- " crlf)
   (printout k "layout: page" crlf)
   (printout k "--- " crlf))

(defrule T::fin-kindle-k
   (declare (salience -100))
   =>
   (close k))

(defrule T::encabezado-cuentas-saldadas
   (cuenta (nombre ?nombre) (partida nil))
   (not (exists
             (cuenta (nombre ?nombre) (partida ~nil))))
   =>
   (assert (subtotales (cuenta ?nombre))))

(defrule T::encabezado
   ?cuenta <- (cuenta (partida ?Numero&nil) (nombre ?nombre) (nombre-sii ?nombre-sii) (descripcion ?descripcion) (origen real))
   (exists
        (cuenta (mostrado-en-t false) (nombre ?nombre) (partida ?Numero2&~?Numero) (saldo ?saldo)))
   =>
   (printout t crlf crlf crlf)
   (printout t ?nombre crlf)
   (printout t "---------------------------- recibida activo-fijo tipo-de-documento" crlf)
   (printout k "<table>" crlf)
   (printout k "<thead><th colspan='6'> " ?nombre "</th><th colspan='3'>" ?nombre-sii "</th></thead>" crlf)
   (printout k "<thead><th colspan='9'> " ?descripcion "</th></thead>" crlf)
   (printout k "<thead><th> voucher </th><th> partida </th><th> debe </th> <th> | </th> <th> haber </th><th> mes </th> <th>recibida</th> <th>activo-fijo</th> <th> tipo documento</th></thead>" crlf)
   (printout k "<tbody>" crlf)
   (assert (hacer ?nombre))
   (assert (subtotales (cuenta ?nombre))))

(defrule T::t-filas
   (empresa (nombre ?empresa))
   (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   ?hacer <- (hacer ?nombre)
   ?cuenta <- (cuenta (recibida ?recibida) (tipo-de-documento ?tipo-de-documento) (activo-fijo ?activo-fijo) (nombre ?nombre) (partida ?partida) (debe ?debe) (haber ?haber) (mes ?mes) (mostrado-en-t false) (origen real))
   (revision (partida ?partida) (voucher ?voucher))
   ?subtotales <- (subtotales (mostrado false) (totalizado false) (cuenta ?nombre) (debe ?total_debe) (haber ?total_haber))
   (test (and (neq nil ?partida) (> ?partida 0)))
   =>
   (printout t ?partida tab ?debe tab "|" tab ?haber tab ?mes tab ?recibida tab ?activo-fijo tab ?tipo-de-documento crlf)
   (printout k "<tr> <td>" ?voucher "</td> <td align='right'>" ?partida "</td> <td align='right'>" ?debe "</td> <td> | </td> <td align='right'> " ?haber "</td> <td>" ?mes "</td><td>" ?recibida "</td><td> " ?activo-fijo "</td><td> " ?tipo-de-documento "</td> </tr>" crlf)
   (modify ?cuenta (mostrado-en-t true))
   (modify ?subtotales (debe (+ ?total_debe ?debe)) (haber (+ ?total_haber ?haber))))

(defrule T::t-diferencia-deudora
   ?subtotales <- (subtotales (mostrado false) (haber ?haber) (debe ?debe) (acreedor ?acreedor) (deber ?deber) (totalizado false))
   (test (> ?debe ?haber))
   =>
   (bind ?diferencia (- ?debe ?haber))
   (modify ?subtotales (deber ?diferencia) (totalizado true) (acreedor 0)))

(defrule T::t-diferencia-acreedora
   ?subtotales <- (subtotales (haber ?haber) (debe ?debe) (acreedor ?acreedor) (deber ?deber) (totalizado false) (mostrado false))
   (test (< ?debe ?haber))
   =>
   (bind ?diferencia (- ?haber ?debe))
   (modify ?subtotales (acreedor ?diferencia) (totalizado true) (deber 0)))

(defrule T::t-footer-deudor
   ?subtotales <- (subtotales (haber ?haber) (debe ?debe) (totalizado true) (mostrado false))
   (test (> ?debe ?haber))
   =>
   (bind ?diferencia (- ?debe ?haber))
   (printout t "----------------------------" crlf)
   (printout t tab ?debe tab "|" tab ?haber crlf)
   (printout t tab "--------------------" crlf)
   (printout t "$" tab ?diferencia crlf)
   (printout k "<tr> <td></td> <td></td> <td align='right' >" ?debe "</td> <td>|</td> <td align='right'>" ?haber "</td></tr>" crlf)
   (printout k "<tr> <td></td> <td>$</td> <td align='right'>" ?diferencia "</td></tr>" crlf)
   (printout k "</tbody>" crlf)
   (printout k "</table>" crlf))

(defrule T::t-footer-acreedor
   ?subtotales <- (subtotales (haber ?haber) (debe ?debe) (totalizado true) (mostrado false))
   (test (< ?debe ?haber))
   =>
   (bind ?diferencia (- ?haber ?debe))
   (printout t "----------------------------" crlf)
   (printout t tab ?debe tab "|" tab ?haber crlf)
   (printout t tab "---------------------" crlf)
   (printout t tab tab "|" tab ?diferencia tab "$" crlf)
   (printout k "<tr> <td> </td><td></td> <td align='right'>" ?debe "</td> <td>|</td> <td align='right'>" ?haber "</td> </tr>" crlf)
   (printout k "<tr> <td> </td><td> </td> <td></td> <td>|</td> <td align='right'>" ?diferencia "</td> <td>$</td> </tr>" crlf)
   (printout k "</tbody>" crlf)
   (printout k "</table>" crlf))

(defmodule TA
   (import MAIN deftemplate ?ALL))

(deffunction TA::mes_to_numero (?p0))

(deffunction TA::to_serial_date (?p0 ?p1 ?p2))

(deffunction TA::mes_to_numero
   (?mes)
   (switch ?mes
      (case enero then
         1)
      (case febrero then
         2)
      (case marzo then
         3)
      (case abril then
         4)
      (case mayo then
         5)
      (case junio then
         6)
      (case julio then
         7)
      (case agosto then
         8)
      (case septiembre then
         9)
      (case octubre then
         10)
      (case noviembre then
         11)
      (case diciembre then
         12)))

(deffunction TA::to_serial_date
   (?dia ?mes ?ano)
   (+ (* 10000 ?ano) (* 100 (mes_to_numero ?mes)) ?dia))

(defrule TA::inicio-de-modulo-TA
   (declare (salience 9000))
   =>
   (printout t "--módulo----------------------- TA ----------------------" crlf)
   (set-strategy depth))

(defrule TA::fin-de-modulo-TA
   (declare (salience -10000))
   =>
   (printout t "--fin----------------------- TA ----------------------" crlf))

(defrule TA::eliminando-abonos
   (declare (salience 10000))
   ?a <- (abono)
   =>
   (retract ?a))

(defrule TA::eliminando-cargos
   (declare (salience 10000))
   ?a <- (cargo)
   =>
   (retract ?a))

(defrule TA::eliminando-inventario
   (declare (salience 10000))
   (no)
   ?a <- (inventario)
   =>
   (retract ?a))

(defrule TA::eliminando-liquidacion
   (declare (salience 10000))
   ?a <- (liquidacion)
   =>
   (retract ?a))

(defrule TA::eliminando-comando
   (declare (salience 10000))
   ?a <- (comando)
   =>
   (retract ?a))

(defrule TA::eliminando-partidas
   (declare (salience 10000))
   (no)
   ?a <- (partida)
   =>
   (retract ?a))

(defrule TA::gasto-sobre-compras
   (declare (salience 10000))
   ?a <- (gasto-sobre-compras)
   =>
   (retract ?a))

(defrule TA::ecuacion
   (declare (salience 10000))
   ?a <- (ecuacion)
   =>
   (retract ?a))

(defrule TA::calculando-subtotal-de-cuentas-liquidadas
   (empresa (nombre ?empresa))
   (no)
   (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   (cuenta (nombre ?nombre) (grupo patrimonio))
   ?cuenta <- (cuenta (nombre ?nombre) (liquidada true) (partida ?partida) (debe ?debe) (haber ?haber) (mostrado-en-t false) (origen ?origen))
   ?subtotales <- (subtotales (mostrado false) (totalizado false) (cuenta ?nombre) (debe ?total_debe) (haber ?total_haber))
   (test (and (neq nil ?partida) (> ?partida 0)))
   (test (or (> ?debe 0) (> ?haber 0)))
   =>
   (printout t ?partida tab ?debe tab "|" tab ?haber crlf)
   (modify ?cuenta (mostrado-en-t true))
   (modify ?subtotales (debe (+ ?total_debe ?debe)) (haber (+ ?total_haber ?haber))))

(defrule TA::encabezado
   (no)
   ?s <- (subtotales (cuenta ?nombre) (totalizado false))
   ?cuenta <- (cuenta (grupo patrimonio) (partida nil) (mostrado-en-t false) (nombre ?nombre) (origen real) (saldo ?saldo))
   (not (exists
             (subtotales (cuenta ?nombre) (totalizado true))))
   =>
   (printout t crlf crlf crlf)
   (printout t ?nombre crlf)
   (printout t "------- creando subtotales para " ?nombre " --------------------- " crlf)
   (retract ?s)
   (assert (subtotales (cuenta ?nombre)))
   (assert (hacer ?nombre)))

(defrule TA::encabezados-idpc
   (exists
        (cuenta (nombre idpc)))
   (not (exists
             (hacer idpc)))
   =>
   (printout t crlf crlf crlf)
   (printout t idpc crlf)
   (printout t "------- creando subtotales para " idpc " --------------------- " crlf)
   (assert (subtotales (cuenta idpc)))
   (assert (hacer idpc)))

(defrule TA::encabezados-utilidad
   ?s <- (subtotales (cuenta utilidad))
   (not (exists
             (subtotales (cuenta utilidad) (totalizado true))))
   (not (exists
             (hacer utilidad)))
   =>
   (printout t crlf crlf crlf)
   (printout t utilidad crlf)
   (printout t "------- creando subtotales para " utilidad " --------------------- " crlf)
   (retract ?s)
   (assert (subtotales (cuenta utilidad)))
   (assert (hacer utilidad)))

(defrule TA::encabezados-inventario
   ?s <- (subtotales (cuenta ?nombre))
   (not (exists
             (subtotales (cuenta ?nombre) (totalizado true))))
   (test (eq ?nombre inventario))
   (not (exists
             (hacer ?nombre)))
   =>
   (printout t crlf crlf crlf)
   (printout t utilidad crlf)
   (printout t "------- creando subtotales para " ?nombre " --------------------- " crlf)
   (retract ?s)
   (assert (subtotales (cuenta ?nombre)))
   (assert (hacer ?nombre)))

(defrule TA::encabezados-utilidad-tributaria
   (not (exists
             (subtotales (cuenta utilidad-tributaria) (totalizado true))))
   ?s <- (subtotales (cuenta utilidad-tributaria))
   (not (exists
             (hacer ?nombre)))
   =>
   (printout t crlf crlf crlf)
   (printout t utilidad-tributaria crlf)
   (printout t "------- creando subtotales para " utilidad-tributaria " --------------------- " crlf)
   (retract ?s)
   (assert (subtotales (cuenta utilidad-tributaria)))
   (assert (hacer utilidad-tributaria)))

(defrule TA::t-filas
   (empresa (nombre ?empresa))
   (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   ?hacer <- (hacer ?nombre)
   ?cuenta <- (cuenta (grupo ?grupo) (circulante ?circulante) (nombre ?nombre) (partida ?partida) (debe ?debe) (haber ?haber) (origen ?origen) (mostrado-en-t false))
   ?subtotales <- (subtotales (mostrado false) (totalizado false) (cuenta ?nombre) (debe ?total_debe) (haber ?total_haber))
   (test (and (neq nil ?partida) (> ?partida 0)))
   =>
   (printout t ?partida tab ?debe tab "|" tab ?haber tab ?grupo tab ?circulante tab ?origen crlf)
   (modify ?cuenta (mostrado-en-t true))
   (modify ?subtotales (debe (+ ?total_debe ?debe)) (haber (+ ?total_haber ?haber))))

(defrule TA::t-diferencia-deudora
   (cuenta (nombre ?nombre) (grupo ?grupo&:(or tributario patrimonio pasivo)))
   ?subtotales <- (subtotales (cuenta ?nombre) (mostrado false) (haber ?haber) (debe ?debe) (acreedor ?acreedor) (deber ?deber) (totalizado false))
   (test (> ?debe ?haber))
   =>
   (bind ?diferencia (- ?debe ?haber))
   (modify ?subtotales (deber ?diferencia) (totalizado true) (acreedor 0)))

(defrule TA::t-diferencia-acreedora
   (cuenta (nombre ?nombre) (grupo ?grupo&:(or patrimonio pasivo)))
   ?subtotales <- (subtotales (cuenta ?nombre) (haber ?haber) (debe ?debe) (acreedor ?acreedor) (deber ?deber) (totalizado false) (mostrado false))
   (test (< ?debe ?haber))
   =>
   (bind ?diferencia (- ?haber ?debe))
   (modify ?subtotales (acreedor ?diferencia) (totalizado true) (deber 0)))

(defrule TA::t-footer-deudor
   (cuenta (nombre ?nombre) (grupo ?grupo&:(or tributario patrimonio pasivo)))
   ?subtotales <- (subtotales (cuenta ?nombre) (haber ?haber) (debe ?debe) (totalizado true) (mostrado false))
   (test (> ?debe ?haber))
   =>
   (bind ?diferencia (- ?debe ?haber))
   (printout t "----------------------------" crlf)
   (printout t tab ?debe tab "|" tab ?haber crlf)
   (printout t tab "--------------------" crlf)
   (printout t "$" tab ?diferencia crlf)
   (modify ?subtotales (mostrado true)))

(defrule TA::t-footer-acreedor
   (cuenta (nombre ?nombre) (grupo ?grupo&:(or tributario patrimonio pasivo)))
   ?subtotales <- (subtotales (cuenta ?nombre) (haber ?haber) (debe ?debe) (totalizado true) (mostrado false))
   (test (< ?debe ?haber))
   =>
   (bind ?diferencia (- ?haber ?debe))
   (printout t "----------------------------" crlf)
   (printout t tab ?debe tab "|" tab ?haber crlf)
   (printout t tab "---------------------" crlf)
   (printout t tab tab "|" tab ?diferencia tab "$" crlf)
   (modify ?subtotales (mostrado true)))

(defmodule TOTAL
   (import MAIN deftemplate ?ALL))

(deffunction TOTAL::mes_to_numero (?p0))

(deffunction TOTAL::to_serial_date (?p0 ?p1 ?p2))

(deffunction TOTAL::mes_to_numero
   (?mes)
   (switch ?mes
      (case enero then
         1)
      (case febrero then
         2)
      (case marzo then
         3)
      (case abril then
         4)
      (case mayo then
         5)
      (case junio then
         6)
      (case julio then
         7)
      (case agosto then
         8)
      (case septiembre then
         9)
      (case octubre then
         10)
      (case noviembre then
         11)
      (case diciembre then
         12)))

(deffunction TOTAL::to_serial_date
   (?dia ?mes ?ano)
   (+ (* 10000 ?ano) (* 100 (mes_to_numero ?mes)) ?dia))

(defrule TOTAL::inicio-de-modulo-total
   (declare (salience 9000))
   (empresa (nombre ?empresa))
   =>
   (assert (totales (empresa ?empresa))))

(defrule TOTAL::subtotales-costos-de-ventas-no-mostrar-en-comprobacion
   ?s <- (subtotales (cuenta costos-de-ventas) (mostrar-en-comprobacion true))
   =>
   (modify ?s (mostrar-en-comprobacion false)))

(defrule TOTAL::sumando-activos
   (declare (salience 10000))
   (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   ?cuenta <- (cuenta (padre false) (origen real) (partida ?numero&:(neq nil ?numero)) (nombre ?nombre) (grupo activo) (debe ?debe) (haber ?haber) (totalizada-como-activo false))
   ?totales <- (totales (activos ?activos))
   (test (or (> ?debe 0) (> ?haber 0)))
   =>
   (bind ?saldo (- ?debe ?haber))
   (bind ?total (+ ?activos ?saldo))
   (modify ?totales (activos ?total))
   (modify ?cuenta (totalizada-como-activo true)))

(defrule TOTAL::sumando-activos-circulantes
   (declare (salience 8))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   ?cuenta <- (cuenta (padre false) (origen real) (partida ?numero&:(neq nil ?numero)) (nombre ?nombre) (grupo activo) (circulante true) (debe ?debe) (haber ?haber) (totalizada-como-activo-circulante false))
   ?totales <- (totales (activo-circulante ?activo-circulante))
   =>
   (bind ?saldo (- ?debe ?haber))
   (bind ?total (+ ?activo-circulante ?saldo))
   (modify ?totales (activo-circulante ?total))
   (modify ?cuenta (totalizada-como-activo-circulante true)))

(defrule TOTAL::sumando-activos-fijos
   (declare (salience 8))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   ?cuenta <- (cuenta (padre false) (origen real) (partida ?numero&:(neq nil ?numero)) (nombre ?nombre) (grupo activo) (circulante false) (debe ?debe) (haber ?haber) (totalizada-como-activo-fijo false))
   ?totales <- (totales (activo-fijo ?activo-fijo))
   =>
   (bind ?saldo (- ?debe ?haber))
   (bind ?total (+ ?activo-fijo ?saldo))
   (modify ?totales (activo-fijo ?total))
   (modify ?cuenta (totalizada-como-activo-fijo true)))

(defrule TOTAL::sumando-pasivos
   (declare (salience 8))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   ?cuenta <- (cuenta (padre false) (origen real) (partida ?numero&:(neq nil ?numero)) (nombre ?nombre) (grupo pasivo) (debe ?debe) (haber ?haber) (totalizada-como-pasivo false))
   ?totales <- (totales (pasivos ?pasivos))
   =>
   (bind ?saldo (- ?haber ?debe))
   (bind ?total (+ ?pasivos ?saldo))
   (modify ?totales (pasivos ?total))
   (modify ?cuenta (totalizada-como-pasivo true)))

(defrule TOTAL::sumando-pasivos-circulantes
   (declare (salience 8))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   ?cuenta <- (cuenta (padre false) (origen real) (partida ?numero&:(neq nil ?numero)) (nombre ?nombre) (grupo pasivo) (circulante true) (debe ?debe) (haber ?haber) (totalizada-como-pasivo-circulante false))
   ?totales <- (totales (pasivo-circulante ?pasivo-circulante))
   =>
   (bind ?saldo (- ?haber ?debe))
   (bind ?total (+ ?pasivo-circulante ?saldo))
   (modify ?totales (pasivo-circulante ?total))
   (modify ?cuenta (totalizada-como-pasivo-circulante true)))

(defrule TOTAL::sumando-pasivo-fijo
   (declare (salience 8))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   ?cuenta <- (cuenta (padre false) (origen real) (partida ?numero&:(neq nil ?numero)) (nombre ?nombre) (grupo pasivo) (circulante false) (debe ?debe) (haber ?haber) (totalizada-como-pasivo-fijo false))
   ?totales <- (totales (pasivo-fijo ?pasivo-fijo))
   =>
   (bind ?saldo (- ?haber ?debe))
   (bind ?total (+ ?pasivo-fijo ?saldo))
   (modify ?totales (pasivo-fijo ?total))
   (modify ?cuenta (totalizada-como-pasivo-fijo true)))

(defrule TOTAL::sumando-patrimonio
   (declare (salience 8))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   (empresa (nombre ?empresa))
   ?cuenta <- (cuenta (padre false) (empresa ?empresa) (nombre ?nombre) (partida ?numero&:(neq nil ?numero)) (totalizada-como-patrimonio false) (grupo patrimonio) (debe ?debe) (haber ?haber) (mostrado-en-t true) (origen real))
   ?totales <- (totales (empresa ?empresa) (patrimonio ?patrimonio))
   =>
   (bind ?saldo (- ?haber ?debe))
   (bind ?total (+ ?patrimonio ?saldo))
   (modify ?totales (patrimonio ?total))
   (modify ?cuenta (totalizada-como-patrimonio true)))

(defmodule TOTALA
   (import MAIN deftemplate ?ALL))

(deffunction TOTALA::mes_to_numero (?p0))

(deffunction TOTALA::to_serial_date (?p0 ?p1 ?p2))

(deffunction TOTALA::mes_to_numero
   (?mes)
   (switch ?mes
      (case enero then
         1)
      (case febrero then
         2)
      (case marzo then
         3)
      (case abril then
         4)
      (case mayo then
         5)
      (case junio then
         6)
      (case julio then
         7)
      (case agosto then
         8)
      (case septiembre then
         9)
      (case octubre then
         10)
      (case noviembre then
         11)
      (case diciembre then
         12)))

(deffunction TOTALA::to_serial_date
   (?dia ?mes ?ano)
   (+ (* 10000 ?ano) (* 100 (mes_to_numero ?mes)) ?dia))

(defrule TOTALA::inicio-de-modulo-total
   (declare (salience 10000))
   (empresa (nombre ?empresa))
   =>
   (assert (totales (empresa ?empresa))))

(defrule TOTALA::sumando-activos
   (declare (salience 9000))
   ?cuenta <- (cuenta (origen real) (partida ?numero) (nombre ?nombre) (grupo activo) (debe ?debe) (haber ?haber) (totalizada-como-activo false))
   ?totales <- (totales (activos ?activos))
   (test (neq ?debe ?haber))
   =>
   (bind ?saldo (- ?debe ?haber))
   (bind ?total (+ ?activos ?saldo))
   (modify ?totales (activos ?total))
   (modify ?cuenta (totalizada-como-activo true)))

(defrule TOTALA::sumando-activos-circulantes
   (declare (salience 8))
   (balance (dia ?top))
   (partida (numero ?numero) (dia ?dia))
   ?cuenta <- (cuenta (origen real) (partida ?numero) (nombre ?nombre) (grupo activo) (circulante true) (debe ?debe) (haber ?haber) (totalizada-como-activo-circulante false))
   ?totales <- (totales (activo-circulante ?activo-circulante))
   (test (>= ?top ?dia))
   (test (neq ?debe ?haber))
   =>
   (bind ?saldo (- ?debe ?haber))
   (bind ?total (+ ?activo-circulante ?saldo))
   (modify ?totales (activo-circulante ?total))
   (modify ?cuenta (totalizada-como-activo-circulante true)))

(defrule TOTALA::sumando-activos-fijos
   (declare (salience 8))
   (partida (numero ?numero) (dia ?dia))
   ?cuenta <- (cuenta (origen real) (partida ?numero) (nombre ?nombre) (grupo activo) (circulante false) (debe ?debe) (haber ?haber) (totalizada-como-activo-fijo false))
   ?totales <- (totales (activo-fijo ?activo-fijo))
   (test (neq ?debe ?haber))
   =>
   (bind ?saldo (- ?debe ?haber))
   (bind ?total (+ ?activo-fijo ?saldo))
   (modify ?totales (activo-fijo ?total))
   (modify ?cuenta (totalizada-como-activo-fijo true)))

(defrule TOTALA::sumando-pasivos
   (declare (salience 8))
   (balance (dia ?top))
   (partida (numero ?numero) (dia ?dia))
   ?cuenta <- (cuenta (origen real) (partida ?numero) (nombre ?nombre) (grupo pasivo) (debe ?debe) (haber ?haber) (totalizada-como-pasivo false))
   ?totales <- (totales (pasivos ?pasivos))
   (test (>= ?top ?dia))
   (test (neq ?debe ?haber))
   =>
   (bind ?saldo (- ?haber ?debe))
   (bind ?total (+ ?pasivos ?saldo))
   (modify ?totales (pasivos ?total))
   (modify ?cuenta (totalizada-como-pasivo true)))

(defrule TOTALA::sumando-pasivos-circulantes
   (declare (salience 8))
   (partida (numero ?numero) (dia ?dia))
   ?cuenta <- (cuenta (origen real) (partida ?numero) (nombre ?nombre) (grupo pasivo) (circulante true) (debe ?debe) (haber ?haber) (totalizada-como-pasivo-circulante false))
   ?totales <- (totales (pasivo-circulante ?pasivo-circulante))
   (test (neq ?haber ?debe))
   =>
   (bind ?saldo (- ?haber ?debe))
   (bind ?total (+ ?pasivo-circulante ?saldo))
   (modify ?totales (pasivo-circulante ?total))
   (modify ?cuenta (totalizada-como-pasivo-circulante true)))

(defrule TOTALA::sumando-pasivo-fijo
   (declare (salience 8))
   (partida (numero ?numero) (dia ?dia))
   ?cuenta <- (cuenta (origen real) (partida ?numero) (nombre ?nombre) (grupo pasivo) (circulante false) (debe ?debe) (haber ?haber) (totalizada-como-pasivo-fijo false))
   ?totales <- (totales (pasivo-fijo ?pasivo-fijo))
   =>
   (bind ?saldo (- ?haber ?debe))
   (bind ?total (+ ?pasivo-fijo ?saldo))
   (modify ?totales (pasivo-fijo ?total))
   (modify ?cuenta (totalizada-como-pasivo-fijo true)))

(defrule TOTALA::sumando-patrimonio
   (declare (salience 8))
   (empresa (nombre ?empresa))
   (partida (numero ?numero) (dia ?dia))
   ?cuenta <- (cuenta (empresa ?empresa) (nombre ?nombre) (totalizada-como-patrimonio false) (grupo patrimonio) (debe ?debe) (haber ?haber) (mostrado-en-t true) (origen real))
   ?totales <- (totales (empresa ?empresa) (patrimonio ?patrimonio))
   =>
   (bind ?saldo (- ?haber ?debe))
   (bind ?total (+ ?patrimonio ?saldo))
   (modify ?totales (patrimonio ?total))
   (modify ?cuenta (totalizada-como-patrimonio true)))

(defrule TOTALA::sumando-ganancias
   (declare (salience 8))
   (empresa (nombre ?empresa))
   (partida (numero ?numero) (dia ?dia))
   ?cuenta <- (cuenta (empresa ?empresa) (nombre ?nombre) (totalizada-como-patrimonio false) (de-resultado true) (debe ?debe) (haber ?haber) (origen real))
   ?totales <- (totales (empresa ?empresa) (resultados ?resultados))
   (test (> ?debe ?haber))
   =>
   (bind ?saldo (- ?debe ?haber))
   (bind ?total (+ ?resultados ?saldo))
   (modify ?totales (resultados ?total))
   (modify ?cuenta (totalizada-como-patrimonio true)))

(defrule TOTALA::sumando-perdidas
   (declare (salience 8))
   (empresa (nombre ?empresa))
   (partida (numero ?numero) (dia ?dia))
   ?cuenta <- (cuenta (empresa ?empresa) (nombre ?nombre) (totalizada-como-patrimonio false) (de-resultado true) (debe ?debe) (haber ?haber) (origen real))
   ?totales <- (totales (empresa ?empresa) (resultados ?resultados))
   (test (> ?haber ?debe))
   =>
   (bind ?saldo (- ?haber ?debe))
   (bind ?total (+ ?resultados ?saldo))
   (modify ?totales (resultados ?total))
   (modify ?cuenta (totalizada-como-patrimonio true)))

(defmodule TOTALB
   (import MAIN deftemplate ?ALL))

(deffunction TOTALB::mes_to_numero (?p0))

(deffunction TOTALB::to_serial_date (?p0 ?p1 ?p2))

(deffunction TOTALB::mes_to_numero
   (?mes)
   (switch ?mes
      (case enero then
         1)
      (case febrero then
         2)
      (case marzo then
         3)
      (case abril then
         4)
      (case mayo then
         5)
      (case junio then
         6)
      (case julio then
         7)
      (case agosto then
         8)
      (case septiembre then
         9)
      (case octubre then
         10)
      (case noviembre then
         11)
      (case diciembre then
         12)))

(deffunction TOTALB::to_serial_date
   (?dia ?mes ?ano)
   (+ (* 10000 ?ano) (* 100 (mes_to_numero ?mes)) ?dia))

(defrule TOTALB::inicio-de-modulo-total
   (declare (salience 10000))
   (empresa (nombre ?empresa))
   =>
   (assert (totales (empresa ?empresa))))

(defrule TOTALB::sumando-inventario
   (no)
   ?subtotal <- (subtotales (cuenta inventario) (debe ?debe-i) (haber ?haber-i))
   (cuenta (nombre inventario) (debe ?debe) (haber ?haber))
   =>
   (bind ?total-debe (+ ?debe-i ?debe))
   (bind ?total-haber (+ ?haber-i ?haber))
   (modify ?subtotal (debe ?total-debe) (haber ?total-haber)))

(defrule TOTALB::sumando-activos
   (declare (salience 9000))
   (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   ?cuenta <- (cuenta (padre false) (origen real) (partida ?numero) (nombre ?nombre) (grupo activo) (debe ?debe) (haber ?haber) (totalizada-como-activo false))
   ?totales <- (totales (activos ?activos))
   (test (neq ?debe ?haber))
   =>
   (bind ?saldo (- ?debe ?haber))
   (bind ?total (+ ?activos ?saldo))
   (modify ?totales (activos ?total))
   (modify ?cuenta (totalizada-como-activo true)))

(defrule TOTALB::sumando-activos-circulantes
   (declare (salience 8))
   (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   ?cuenta <- (cuenta (padre false) (origen real) (partida ?numero) (nombre ?nombre) (grupo activo) (circulante true) (debe ?debe) (haber ?haber) (totalizada-como-activo-circulante false))
   ?totales <- (totales (activo-circulante ?activo-circulante))
   (test (neq ?debe ?haber))
   =>
   (bind ?saldo (- ?debe ?haber))
   (bind ?total (+ ?activo-circulante ?saldo))
   (modify ?totales (activo-circulante ?total))
   (modify ?cuenta (totalizada-como-activo-circulante true)))

(defrule TOTALB::sumando-activos-fijos
   (declare (salience 8))
   (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   ?cuenta <- (cuenta (padre false) (origen real) (partida ?numero) (nombre ?nombre) (grupo activo) (circulante false) (debe ?debe) (haber ?haber) (totalizada-como-activo-fijo false))
   ?totales <- (totales (activo-fijo ?activo-fijo))
   (test (neq ?debe ?haber))
   =>
   (bind ?saldo (- ?debe ?haber))
   (bind ?total (+ ?activo-fijo ?saldo))
   (modify ?totales (activo-fijo ?total))
   (modify ?cuenta (totalizada-como-activo-fijo true)))

(defrule TOTALB::sumando-pasivos
   (declare (salience 8))
   (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   ?cuenta <- (cuenta (padre false) (origen real) (partida ?numero) (nombre ?nombre) (grupo pasivo) (debe ?debe) (haber ?haber) (totalizada-como-pasivo false))
   ?totales <- (totales (pasivos ?pasivos))
   (test (neq ?debe ?haber))
   =>
   (bind ?saldo (- ?haber ?debe))
   (bind ?total (+ ?pasivos ?saldo))
   (modify ?totales (pasivos ?total))
   (modify ?cuenta (totalizada-como-pasivo true)))

(defrule TOTALB::sumando-pasivos-circulantes
   (declare (salience 8))
   (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   ?cuenta <- (cuenta (padre false) (origen real) (partida ?numero) (nombre ?nombre) (grupo pasivo) (circulante true) (debe ?debe) (haber ?haber) (totalizada-como-pasivo-circulante false))
   ?totales <- (totales (pasivo-circulante ?pasivo-circulante))
   (test (neq ?haber ?debe))
   =>
   (bind ?saldo (- ?haber ?debe))
   (bind ?total (+ ?pasivo-circulante ?saldo))
   (modify ?totales (pasivo-circulante ?total))
   (modify ?cuenta (totalizada-como-pasivo-circulante true)))

(defrule TOTALB::sumando-pasivo-fijo
   (declare (salience 8))
   (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   ?cuenta <- (cuenta (padre false) (origen real) (partida ?numero) (nombre ?nombre) (grupo pasivo) (circulante false) (debe ?debe) (haber ?haber) (totalizada-como-pasivo-fijo false))
   ?totales <- (totales (pasivo-fijo ?pasivo-fijo))
   =>
   (bind ?saldo (- ?haber ?debe))
   (bind ?total (+ ?pasivo-fijo ?saldo))
   (modify ?totales (pasivo-fijo ?total))
   (modify ?cuenta (totalizada-como-pasivo-fijo true)))

(defrule TOTALB::sumando-patrimonio
   (declare (salience 8))
   (empresa (nombre ?empresa))
   (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   ?cuenta <- (cuenta (padre false) (empresa ?empresa) (nombre ?nombre) (totalizada-como-patrimonio false) (grupo patrimonio) (debe ?debe) (haber ?haber) (mostrado-en-t true) (origen real))
   ?totales <- (totales (empresa ?empresa) (patrimonio ?patrimonio))
   =>
   (bind ?saldo (- ?haber ?debe))
   (bind ?total (+ ?patrimonio ?saldo))
   (modify ?totales (patrimonio ?total))
   (modify ?cuenta (totalizada-como-patrimonio true)))

(defrule TOTALB::sumando-ganancias
   (declare (salience 8))
   (empresa (nombre ?empresa))
   (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   ?cuenta <- (cuenta (padre false) (empresa ?empresa) (nombre ?nombre) (totalizada-como-patrimonio false) (de-resultado true) (debe ?debe) (haber ?haber) (origen real))
   ?totales <- (totales (empresa ?empresa) (resultados ?resultados))
   (test (> ?debe ?haber))
   =>
   (bind ?saldo (- ?debe ?haber))
   (bind ?total (+ ?resultados ?saldo))
   (modify ?totales (resultados ?total))
   (modify ?cuenta (totalizada-como-patrimonio true)))

(defrule TOTALB::sumando-perdidas
   (declare (salience 8))
   (empresa (nombre ?empresa))
   (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   ?cuenta <- (cuenta (padre false) (empresa ?empresa) (nombre ?nombre) (totalizada-como-patrimonio false) (de-resultado true) (debe ?debe) (haber ?haber) (origen real))
   ?totales <- (totales (empresa ?empresa) (resultados ?resultados))
   (test (> ?haber ?debe))
   =>
   (bind ?saldo (- ?haber ?debe))
   (bind ?total (+ ?resultados ?saldo))
   (modify ?totales (resultados ?total))
   (modify ?cuenta (totalizada-como-patrimonio true)))

(defmodule COMPROBACION
   (import MAIN deftemplate ?ALL))

(deffunction COMPROBACION::mes_to_numero (?p0))

(deffunction COMPROBACION::to_serial_date (?p0 ?p1 ?p2))

(deffunction COMPROBACION::mes_to_numero
   (?mes)
   (switch ?mes
      (case enero then
         1)
      (case febrero then
         2)
      (case marzo then
         3)
      (case abril then
         4)
      (case mayo then
         5)
      (case junio then
         6)
      (case julio then
         7)
      (case agosto then
         8)
      (case septiembre then
         9)
      (case octubre then
         10)
      (case noviembre then
         11)
      (case diciembre then
         12)))

(deffunction COMPROBACION::to_serial_date
   (?dia ?mes ?ano)
   (+ (* 10000 ?ano) (* 100 (mes_to_numero ?mes)) ?dia))

(defrule COMPROBACION::inicio-de-modulo-comprobacion
   (declare (salience 10000))
   =>
   (set-strategy breadth))

(defrule COMPROBACION::inicio-kindle-k-comprobacion-rules
   (declare (salience 10000))
   (empresa (nombre ?empresa))
   =>
   (bind ?archivo (str-cat "./doc/" ?empresa "/comprobacion.markdown"))
   (open ?archivo k "w")
   (printout k "--- " crlf)
   (printout k "layout: page" crlf)
   (printout k "--- " crlf)
   (printout k "<script>

$('* div').each(function () {   
    var item = $(this).text();
    var num = Number(item).toLocaleString('en');

    if (Number(item) < 0) {
        num = num.replace('-', '');
        $(this).addClass('negMoney');
    } else {
        $(this).addClass('enMoney');
    }

    $(this).text(num);
});
</script>
 " crlf))

(defrule COMPROBACION::fin-kindle-k
   (declare (salience -10000))
   =>
   (close k))

(defrule COMPROBACION::balance-encabezado
   (declare (salience -7000))
   (empresa (nombre ?empresa))
   (balance (dia ?dia) (mes ?mes) (ano ?ano))
   =>
   (printout t crlf crlf "           B A L A N C E  DE COMPROBACION DE SUMAS Y SALDOS " crlf)
   (printout t tab tab SUMAS tab tab "|" tab SALDOS crlf)
   (printout t tab tab DEBE tab HABER tab "|" tab DEBER tab ACREEDOR crlf)
   (printout t "-----------------------------------------------------------------------------------" crlf)
   (printout k crlf crlf)
   (printout k "Solo se consideran las transacciones hasta el día " ?dia tab ?mes "." crlf)
   (printout k "Cifras en pesos." crlf)
   (printout k "NO se han practicado liquidaciones, por lo que SÍ se muestran cuentas nominales" crlf)
   (printout k "<table rules='groups'>" crlf)
   (printout k "<style> tfoot {  border: 3px solid black;  } </style> " crlf)
   (printout k "<thead><th colspan='7'> B A L A N C E  DE COMPROBACION DE SUMAS Y DE SALDOS </th> </thead>" crlf)
   (printout k "<thead> <th colspan='7'> " ?empresa "</th></thead>" crlf)
   (printout k "<thead> <th> </th> <th align='center' colspan= '2'>SUMAS</th> <th>|</th> <th align='center' colspan='2'>SALDOS</th> <th rowspan='2' > Errores </th> </thead>" crlf)
   (printout k "<thead> <th></th>  <th align='center'>DEBE</th> <th align='center'>HABER</th> <th>|</th> <th align='center'>DEBER</th> <th align='center'>ACREEDOR</th> <th>A Corregir </th> </thead>" crlf)
   (printout k "<tbody>" crlf))

(defrule COMPROBACION::balance-filas-sin-revisar
   (declare (salience -8000))
   (cuenta (nombre ?cuenta) (mostrar-en-comprobacion true))
   (cuenta (nombre ?cuenta) (nombre-sii ?nombre-sii))
   ?subtotal <- (subtotales (mostrado false) (cuenta ?cuenta) (debe ?debe) (haber ?haber) (deber ?deber) (acreedor ?acreedor))
   =>
   (modify ?subtotal (mostrado true))
   (if (or (> ?debe 0) (> ?haber 0))
      then
      (printout t tab ?debe tab ?haber tab "|" tab ?deber tab ?acreedor tab ?cuenta crlf)
      (printout k "<tr style=' background: #fff; border: 1px solid red;'>" crlf)
      (printout k "<td>" ?nombre-sii "<small>" ?cuenta "</small></td> <td align='right'>" ?debe "</td> <td align='right'>" ?haber "</td> <td> | </td> <td align='right'> " ?deber "</td> <td align='right'>" ?acreedor "</td> </tr>" crlf)))

(defrule COMPROBACION::balance-filas-revisadas-que-requieren-correcciones
   (declare (salience -8000))
   (cuenta (nombre ?cuenta) (mostrar-en-comprobacion true))
   (cuenta (nombre ?cuenta) (nombre-sii ?nombre-sii))
   ?subtotal <- (subtotales (mostrado false) (cuenta ?cuenta) (debe ?debe) (haber ?haber) (deber ?deber) (acreedor ?acreedor))
   (revision (cuenta ?cuenta) (revisado false) (a-corregir ?a-corregir))
   =>
   (modify ?subtotal (mostrado true))
   (if (or (> ?debe 0) (> ?haber 0))
      then
      (printout t tab ?debe tab ?haber tab "|" tab ?deber tab ?acreedor tab ?cuenta crlf)
      (printout k "<tr>" crlf)
      (printout k "<td>" ?nombre-sii "<small>" ?cuenta "</small> </td> <td align='right'>" ?debe "</td> <td align='right'>" ?haber "</td> <td> | </td> <td align='right'> " ?deber "</td> <td align='right'>" ?acreedor "</td> " crlf)
      (printout k "<td colspan='2' style=' background: #faa; border: 1px solid red;'>" ?a-corregir " </td>" crlf)
      (printout k "</tr>" crlf)))

(defrule COMPROBACION::balance-filas-revisadas-que-no-requieren-correcciones
   (declare (salience -8000))
   (cuenta (nombre ?cuenta) (mostrar-en-comprobacion true))
   (cuenta (nombre ?cuenta) (nombre-sii ?nombre-sii))
   ?subtotal <- (subtotales (mostrado false) (cuenta ?cuenta) (debe ?debe) (haber ?haber) (deber ?deber) (acreedor ?acreedor))
   (revision (cuenta ?cuenta) (revisado true))
   =>
   (modify ?subtotal (mostrado true))
   (if (or (> ?debe 0) (> ?haber 0))
      then
      (printout t tab ?debe tab ?haber tab "|" tab ?deber tab ?acreedor tab ?cuenta crlf)
      (printout k "<tr>" crlf)
      (printout k "<td>" ?nombre-sii "<small>" ?cuenta "</small></td> <td align='right'>" ?debe "</td> <td align='right'>" ?haber "</td> <td> | </td> <td align='right'> " ?deber "</td> <td align='right'>" ?acreedor "</td>" crlf)
      (printout k "</tr>" crlf)))

(defrule COMPROBACION::balance-subtotales
   (declare (salience -8000))
   (cuenta (nombre ?cuenta) (mostrar-en-comprobacion true))
   ?subtotales <- (subtotales (mostrado true) (mostrado-en-resumen false) (cuenta ?cuenta) (debe ?debe) (haber ?haber) (deber ?deber) (acreedor ?acreedor))
   ?totales <- (totales (debe ?total_debe) (haber ?total_haber) (deber ?total_deber) (acreedor ?total_acreedor))
   =>
   (modify ?totales (debe (+ ?total_debe ?debe)) (haber (+ ?total_haber ?haber)) (deber (+ ?total_deber ?deber)) (acreedor (+ ?total_acreedor ?acreedor)))
   (modify ?subtotales (mostrado-en-resumen true))
   (assert (hacer-balance-footer)))

(defrule COMPROBACION::balance-footer
   (declare (salience -9000))
   ?comando <- (hacer-balance-footer)
   (totales (debe ?debe) (haber ?haber) (deber ?deber) (activos ?activos) (activo-circulante ?activo-circulante) (activo-fijo ?activo-fijo) (pasivos ?pasivos) (pasivo-circulante ?pasivo-circulante) (pasivo-fijo ?pasivo-fijo) (patrimonio ?patrimonio) (acreedor ?acreedor))
   =>
   (bind ?patrimonio_pasivo (+ ?patrimonio ?pasivos))
   (printout t tab "......................................................." crlf)
   (printout t tab ?debe tab ?haber tab "|" tab ?deber tab ?acreedor tab activos= ?activos crlf)
   (printout t "-----------------------------------------------------------------------------------" crlf)
   (printout k "</tbody>" crlf)
   (printout k "<tfoot>" crlf)
   (printout k "<tr> <td></td> <td align='right'> <div>" ?debe "</div></td> <td align='right'> <div>" ?haber "</div></td><td> | </td> <td align='right'> <div>" ?deber "</div></td> <td align='right'> <div>" ?acreedor "</div></td> </tr>" crlf)
   (printout k "</tfoot>" crlf)
   (printout k "</table>" crlf)
   (retract ?comando))

(defmodule COMPROBACIONA
   (import MAIN deftemplate ?ALL))

(deffunction COMPROBACIONA::mes_to_numero (?p0))

(deffunction COMPROBACIONA::to_serial_date (?p0 ?p1 ?p2))

(deffunction COMPROBACIONA::mes_to_numero
   (?mes)
   (switch ?mes
      (case enero then
         1)
      (case febrero then
         2)
      (case marzo then
         3)
      (case abril then
         4)
      (case mayo then
         5)
      (case junio then
         6)
      (case julio then
         7)
      (case agosto then
         8)
      (case septiembre then
         9)
      (case octubre then
         10)
      (case noviembre then
         11)
      (case diciembre then
         12)))

(deffunction COMPROBACIONA::to_serial_date
   (?dia ?mes ?ano)
   (+ (* 10000 ?ano) (* 100 (mes_to_numero ?mes)) ?dia))

(defrule COMPROBACIONA::inicio-de-modulo-comprobacion_a
   (declare (salience 10000))
   =>
   (printout t "--modulo--------------- COMPROBACIONA -------------------" crlf))

(defrule COMPROBACIONA::balance-encabezado
   (declare (salience -7000))
   (empresa (nombre ?empresa))
   (balance (dia ?dia) (mes ?mes) (ano ?ano))
   =>
   (printout t crlf crlf)
   (printout t "<br> <br> <br> <br> <br> <br> " crlf)
   (printout t "Solo se consideran las transacciones hasta el día " ?dia tab ?mes "." crlf)
   (printout t "Cifras en pesos." crlf)
   (printout t "No se han practicado liquidaciones, por lo que se muestran cuentas nominales" crlf)
   (printout t crlf crlf "           B A L A N C E  DE COMPROBACION AJUSTADA DE SUMAS Y SALDOS mes: " ?mes crlf)
   (printout t tab tab SUMAS tab tab "|" tab SALDOS crlf)
   (printout t tab tab DEBE tab HABER tab "|" tab DEBER tab ACREEDOR crlf)
   (printout t "---------------------------------------------------------------------" crlf))

(defrule COMPROBACIONA::balance-filas
   (declare (salience -8000))
   ?subtotal <- (subtotales (mostrado false) (cuenta ?cuenta) (debe ?debe) (haber ?haber) (deber ?deber) (acreedor ?acreedor))
   =>
   (modify ?subtotal (mostrado true))
   (printout t tab tab ?debe tab ?haber tab "|" tab ?deber tab ?acreedor tab ?cuenta crlf))

(defrule COMPROBACIONA::balance-genera-totales
   (declare (salience -8000))
   ?subtotales <- (subtotales (mostrado-en-resumen false) (cuenta ?cuenta) (debe ?debe) (haber ?haber) (deber ?deber) (acreedor ?acreedor))
   ?totales <- (totales (debe ?total_debe) (haber ?total_haber) (deber ?total_deber) (acreedor ?total_acreedor))
   =>
   (modify ?totales (debe (+ ?total_debe ?debe)) (haber (+ ?total_haber ?haber)) (deber (+ ?total_deber ?deber)) (acreedor (+ ?total_acreedor ?acreedor)))
   (modify ?subtotales (mostrado-en-resumen true))
   (assert (hacer-balance-footer)))

(defrule COMPROBACIONA::balance-footer
   ?comando <- (hacer-balance-footer)
   (empresa (nombre ?empresa))
   (balance (mes ?mes) (ano ?ano))
   (not (subtotales (mostrado-en-resumen false)))
   (totales (debe ?debe) (haber ?haber) (deber ?deber) (activos ?activos) (activo-circulante ?activo-circulante) (activo-fijo ?activo-fijo) (pasivos ?pasivos) (pasivo-circulante ?pasivo-circulante) (pasivo-fijo ?pasivo-fijo) (patrimonio ?patrimonio) (acreedor ?acreedor))
   =>
   (bind ?patrimonio_pasivo (+ ?patrimonio ?pasivos))
   (printout t tab "......................................................." crlf)
   (printout t tab tab ?debe tab ?haber tab "|" tab ?deber tab ?acreedor tab activos= ?activos crlf)
   (printout t "------------------------------------------------------------------------" crlf)
   (retract ?comando))

(defmodule LIQUIDACION
   (import MAIN deftemplate ?ALL))

(deffunction LIQUIDACION::mes_to_numero (?p0))

(deffunction LIQUIDACION::to_serial_date (?p0 ?p1 ?p2))

(deffunction LIQUIDACION::mes_to_numero
   (?mes)
   (switch ?mes
      (case enero then
         1)
      (case febrero then
         2)
      (case marzo then
         3)
      (case abril then
         4)
      (case mayo then
         5)
      (case junio then
         6)
      (case julio then
         7)
      (case agosto then
         8)
      (case septiembre then
         9)
      (case octubre then
         10)
      (case noviembre then
         11)
      (case diciembre then
         12)))

(deffunction LIQUIDACION::to_serial_date
   (?dia ?mes ?ano)
   (+ (* 10000 ?ano) (* 100 (mes_to_numero ?mes)) ?dia))

(defrule LIQUIDACION::fin-liquidacion
   (declare (salience -100))
   =>
   (close k))

(defrule LIQUIDACION::inicio-kindle-k-liquidacion-rules
   (declare (salience 10000))
   (empresa (nombre ?empresa))
   =>
   (bind ?archivo (str-cat "./doc/" ?empresa "/liquidacion.markdown"))
   (open ?archivo k "w")
   (printout k "--- " crlf)
   (printout k "layout: page" crlf)
   (printout k "--- " crlf)
   (printout k "" crlf)
   (printout k "Contabilidad para Necios® usa el siguiente código de colores para este documento." crlf)
   (printout k "<li><span style='background-color: lavender'>[    ]</span> partida revisada y resultado bueno. </li>" crlf)
   (printout k "<li><span style='background-color: lightyellow'>[    ]</span> cuenta mayor del activo </li>" crlf)
   (printout k "<li><span style='background-color: azure'>[    ]</span> cuenta mayor del pasivo </li>" crlf)
   (printout k "<li><span style='color: white; background-color: cornflowerblue'>[    ]</span> cuenta de patrimonio </li>" crlf)
   (printout k "<li><span style='background-color: gold'>[    ]</span> ganancia </li>" crlf)
   (printout k "<li><span style='color: white; background-color: black'>[    ]</span> pérdida </li>" crlf)
   (printout k "<li><span style='background-color: blanchedalmond'>[    ]</span> subtotales de la transacción </li>" crlf))

(defrule LIQUIDACION::inicio-de-modulo-liquidacion
   (declare (salience 10000))
   =>
   (printout t "---------------------- LIQUIDACION --------------------" crlf))

(defrule LIQUIDACION::liquidacion-mostrar-tributacion
   (declare (salience 8000))
   ?partida <- (partida (numero ?numero))
   (tributacion (partida ?numero))
   =>
   (assert (cabeza ?numero)))

(defrule LIQUIDACION::liquidacion-mostrar-partida
   (declare (salience 8000))
   ?partida <- (partida (numero ?numero))
   (or  (liquidacion (partida ?numero))
        (provision (partida ?numero)))
   =>
   (assert (cabeza ?numero)))

(defrule LIQUIDACION::tributacion
   (cabeza 1155)
   (no)
   =>
   (printout t crlf crlf crlf)
   (printout t "==================================================================" crlf)
   (printout t FECHA tab Parcial tab Debe tab Haber tab Descripcion crlf)
   (printout t "==================================================================" crlf)
   (printout t "Partida 1155 " crlf)
   (printout t ".................................................................." crlf)
   (assert (fila 1155)))

(defrule LIQUIDACION::encabezado
   (cabeza ?numero)
   =>
   (printout t crlf crlf crlf)
   (printout t "==================================================================" crlf)
   (printout t FECHA tab Parcial tab Debe tab Haber tab Descripcion crlf)
   (printout t "==================================================================" crlf)
   (printout t "Partida " ?numero crlf)
   (printout t ".................................................................." crlf)
   (printout k "<table style='background-color: lightyellow' ><tbody>" crlf)
   (printout k "<tr style='color: white; background-color: black'><td colspan='9'> Partida " ?numero "</td></tr>" crlf)
   (printout k "<tr><th>DEBE</th><th> HABER </th> <th colspan='6'> Cuenta </th></tr>" crlf)
   (assert (fila ?numero)))

(defrule LIQUIDACION::footer
   ?fila <- (fila ?numero)
   (empresa (nombre ?empresa) (razon ?razon))
   (partida (numero ?numero) (debe ?debe) (haber ?haber) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion ?descripcion))
   =>
   (printout t "------------------------------------------------------------------" crlf)
   (printout t tab tab ?debe tab ?haber tab "( " ?dia " de " ?mes tab ?ano tab " )" crlf)
   (printout t "==================================================================" crlf)
   (printout t ?razon crlf)
   (printout t ?descripcion crlf)
   (printout t crlf crlf)
   (printout k "<tr style='color: white; background-color: black'> <td> " ?debe "</td><td> " ?haber "</td><td colspan='3'>( " ?dia " de " ?mes tab ?ano tab " ) </td></tr>" crlf)
   (printout k "<tr><td colspan='9'>" ?razon "</td></tr>" crlf)
   (printout k "<tr><td colspan='9'>" ?descripcion "</td></tr>" crlf)
   (printout k "<table><tbody> " crlf))

(defrule LIQUIDACION::muestra-saldo-liquidadora-saldo-nulo
   (no)
   ?f1 <- (cuenta (nombre ?nombre) (debe ?debe) (haber ?haber) (saldo ?saldo))
   (test (= ?debe ?haber))
   =>
   (bind ?saldo (- ?debe ?haber))
   (printout t crlf)
   (printout t "-----------------------------------------------------" crlf)
   (printout t tab tab ?nombre tab saldo-nulo crlf)
   (printout t "----------------------------------------------------" crlf)
   (printout t tab (round ?debe) tab "|" tab (round ?haber) crlf)
   (printout t tab (round ?saldo) crlf)
   (printout t crlf))

(defrule LIQUIDACION::muestra-saldo-liquidadora-saldo-deudor
   ?f1 <- (cuenta (nombre ?nombre) (partida ?partida) (debe ?debe) (haber ?haber) (saldo ?saldo) (tipo liquidadora))
   (test (> ?debe ?haber))
   =>
   (bind ?saldo (- ?debe ?haber))
   (printout t crlf)
   (printout t "-----------------------------------------------------" crlf)
   (printout t tab tab ?nombre tab saldo-deudor crlf)
   (printout t "----------------------------------------------------" crlf)
   (printout t ?partida tab (round ?debe) tab "|" tab (round ?haber) crlf)
   (printout t tab tab tab (round ?saldo) crlf)
   (printout t crlf)
   (printout k "<tr  style='background-color: blanchedalmond'><td></td><td> " ?nombre "</td><td>" saldo-deudor "</td></tr>" crlf)
   (printout k "<tr> <td> " ?partida "</td> <td>" (round ?debe) "</td> <td>" (round ?haber) "</td></tr>" crlf)
   (printout k "<tr style='background-color: blanchedalmond'><td>" (round ?saldo) "</td></tr>" crlf))

(defrule LIQUIDACION::muestra-saldo-liquidadora-saldo-acreedor
   ?f1 <- (cuenta (nombre ?nombre) (partida ?partida) (debe ?debe) (haber ?haber) (saldo ?saldo) (tipo liquidadora))
   (test (< ?debe ?haber))
   =>
   (bind ?saldo (- ?haber ?debe))
   (printout t crlf)
   (printout t "-----------------------------------------------------" crlf)
   (printout t tab tab ?nombre tab saldo-acreedor crlf)
   (printout t "-----------------------------------------------------" crlf)
   (printout t ?partida tab (round ?debe) tab "|" tab (round ?haber) crlf)
   (printout t tab tab "|" tab (round ?saldo) crlf)
   (printout t crlf)
   (printout k "<table>" crlf)
   (printout k "<tr style='background-color: blanchedalmond'><td> </td><td>" ?nombre "</td><td>" saldo-acreedor "</td></tr>" crlf)
   (printout k "<tr> <td> " ?partida "</td> <td>" (round ?debe) "</td><td> " (round ?haber) "</td></tr>" crlf)
   (printout k "<tr style='background-color: blanchedalmond'><td>" (round ?saldo) "</td></tr>" crlf)
   (printout k "</table>" crlf))

(defrule LIQUIDACION::liquidar-deudora-con-saldo-acreedor-version-original
   (declare (salience 80))
   (fila ?numero)
   (empresa (nombre ?empresa))
   ?partida <- (partida (numero ?numero) (debe ?debep) (haber ?haberp))
   ?f1 <- (liquidacion (partida ?numero) (cuenta ?nombre) (ano ?ano) (liquidadora ?liquidora) (tipo-de-saldo acreedor))
   ?deudora <- (cuenta (nombre ?nombre) (debe ?debe) (haber ?haber) (tipo deudor) (liquidada false))
   ?liquidadora <- (cuenta (nombre ?liquidora) (debe ?debe2) (haber ?haber2) (tipo liquidadora) (saldo ?saldo2) (grupo ?grupo))
   (test (< ?debe ?haber))
   =>
   (printout t ?debe tab ?haber crlf)
   (printout k "<tr><td>" ?debe "</td><td>" ?haber "</td></tr>" crlf)
   (bind ?saldo (- ?haber ?debe))
   (modify ?deudora (liquidada true))
   (modify ?liquidadora (ano ?ano) (empresa ?empresa) (haber (+ ?haber2 ?saldo)) (saldo (- ?saldo2 ?saldo)))
   (modify ?partida (debe (+ ?debep ?saldo)) (haber (+ ?haberp ?saldo)))
   (printout t tab tab "  | --" tab (round ?haber) tab ?nombre tab ?grupo crlf)
   (printout t tab (round ?saldo) tab "<-|" tab tab tab "r<" ?liquidora ">" crlf)
   (printout t crlf)
   (printout k "<tr><td></td><td>" (round ?haber) "</td><td> </td><td>" ?nombre "</td><td>" ?grupo "</td></tr>" crlf)
   (printout k "<tr><td>" (round ?saldo) "</td><td> </td><td> r(" ?liquidora ") </td></tr>" crlf))

(defrule LIQUIDACION::liquidar-deudora-con-saldo-deudor
   (declare (salience 80))
   (fila ?numero)
   (empresa (nombre ?empresa))
   ?partida <- (partida (numero ?numero) (dia ?dia) (mes ?mes) (debe ?debep) (haber ?haberp))
   ?f1 <- (liquidacion (partida ?numero) (cuenta ?nombre) (ano ?ano) (liquidadora ?liquidora) (tipo-de-saldo deudor))
   ?deudora <- (cuenta (nombre ?nombre) (debe ?debe) (haber ?haber) (tipo deudor) (grupo ?grupo) (liquidada false))
   ?l <- (cuenta (nombre ?liquidora) (tipo liquidadora) (saldo ?saldol) (debe ?debel) (grupo ?grupol))
   (test (> ?debe ?haber))
   =>
   (bind ?saldo (- ?debe ?haber))
   (modify ?deudora (liquidada true))
   (modify ?l (ano ?ano) (empresa ?empresa) (debe (+ ?debel ?saldo)) (saldo (+ ?saldol ?saldo)))
   (modify ?partida (debe (+ ?debep ?saldo)) (haber (+ ?haberp ?saldo)))
   (printout t tab tab "   |--" tab (round ?saldo) tab ?nombre tab ?grupo crlf)
   (printout t tab (round ?saldo) tab " <-| " tab tab tab tab "r<" ?liquidora ">" crlf)
   (printout t crlf)
   (printout k "<tr><td></td> <td>" (round ?saldo) "</td><td> </td><td colspan='5'>" ?nombre "#" ?grupo "</td></tr>" crlf)
   (printout k "<tr><td> " (round ?saldo) "</td><td></td><td colspan='6'>  r(" ?liquidora ") </td></tr>" crlf))

(defrule LIQUIDACION::liquidar-acreedora-con-saldo-deudor
   (declare (salience 80))
   (fila ?numero)
   (empresa (nombre ?empresa))
   ?partida <- (partida (numero ?numero) (dia ?dia) (mes ?mes) (debe ?debep) (haber ?haberp))
   ?f1 <- (liquidacion (partida ?numero) (cuenta ?nombre) (ano ?ano) (liquidadora ?liquidora) (tipo-de-saldo deudor))
   ?deudora <- (cuenta (nombre ?nombre) (debe ?debe) (haber ?haber) (tipo acreedora) (liquidada false))
   ?liquidador <- (cuenta (nombre ?liquidora) (debe ?debe2) (haber ?haber2) (tipo liquidadora) (saldo ?saldo2))
   (test (> ?debe ?haber))
   =>
   (bind ?saldo (- ?debe ?haber))
   (modify ?deudora (liquidada true))
   (modify ?liquidador (ano ?ano) (empresa ?empresa) (debe (+ ?debe2 ?saldo)) (saldo (+ ?saldo2 ?saldo)))
   (modify ?partida (debe (+ ?debep ?saldo)) (haber (+ ?haberp ?saldo)))
   (printout t tab tab "    |--" tab (round ?saldo) tab tab ?nombre crlf)
   (printout t tab (round ?saldo) tab "  <-|" tab tab "r<" ?liquidora ">" crlf)
   (printout t crlf)
   (printout k "<tr> <td></td><td>" (round ?saldo) "</td><td> </td><td colspan='2'> " ?nombre "</td></tr>" crlf)
   (printout k "<tr> <td> " (round ?saldo) "</td><td></td><td colspan='4'>  r(" ?liquidora ") </td></tr>" crlf))

(defrule LIQUIDACION::liquidar-cuentas-de-resultado-acreedor
   (declare (salience 80))
   (fila ?numero)
   (empresa (nombre ?empresa))
   ?partida <- (partida (numero ?numero) (debe ?debep) (haber ?haberp))
   ?f1 <- (liquidacion (partida ?numero) (cuenta ?nombre) (ano ?ano) (liquidadora ?liquidora) (tipo-de-saldo acreedor))
   ?deudora <- (cuenta (nombre ?nombre) (debe ?debe) (haber ?haber) (tipo acreedora) (liquidada false) (grupo ?grupo))
   ?liquidador <- (cuenta (nombre ?liquidora) (debe ?debe2) (haber ?haber2) (tipo liquidadora) (saldo ?saldo2))
   (test (> ?haber ?debe))
   =>
   (bind ?saldo (- ?haber ?debe))
   (modify ?deudora (liquidada true))
   (modify ?liquidador (ano ?ano) (empresa ?empresa) (haber (+ ?haber2 ?saldo)) (saldo (+ ?saldo2 ?saldo)))
   (modify ?partida (debe (+ ?debep ?saldo)) (haber (+ ?haberp ?saldo)))
   (printout t tab (round ?saldo) tab "--|" tab tab ?nombre crlf)
   (printout t tab tab "  |->" tab (round ?saldo) tab tab "r<" ?liquidora ">" crlf)
   (printout t crlf)
   (printout k "<tr><td>" (round ?saldo) "</td><td></td><td colspan='2'>" ?nombre "</td></tr>" crlf)
   (printout k "<tr><td></td><td>" (round ?saldo) "</td><td></td><td> r(" ?liquidora ") </td></tr>" crlf))

(defrule LIQUIDACION::determinacion-de-la-base-imponible-efecto-aporte
   (declare (salience 180))
   (fila ?numero)
   (empresa (nombre ?empresa))
   ?partida <- (partida (dia ?dia) (mes ?mes) (numero ?numero) (debe ?debep) (haber ?haberp))
   ?f1 <- (tributacion (partida ?numero) (cuenta ?nombre) (ano ?ano) (liquidadora ?liquidora) (efecto aporte))
   ?acreedora <- (cuenta (partida ?numero2&:(neq nil ?numero2)) (parte ?parte) (nombre ?nombre) (debe ?debe) (haber ?haber&:(> ?haber 0)) (tipo ?tipo) (liquidada ?liquidada) (tributada false) (grupo ?grupo) (circulante ?circulante))
   ?liquidador <- (cuenta (nombre ?liquidora) (debe ?debe2) (haber ?haber2) (tipo liquidadora))
   (cuenta (nombre base-imponible) (partida nil))
   =>
   (bind ?saldo ?haber)
   (modify ?acreedora (tributada true))
   (modify ?liquidador (ano ?ano) (empresa ?empresa) (haber (+ ?haber2 ?saldo)))
   (modify ?partida (debe (+ ?debep ?saldo)) (haber (+ ?haberp ?saldo)))
   (printout t tab tab ?saldo tab "--|" tab tab ?nombre crlf)
   (printout t tab tab tab "  |->" tab ?saldo tab tab "r<" ?liquidora ">" crlf)
   (printout t crlf)
   (printout k "<tr><td>" ?saldo "</td><td> </td><td colspan='2'> r(" ?nombre ") partida " ?numero2 " </td></tr>" crlf)
   (printout k "<tr><td></td><td>" ?saldo "</td><td> </td><td>" ?liquidora "</td></tr>" crlf))

(defrule LIQUIDACION::determinacion-de-la-base-imponible-efecto-deduccion
   (declare (salience 181))
   (fila ?numero)
   (empresa (nombre ?empresa))
   ?partida <- (partida (dia ?dia) (mes ?mes) (numero ?numero) (debe ?debep) (haber ?haberp))
   ?f1 <- (tributacion (partida ?numero) (cuenta ?nombre) (ano ?ano) (liquidadora ?liquidora) (efecto deduccion))
   ?acreedora <- (cuenta (partida ?numero2&:(neq nil ?numero2)) (parte ?parte) (nombre ?nombre) (debe ?debe&:(> ?debe 0)) (haber ?haber) (tipo ?tipo) (liquidada ?liquidada) (tributada false) (grupo ?grupo) (circulante ?circulante))
   ?liquidador <- (cuenta (nombre ?liquidora) (debe ?debe2) (haber ?haber2) (tipo liquidadora))
   (cuenta (nombre base-imponible) (partida nil))
   =>
   (bind ?saldo ?debe)
   (modify ?acreedora (tributada true))
   (modify ?liquidador (ano ?ano) (empresa ?empresa) (debe (+ ?debe2 ?saldo)))
   (modify ?partida (debe (+ ?debep ?saldo)) (haber (+ ?haberp ?saldo)))
   (printout t tab tab ?saldo tab "--|" tab tab "r<" ?liquidora "> partida " crlf)
   (printout t tab tab tab "  |->" tab ?saldo tab tab ?nombre crlf)
   (printout t crlf)
   (printout k "<tr><td>" ?saldo "</td><td> </td><td colspan='2'> r(" ?liquidora ") partida " ?numero2 " </td></tr>" crlf)
   (printout k "<tr><td></td><td>" ?saldo "</td><td> </td><td>" ?nombre "</td></tr>" crlf))

(defrule LIQUIDACION::obtencion-base-imponible
   (declare (salience 180))
   (fila ?numero)
   (empresa (nombre ?empresa))
   ?partida <- (partida (dia ?dia) (mes ?mes) (numero ?numero) (debe ?debep) (haber ?haberp))
   ?f1 <- (tributacion (partida ?numero) (cuenta ?nombre) (ano ?ano) (liquidadora ?liquidora1))
   ?acreedora <- (cuenta (partida ?partida) (parte ?parte) (nombre ?nombre) (debe ?debe) (haber ?haber) (tipo ?tipo) (liquidada true) (tributada false) (grupo ?grupo) (circulante ?circulante))
   ?liquidador <- (cuenta (nombre ?liquidora) (debe ?debe2) (haber ?haber2) (tipo liquidadora))
   =>
   (bind ?saldo (round (* 1 (- ?haber ?debe))))
   (modify ?acreedora (tributada true))
   (assert (cuenta (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (de-resultado true) (parte ?parte) (circulante ?circulante) (nombre ?nombre) (grupo ?grupo) (tipo acreedora) (partida ?numero) (tributada true) (origen real) (haber (+ ?haber ?saldo))))
   (modify ?liquidador (ano ?ano) (empresa ?empresa) (saldo ?saldo))
   (modify ?partida (debe (+ ?debep ?saldo)) (haber (+ ?haberp ?saldo)))
   (printout t "t-- Tributando cuenta " ?nombre " en " ?liquidora crlf)
   (printout t tab tab ?saldo tab "--|" tab tab tab ?nombre crlf)
   (printout t tab tab tab "  |->" tab ?saldo tab tab "r<" ?liquidora ">" crlf)
   (printout t crlf)
   (printout t "obtencion-base-imponible" crlf)
   (printout k "<tr><td colspan='6'>t-- Tributando cuenta " ?nombre " en " ?liquidora "</td></tr>" crlf)
   (printout k "<tr><td colspan='6'>t--La cuenta de base imponible tiene un debe de " tab ?debe2 " y un haber de " tab ?haber2 "</td><tr>" crlf)
   (printout k "<tr style='background-color: azure'><td colspan='6'>La cuenta de liquidacion tiene un debe de " tab ?debe2 " y un haber de " tab ?haber2 "</td></tr>" crlf)
   (printout k "<tr style='background-color: azure'><td> " ?saldo "</td><td></td><td colspan='2'>" ?nombre "</td></tr>" crlf)
   (printout k "<tr style='background-color: azure'><td> </td><td>" ?saldo "</td><td></td><td> r(" ?liquidora ") </td></tr>" crlf)
   (printout k " Detenido en la regla obtencion-base-imponible " crlf)
   (halt))

(defrule LIQUIDACION::obtencion-utilidad-tributaria-negativa
   (declare (salience 81))
   (fila ?numero)
   (empresa (nombre ?empresa))
   ?partida <- (partida (dia ?dia) (mes ?mes) (numero ?numero) (debe ?debep) (haber ?haberp))
   ?f1 <- (liquidacion (partida ?numero) (cuenta ?nombre) (ano ?ano) (liquidadora ?liquidora))
   ?acreedora <- (cuenta (de-resultado true) (partida nil) (parte ?parte) (nombre ?nombre) (debe ?debe) (haber ?haber) (tipo acreedora) (liquidada false) (grupo ?grupo) (circulante ?circulante))
   ?liquidador <- (cuenta (nombre ?liquidora) (debe ?debe2) (haber ?haber2) (tipo liquidadora))
   (test (and (= ?debe 0) (= ?haber 0)))
   (test (< ?haber2 ?debe2))
   (test (eq ?nombre utilidad-tributaria))
   =>
   (bind ?saldo (round (* 1 (- ?haber2 ?debe2))))
   (modify ?acreedora (liquidada true))
   (assert (cuenta (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (de-resultado true) (parte ?parte) (circulante ?circulante) (nombre ?nombre) (grupo ?grupo) (tipo acreedora) (partida ?numero) (liquidada true) (origen real) (haber (+ ?haber ?saldo))))
   (modify ?liquidador (ano ?ano) (empresa ?empresa) (saldo ?saldo))
   (modify ?partida (debe (+ ?debep ?saldo)) (haber (+ ?haberp ?saldo)))
   (printout t tab tab ?saldo tab "--|" tab tab tab ?nombre crlf)
   (printout t tab tab tab "  |->" tab ?saldo tab tab "r<" ?liquidora ">" crlf)
   (printout t crlf)
   (printout t "obtencion-utilidad-tributaria-negativa" crlf)
   (printout k "<tr><td colspan='6'>x-- Liquidando cuenta de resultados ( cuando hay perdida tributaria en " ?nombre " en " ?liquidora "</td></tr>" crlf)
   (printout k "<tr style='background-color: azure'><td colspan='6'>La cuenta de liquidacion tiene un debe de " tab ?debe2 " y un haber de " tab ?haber2 "</td></tr>" crlf)
   (printout k "<tr style='background-color: azure'><td> " ?saldo "</td><td></td><td colspan='2'>" ?nombre "</td></tr>" crlf)
   (printout k "<tr style='background-color: azure'><td> </td><td>" ?saldo "</td><td></td><td> r(" ?liquidora ") </td></tr>" crlf))

(defrule LIQUIDACION::obtencion-utilidad-negativa
   (declare (salience 81))
   (fila ?numero)
   (empresa (nombre ?empresa))
   ?partida <- (partida (dia ?dia) (mes ?mes) (numero ?numero) (debe ?debep) (haber ?haberp))
   ?f1 <- (liquidacion (partida ?numero) (cuenta ?nombre) (ano ?ano) (liquidadora ?liquidora))
   ?acreedora <- (cuenta (de-resultado true) (partida nil) (parte ?parte) (nombre ?nombre) (debe ?debe) (haber ?haber) (tipo acreedora) (liquidada false) (grupo ?grupo) (circulante ?circulante))
   ?liquidador <- (cuenta (nombre ?liquidora) (debe ?debe2) (haber ?haber2) (tipo liquidadora))
   (test (and (= ?debe 0) (= ?haber 0)))
   (test (< ?haber2 ?debe2))
   (test (eq ?nombre utilidad))
   =>
   (bind ?saldo (round (* 1 (- ?haber2 ?debe2))))
   (modify ?acreedora (liquidada true))
   (assert (cuenta (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (de-resultado true) (parte ?parte) (circulante ?circulante) (nombre ?nombre) (grupo ?grupo) (tipo acreedora) (partida ?numero) (liquidada true) (origen real) (haber (+ ?haber ?saldo))))
   (modify ?liquidador (ano ?ano) (empresa ?empresa) (saldo ?saldo))
   (modify ?partida (debe (+ ?debep ?saldo)) (haber (+ ?haberp ?saldo)))
   (printout t tab tab ?saldo tab "--|" tab tab tab ?nombre crlf)
   (printout t tab tab tab "  |->" tab ?saldo tab tab "r<" ?liquidora ">" crlf)
   (printout t crlf)
   (printout t "obtencion-utilidad-negativa" crlf)
   (printout k "<tr> <td colspan='8'>x-- Liquidando cuenta de resultados (cuando hay pérdidas tributarias) en: " ?nombre " en " ?liquidora "</td></tr>" crlf)
   (printout k "<tr style='font-weight:bold; color: white; background-color: crimson'> <td>" ?saldo "</td><td></td><td>" ?nombre "</td><tr>" crlf)
   (printout k "<tr><td></td><td>" ?saldo "</td><td> </td><td colspan='2'> r(" ?liquidora ") </td></tr>" crlf))

(defrule LIQUIDACION::obtencion-utilidad-tributaria-positiva
   (declare (salience 81))
   (fila ?numero)
   (empresa (nombre ?empresa))
   ?partida <- (partida (dia ?dia) (mes ?mes) (numero ?numero) (debe ?debep) (haber ?haberp))
   (cuenta (nombre reserva-legal) (haber ?reserva-legal))
   (cuenta (nombre idpc) (haber ?idpc))
   ?f1 <- (liquidacion (partida ?numero) (cuenta ?nombre) (ano ?ano) (liquidadora ?liquidora))
   ?acreedora <- (cuenta (de-resultado true) (partida nil) (parte ?parte) (nombre ?nombre) (debe ?debe) (haber ?haber) (tipo acreedora) (liquidada false) (grupo ?grupo) (circulante ?circulante))
   ?liquidador <- (cuenta (nombre ?liquidora) (debe ?debe2) (haber ?haber2) (tipo liquidadora))
   (test (and (= ?debe 0) (= ?haber 0)))
   (test (> ?haber2 ?debe2))
   (test (eq ?nombre utilidad-tributaria))
   =>
   (bind ?saldo (round (- (- (- ?haber2 ?debe2) ?reserva-legal) ?idpc)))
   (modify ?acreedora (liquidada true))
   (assert (cuenta (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (de-resultado true) (parte ?parte) (circulante ?circulante) (nombre ?nombre) (grupo ?grupo) (tipo acreedora) (partida ?numero) (liquidada true) (origen real) (haber (+ ?haber ?saldo))))
   (modify ?liquidador (ano ?ano) (empresa ?empresa) (saldo ?saldo))
   (modify ?partida (debe (+ ?debep ?saldo)) (haber (+ ?haberp ?saldo)))
   (printout t tab tab ?saldo tab "--|" tab tab tab ?nombre crlf)
   (printout t tab tab tab "  |->" tab ?saldo tab tab "r<" ?liquidora ">" crlf)
   (printout t crlf)
   (printout k "<tr><td colspan='6'>x-- Liquidando cuenta de resultados ( cuando hay ganancia) en " ?nombre " en " ?liquidora "</td></tr>" crlf)
   (printout k "<tr style='background-color: azure'><td colspan='6'>La cuenta de liquidacion tiene un debe de " tab ?debe2 " y un haber de " tab ?haber2 "</td></tr>" crlf)
   (printout k "<tr style='background-color: azure'><td> " ?saldo "</td><td></td><td colspan='2'>" ?nombre "</td></tr>" crlf)
   (printout k "<tr style='background-color: azure'><td> </td><td>" ?saldo "</td><td></td><td> r(" ?liquidora ") </td></tr>" crlf)
   (printout t "obtencion-utilidad-tributaria-positiva" crlf))

(defrule LIQUIDACION::obtencion-utilidad-positiva
   (declare (salience 81))
   (fila ?numero)
   (empresa (nombre ?empresa))
   ?partida <- (partida (dia ?dia) (mes ?mes) (numero ?numero) (debe ?debep) (haber ?haberp))
   (cuenta (nombre reserva-legal) (haber ?reserva-legal))
   ?f1 <- (liquidacion (partida ?numero) (cuenta ?nombre) (ano ?ano) (liquidadora ?liquidora))
   ?acreedora <- (cuenta (de-resultado true) (partida nil) (parte ?parte) (nombre ?nombre) (debe ?debe) (haber ?haber) (tipo acreedora) (liquidada false) (grupo ?grupo) (circulante ?circulante))
   ?liquidador <- (cuenta (nombre ?liquidora) (debe ?debe2) (haber ?haber2) (tipo liquidadora))
   (test (and (= ?debe 0) (= ?haber 0)))
   (test (> ?haber2 ?debe2))
   (test (eq ?nombre utilidad))
   =>
   (bind ?saldo (round (- (- ?haber2 ?debe2) ?reserva-legal)))
   (modify ?acreedora (liquidada true))
   (assert (cuenta (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (de-resultado true) (parte ?parte) (circulante ?circulante) (nombre ?nombre) (grupo ?grupo) (tipo acreedora) (partida ?numero) (liquidada true) (origen real) (haber (+ ?haber ?saldo))))
   (modify ?liquidador (ano ?ano) (empresa ?empresa) (saldo ?saldo))
   (modify ?partida (debe (+ ?debep ?saldo)) (haber (+ ?haberp ?saldo)))
   (printout t tab tab ?saldo tab "--|" tab tab tab ?nombre crlf)
   (printout t tab tab tab "  |->" tab ?saldo tab tab "r<" ?liquidora ">" crlf)
   (printout t crlf)
   (printout k "<tr> <td colspan='8'>x-- Liquidando cuenta de resultados (cuando hay ganancia) en: " ?nombre " en " ?liquidora "</td></tr>" crlf)
   (printout k "<tr style='font-weight:bold; color: white; background-color: crimson'> <td>" ?saldo "</td><td></td><td>" ?nombre "</td><tr>" crlf)
   (printout k "<tr><td></td><td>" ?saldo "</td><td> </td><td colspan='2'> r(" ?liquidora ") </td></tr>" crlf)
   (printout t "obtencion-utilidad-positiva" crlf))

(defrule LIQUIDACION::liquidar-cuenta-de-resultados
   (declare (salience 81))
   (fila ?numero)
   (empresa (nombre ?empresa))
   ?partida <- (partida (dia ?dia) (mes ?mes) (numero ?numero) (debe ?debep) (haber ?haberp))
   ?f1 <- (liquidacion (partida ?numero) (cuenta ?nombre) (ano ?ano) (liquidadora ?liquidora))
   ?acreedora <- (cuenta (de-resultado true) (partida nil) (parte ?parte) (nombre ?nombre) (debe ?debe) (haber ?haber) (tipo acreedora) (liquidada false) (grupo ?grupo) (circulante ?circulante))
   ?liquidador <- (cuenta (nombre ?liquidora) (debe ?debe2) (haber ?haber2) (tipo liquidadora))
   (test (and (= ?debe 0) (= ?haber 0)))
   (test (> ?haber2 ?debe2))
   (test (> ?parte 0))
   =>
   (bind ?saldo (round (* ?parte (- ?haber2 ?debe2))))
   (modify ?acreedora (liquidada true))
   (assert (cuenta (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (de-resultado true) (parte ?parte) (circulante ?circulante) (nombre ?nombre) (grupo ?grupo) (tipo acreedora) (partida ?numero) (liquidada true) (origen real) (haber (+ ?haber ?saldo))))
   (modify ?liquidador (ano ?ano) (empresa ?empresa) (saldo ?saldo))
   (modify ?partida (debe (+ ?debep ?saldo)) (haber (+ ?haberp ?saldo)))
   (printout t "x-- Liquidando cuenta de resultados " ?nombre " en " ?liquidora crlf)
   (printout t "La cuenta de liquidacion tiene un debe de " tab ?debe2 " y un haber de " tab ?haber2 crlf)
   (printout t tab tab ?saldo tab "--|" tab tab tab ?nombre crlf)
   (printout t tab tab tab "  |->" tab ?saldo tab tab "r<" ?liquidora ">" crlf)
   (printout t crlf)
   (printout k "<tr> <td colspan='7'> x-- Liquidando cuenta de resultados " ?nombre " en " ?liquidora "</td></tr>" crlf)
   (printout k "<tr> <td colspan='7'> La cuenta de liquidacion tiene un debe de " tab ?debe2 " y un haber de " tab ?haber2 "</td></tr>" crlf)
   (printout k "<tr style='background-color: lightgreen'><td>" ?saldo "</td> <td></td> <td colspan='2' >" ?nombre "</td></tr>" crlf)
   (printout k "<tr style='background-color: lightgreen'><td></td><td>" ?saldo "</td> <td> </td><td colspan='2'> r(" ?liquidora ") </td></tr> " crlf))

(defrule LIQUIDACION::crea-cuenta-perdidas-y-ganancias
   (declare (salience 2))
   (empresa (nombre ?empresa))
   (balance (dia ?dia_b) (mes ?mes_b) (ano ?ano))
   (partida (numero ?partida) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (descripcion ?descripcion))
   (cuenta (nombre perdidas-y-ganancias) (partida nil) (grupo ?grupo-i) (padre ?padre-i) (circulante ?circulante-i) (naturaleza ?naturaleza-i) (tipo ?tipo-i) (origen ?origen-i) (de-resultado ?de-resultado-i))
   =>
   (assert (cuenta (partida ?partida) (descripcion liquidando-inventario) (dia ?dia) (mes ?mes) (ano ?ano) (nombre perdidas-y-ganancias) (grupo ?grupo-i) (empresa ?empresa) (padre ?padre-i) (circulante ?circulante-i) (naturaleza ?naturaleza-i) (tipo ?tipo-i) (origen ?origen-i) (de-resultado ?de-resultado-i) (liquidada true))))

(defrule LIQUIDACION::crea-cuenta-base-imponible
   (declare (salience 2))
   (empresa (nombre ?empresa))
   (balance (dia ?dia_b) (mes ?mes_b) (ano ?ano))
   (partida (numero ?partida-cuenta) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (descripcion ?descripcion))
   (not (cuenta (partida ?part&:(neq nil ?part)) (nombre base-imponible)))
   (exists
        (tributacion (partida ?partida-cuenta)))
   (cuenta (nombre base-imponible) (partida nil) (grupo ?grupo-i) (padre ?padre-i) (circulante ?circulante-i) (naturaleza ?naturaleza-i) (tipo ?tipo-i) (origen ?origen-i) (de-resultado ?de-resultado-i))
   =>
   (printout t "creando cuenta base-imponible " ?partida-cuenta crlf)
   (assert (cuenta (partida ?partida-cuenta) (descripcion base-imponible) (dia ?dia) (mes ?mes) (ano ?ano) (nombre base-imponible) (grupo ?grupo-i) (empresa ?empresa) (padre ?padre-i) (circulante ?circulante-i) (naturaleza ?naturaleza-i) (tipo ?tipo-i) (origen ?origen-i) (de-resultado ?de-resultado-i) (tributada true))))

(defrule LIQUIDACION::caratula-de-inventario-final
   (declare (salience 3))
   ?f1 <- (partida-inventario-final (partida ?partida))
   =>
   (printout t " Inicio de Cuenta de Inventario Final ----------------------------" crlf)
   (printout k "<table><tbody> " crlf)
   (printout k "<tr><td colspan='3'> Inicio de Cuenta de Inventario Final </td></tr>" crlf)
   (printout k "<tr style='background-color: cornflowerblue'><td> Partida </td> <td> DEBE </td> <td> HABER </td> </tr>" crlf))

(defrule LIQUIDACION::pie-de-inventario-final
   (declare (salience 1))
   ?f1 <- (partida-inventario-final (partida ?partida))
   =>
   (printout t " Fin de Cuenta de Inventario Final ----------------------------" crlf)
   (printout k "<tr><td colspan='2'> Fin de Cuenta de Inventario Final </td></tr>" crlf)
   (printout k "</tbody></table>" crlf))

(defrule LIQUIDACION::liquidando-inventario-corriente-a-inventario-final-deudor
   (declare (salience 2))
   (empresa (nombre ?empresa))
   (balance (dia ?dia_b) (mes ?mes_b) (ano ?ano_top))
   (partida (numero ?partida) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (descripcion ?descripcion))
   ?perdidas-y-ganancias <- (cuenta (nombre perdidas-y-ganancias) (debe ?debe-i) (haber ?haber-i))
   (or  ?i <- (cuenta (nombre inventario) (partida ?partida-inventario) (debe ?debe) (liquidada false) (grupo ?grupo) (padre ?padre) (circulante ?circulante) (naturaleza ?naturaleza) (tipo ?tipo) (origen ?origen) (de-resultado ?de-resultado))
        ?i <- (cuenta (nombre inventario-inicial) (partida ?partida-inventario) (debe ?debe) (liquidada false) (grupo ?grupo) (padre ?padre) (circulante ?circulante) (naturaleza ?naturaleza) (tipo ?tipo) (origen ?origen) (de-resultado ?de-resultado)))
   ?f1 <- (partida-inventario-final (partida ?partida))
   (test (> ?debe 0))
   (test (>= (to_serial_date ?dia_b ?mes_b ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (printout t ?partida tab ?debe tab "|" crlf)
   (printout k "<tr style='color: white; background-color: black' ><td>" ?partida "</td><td>" ?debe "</td></tr>" crlf)
   (modify ?i (liquidada true))
   (assert (abono (partida ?partida-inventario) (dia ?dia_b) (mes ?mes_b) (ano ?ano) (empresa ?empresa) (cuenta inventario) (monto ?debe) (glosa final)))
   (assert (cuenta (partida ?partida-inventario) (descripcion liquidando-inventario) (dia ?dia) (mes ?mes) (ano ?ano) (nombre inventario) (grupo ?grupo) (empresa ?empresa) (padre ?padre) (circulante ?circulante) (naturaleza ?naturaleza) (haber ?debe) (tipo ?tipo) (origen ?origen) (de-resultado ?de-resultado) (liquidada true)))
   (modify ?perdidas-y-ganancias (partida ?partida) (debe (+ ?debe-i ?debe)) (liquidada true)))

(defrule LIQUIDACION::liquidando-inventario-en-inventario-final-acreedor
   (declare (salience 2))
   (empresa (nombre ?empresa))
   (balance (dia ?dia_b) (mes ?mes_b) (ano ?ano_top))
   (partida (numero ?partida) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (descripcion ?descripcion))
   ?perdidas-y-ganancias <- (cuenta (nombre perdidas-y-ganancias) (debe ?debe-i) (haber ?haber-i) (grupo ?grupo-i) (padre ?padre-i))
   (or  ?i <- (cuenta (nombre inventario) (partida ?partida-inventario) (haber ?haber) (liquidada false) (grupo ?grupo) (padre ?padre) (circulante ?circulante) (naturaleza ?naturaleza) (tipo ?tipo) (origen ?origen) (de-resultado ?de-resultado))
        ?i <- (cuenta (nombre inventario-inicial) (partida ?partida-inventario) (haber ?haber) (liquidada false) (grupo ?grupo) (padre ?padre) (circulante ?circulante) (naturaleza ?naturaleza) (tipo ?tipo) (origen ?origen) (de-resultado ?de-resultado)))
   ?f1 <- (partida-inventario-final (partida ?partida))
   (test (> ?haber 0))
   (test (>= (to_serial_date ?dia_b ?mes_b ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (printout t ?partida tab tab "|" tab ?haber crlf)
   (printout k "<tr> <td>" ?partida "</td><td></td><td>" ?haber "</td></tr>" crlf)
   (modify ?i (liquidada true))
   (assert (cargo (partida ?partida-inventario) (dia ?dia_b) (mes ?mes_b) (ano ?ano) (empresa ?empresa) (cuenta inventario) (monto ?haber) (glosa final)))
   (assert (cuenta (partida ?partida-inventario) (descripcion liquidando-inventario) (dia ?dia) (mes ?mes) (ano ?ano) (nombre inventario) (grupo ?grupo) (empresa ?empresa) (padre ?padre) (circulante ?circulante) (naturaleza ?naturaleza) (haber ?haber) (tipo ?tipo) (origen ?origen) (de-resultado ?de-resultado) (liquidada true)))
   (modify ?perdidas-y-ganancias (partida ?partida) (haber (+ ?haber-i ?haber)) (liquidada true)))

(defrule LIQUIDACION::provisionando-idpc
   (declare (salience 81))
   (fila ?numero)
   (empresa (nombre ?empresa))
   (balance (dia ?dia_b) (mes ?mes_b) (ano ?ano_top))
   ?partida <- (partida (numero ?numero) (debe ?debep) (haber ?haberp) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (descripcion ?descripcion))
   ?f1 <- (provision (partida ?numero) (cuenta ?nombre) (ano ?ano) (liquidadora ?liquidora))
   ?acreedora <- (cuenta (nombre ?nombre) (debe ?debe) (haber ?haber) (ano ?ano) (grupo ?grupo))
   ?liquidador <- (cuenta (partida nil) (nombre ?liquidora) (debe ?debe2) (haber ?haber2))
   (test (> ?haber ?debe))
   (test (>= (to_serial_date ?dia_b ?mes_b ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (modify ?partida (debe (+ ?debep ?haber)) (haber (+ ?haberp ?haber)))
   (assert (abono (partida ?numero) (dia ?dia_b) (mes ?mes_b) (ano ?ano) (empresa ?empresa) (cuenta impuesto-a-la-renta-por-pagar) (monto ?haber) (glosa final)))
   (assert (cargo (partida ?numero) (dia ?dia_b) (mes ?mes_b) (ano ?ano) (empresa ?empresa) (cuenta ?liquidora) (monto ?haber) (glosa final)))
   (printout t tab tab (round ?haber) tab "|" tab tab ?nombre tab ?grupo crlf)
   (printout t tab tab tab "|" tab (round ?haber) tab tab "r<" ?liquidora ">" crlf)
   (printout t crlf)
   (retract ?f1)
   (printout k "<tr> <td> " (round ?haber) "</td><td> </td><td>" ?nombre "#" ?grupo "</td></tr>" crlf)
   (printout k "<tr><td> </td><td>" (round ?haber) "</td><td> r(" ?liquidora ") </td></tr>" crlf))

(defmodule INVENTARIO_FINAL
   (import MAIN deftemplate ?ALL)
   (export ?ALL))

(deffunction INVENTARIO_FINAL::mes_to_numero (?p0))

(deffunction INVENTARIO_FINAL::to_serial_date (?p0 ?p1 ?p2))

(deffunction INVENTARIO_FINAL::mes_to_numero
   (?mes)
   (switch ?mes
      (case enero then
         1)
      (case febrero then
         2)
      (case marzo then
         3)
      (case abril then
         4)
      (case mayo then
         5)
      (case junio then
         6)
      (case julio then
         7)
      (case agosto then
         8)
      (case septiembre then
         9)
      (case octubre then
         10)
      (case noviembre then
         11)
      (case diciembre then
         12)))

(deffunction INVENTARIO_FINAL::to_serial_date
   (?dia ?mes ?ano)
   (+ (* 10000 ?ano) (* 100 (mes_to_numero ?mes)) ?dia))

(defrule INVENTARIO_FINAL::inicio-primitiva
   (declare (salience 10000))
   =>
   (printout t "----------------- INVENTARIO FINAL ------------------" crlf))

(defrule INVENTARIO_FINAL::fin-kindle-inventario-final
   (declare (salience -100))
   =>
   (printout kk "</tbody></table>" crlf)
   (close kk))

(defrule INVENTARIO_FINAL::inicio-kindle-k-inventario-final
   (declare (salience 10000))
   (empresa (nombre ?empresa))
   =>
   (bind ?archivo (str-cat "./doc/" ?empresa "-inventario.markdown"))
   (open ?archivo kk "a")
   (printout kk "<table><tbody>" crlf))

(defrule INVENTARIO_FINAL::in
   (no)
   (cuenta (nombre inventario) (partida ?partida) (debe ?debe) (haber ?haber))
   =>
   (printout t ---- tab ?debe tab "|" ?haber tab partida tab ?partida crlf))

(defrule INVENTARIO_FINAL::corrigiendo-errores-de-grupo
   (declare (salience 1000))
   (cuenta (nombre ?nombre) (partida nil) (grupo ?grupo) (circulante ?circulante))
   ?cuenta <- (cuenta (nombre ?nombre) (grupo false) (partida ?partida))
   =>
   (modify ?cuenta (grupo ?grupo) (circulante ?circulante)))

(defrule INVENTARIO_FINAL::cargar-cuenta-existente
   (declare (salience 9800))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (empresa (nombre ?empresa))
   (partida (dia ?dia) (mes ?mes) (ano ?ano) (numero ?numero))
   ?cargo <- (cargo (qty ?qty) (electronico ?electronico) (tipo-de-documento ?tipo-de-documento) (activo-fijo ?activo-fijo) (partida ?numero) (realizado false) (empresa ?empresa) (ano ?ano) (cuenta ?nombre) (monto ?monto) (glosa ?glosa))
   ?cuenta <- (cuenta (partida ?numero) (nombre ?nombre) (debe ?debe) (haber ?haber) (origen ?origen) (de-resultado ?de-resultado) (grupo ?grupo))
   (test (> ?monto 0))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (assert (cuenta (qty ?qty) (electronico ?electronico) (tipo-de-documento ?tipo-de-documento) (activo-fijo ?activo-fijo) (nombre ?nombre) (partida ?numero) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (debe (round ?monto)) (origen real) (de-resultado ?de-resultado))
           (grupo ?grupo))
   (modify ?cargo (realizado true))
   (printout t "cfinal-->" tab ?monto tab "|" tab 0 tab ?nombre tab ?dia " de " ?mes tab ?glosa tab ?grupo crlf)
   (printout kk "<tr><td> c-->" tab ?monto tab "|" tab 0 tab ?nombre tab ?dia " de " ?mes tab ?glosa tab ?grupo "</td></tr>" crlf))

(defrule INVENTARIO_FINAL::cargar-cuenta-nueva
   (declare (salience 980))
   (empresa (nombre ?empresa))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (partida (dia ?dia) (mes ?mes) (ano ?ano) (numero ?numero))
   ?cargo <- (cargo (qty ?qty) (electronico ?electronico) (tipo-de-documento ?tipo-de-documento) (activo-fijo ?activo-fijo) (partida ?numero) (realizado false) (empresa ?empresa) (ano ?ano) (cuenta ?nombre) (monto ?monto) (glosa ?glosa))
   ?cuenta <- (cuenta (partida nil) (dia nil) (mes nil) (ano nil) (nombre ?nombre) (tipo ?tipo) (grupo ?grupo) (padre ?padre) (circulante ?circulante) (naturaleza ?naturaleza) (descripcion ?descripcion) (origen ?origen) (de-resultado ?de-resultado))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (assert (cuenta (qty ?qty) (electronico ?electronico) (tipo-de-documento ?tipo-de-documento) (activo-fijo ?activo-fijo) (partida ?numero) (descripcion ?descripcion) (dia ?dia) (mes ?mes) (ano ?ano) (nombre ?nombre) (grupo activo) (empresa ?empresa) (padre ?padre) (circulante ?circulante) (naturaleza ?naturaleza) (tipo ?tipo) (origen real) (de-resultado ?de-resultado))))

(defrule INVENTARIO_FINAL::abonar-cuenta-existente
   (declare (salience 9800))
   (empresa (nombre ?empresa))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (partida (dia ?dia) (mes ?mes) (ano ?ano) (numero ?numero))
   ?abono <- (abono (qty ?qty) (electronico ?electronico) (tipo-de-documento ?tipo-de-documento) (activo-fijo ?activo-fijo) (partida ?numero) (realizado false) (empresa ?empresa) (cuenta ?nombre) (monto ?monto) (glosa ?glosa) (ano ?ano))
   ?cuenta <- (cuenta (partida ?numero) (nombre ?nombre) (debe ?debe) (haber ?haber) (tipo ?tipo) (circulante ?circulante) (origen ?origen) (de-resultado ?de-resultado) (grupo ?grupo))
   (test (> ?monto 0))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (assert (cuenta (qty ?qty) (electronico ?electronico) (tipo-de-documento ?tipo-de-documento) (activo-fijo ?activo-fijo) (partida ?numero) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (haber (round ?monto)) (origen real) (de-resultado ?de-resultado)))
   (modify ?abono (realizado true))
   (printout kk "<tr><td>a<--" tab 0 tab "|" tab ?monto tab ?nombre tab ?dia " de " ?mes tab ?glosa tab ?grupo "</td></tr>" crlf))

(defrule INVENTARIO_FINAL::abonar-cuenta-nueva
   (declare (salience 980))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (empresa (nombre ?empresa))
   (partida (dia ?dia) (mes ?mes) (ano ?ano) (numero ?numero))
   ?abono <- (abono (qty ?qty) (electronico ?electronico) (tipo-de-documento ?tipo-de-documento) (activo-fijo ?activo-fijo) (partida ?numero) (realizado false) (empresa ?empresa) (ano ?ano) (cuenta ?nombre) (monto ?monto) (glosa ?glosa))
   ?cuenta <- (cuenta (nombre ?nombre) (mes nil) (partida nil) (dia nil) (circulante ?circulante) (naturaleza ?naturaleza) (padre ?padre) (tipo ?tipo) (grupo ?grupo) (descripcion ?descripcion) (origen ?origen) (de-resultado ?de-resultado))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (assert (cuenta (qty ?qty) (electronico ?electronico) (tipo-de-documento ?tipo-de-documento) (activo-fijo ?activo-fijo) (partida ?numero) (empresa ?empresa) (nombre ?nombre) (grupo activo) (tipo ?tipo) (padre ?padre) (circulante ?circulante) (naturaleza ?naturaleza) (descripcion ?descripcion) (origen real) (mes ?mes) (dia ?dia) (ano ?ano) (de-resultado ?de-resultado))))

(defmodule ACCIONES
   (import MAIN ?ALL))

(defrule ACCIONES::inicio-de-modulo-acciones
   (declare (salience 10000))
   =>
   (printout t "-------------------- ACCIONES -----------------------------------------------------------" crlf)
   (printout t "  material             dia    u       cu      ct        u      cu      ct            descripcion" crlf)
   (printout t "..........................................................................................." crlf)
   (printout t "                             ..........entrada.........|...........salida........." crlf)
   (assert (comando (nombre hacer-inventario))))

(defrule ACCIONES::inventario-asiento-inicial
   (empresa (nombre ?empresa))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   ?cuenta <- (cuenta (origen ?origen) (partida nil) (nombre accionario) (grupo ?grupo) (circulante ?circulante) (debe ?debe) (haber ?haber) (balanceado ?balanceado))
   ?accionario <- (accionario (dia ?dia) (mes ?mes) (u ?unidades) (operacion asiento-inicial) (material ?material) (partida ?numero) (ct ?total) (cu ?costo_unitario))
   =>
   (assert (cuenta (origen ?origen) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (partida ?numero) (nombre accionario) (grupo ?grupo) (circulante ?circulante) (debe ?total) (haber 0) (balanceado ?balanceado)))
   (printout t ?material tab ?dia tab ?unidades tab ?costo_unitario tab ?total tab tab tab tab asiento-inicial crlf)
   (halt))

(defrule ACCIONES::inventario-devolucion
   (empresa (nombre ?empresa))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   ?cuenta <- (cuenta (origen ?origen) (partida nil) (nombre accionario) (grupo ?grupo) (circulante ?circulante) (debe ?debe) (haber ?haber) (balanceado ?balanceado) (tipo ?tipo))
   ?accionario <- (accionario (dia ?dia) (mes ?mes) (u ?unidades) (operacion devolucion) (material ?material) (partida ?numero) (ct ?total) (cu ?costo_unitario))
   =>
   (assert (cuenta (origen ?origen) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (partida ?numero) (nombre accionario) (grupo ?grupo) (circulante ?circulante) (debe ?total) (haber 0) (balanceado ?balanceado) (tipo ?tipo)))
   (printout t ?material tab ?dia tab ?unidades tab ?costo_unitario tab ?total tab tab tab tab devolucion crlf))

(defrule ACCIONES::inventario-gasto-sobre-compra
   (empresa (nombre ?empresa))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   ?cuenta <- (cuenta (origen ?origen) (partida nil) (nombre acciones) (grupo ?grupo) (circulante ?circulante) (debe ?debe) (haber ?haber) (balanceado ?balanceado) (tipo ?tipo))
   ?accionario <- (accionario (dia ?dia) (mes ?mes) (u ?unidades) (operacion gasto-sobre-compra) (material ?material) (partida ?numero) (ct ?total) (cu ?costo_unitario))
   =>
   (assert (cuenta (origen ?origen) (empresa ?empresa) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (nombre acciones) (grupo ?grupo) (circulante ?circulante) (debe ?total) (haber 0) (balanceado ?balanceado) (tipo ?tipo)))
   (printout t ?material tab ?dia tab ?unidades tab ?costo_unitario tab ?total tab tab tab tab gasto-sobre-compra crlf))

(defrule ACCIONES::inventario-compra
   (empresa (nombre ?empresa))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   ?cuenta <- (cuenta (origen ?origen) (partida nil) (nombre acciones) (grupo ?grupo) (circulante ?circulante) (debe ?debe) (haber ?haber) (balanceado ?balanceado) (tipo ?tipo))
   ?accionario <- (accionario (dia ?dia) (mes ?mes) (u ?unidades) (operacion compra) (material ?material) (partida ?numero) (ct ?total) (cu ?costo_unitario))
   =>
   (assert (cuenta (origen ?origen) (partida ?numero) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (nombre acciones) (grupo ?grupo) (circulante ?circulante) (debe ?total) (haber 0) (balanceado ?balanceado) (tipo ?tipo)))
   (printout t ?material tab ?dia tab ?unidades tab ?costo_unitario tab ?total tab tab tab tab compra crlf))

(defrule ACCIONES::inventario-venta
   (empresa (nombre ?empresa))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   ?cuenta <- (cuenta (origen ?origen) (partida nil) (nombre acciones) (grupo ?grupo) (circulante ?circulante) (debe ?debe) (haber ?haber) (balanceado ?balanceado) (tipo ?tipo))
   ?accionario <- (accionario (dia ?dia) (mes ?mes) (u ?unidades) (operacion venta) (material ?material) (partida ?numero) (ct ?total) (cu ?costo_unitario))
   =>
   (assert (cuenta (origen ?origen) (partida ?numero) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (nombre accionario) (grupo ?grupo) (circulante ?circulante) (debe 0) (haber ?total) (balanceado ?balanceado) (tipo ?tipo)))
   (printout t ?material tab ?dia tab tab tab tab ?unidades tab ?costo_unitario tab ?total tab venta crlf))

(defrule ACCIONES::mostrar-accionario
   (empresa (nombre ?empresa))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   ?comando <- (comando (nombre mostrar-inventario) (realizado false))
   ?accionario <- (accionario (dia ?dia) (mes ?mes) (ano ?ano) (u ?unidades) (operacion ?operacion) (material ?material) (partida ?partida) (ct ?total) (cu ?costo_unitario))
   =>
   (modify ?comando (realizado true))
   (printout t ?dia " de " ?mes " - " partida " #" ?partida ": " ?operacion " de " ?unidades " " ?material " a " ?costo_unitario " c/u por un valor total de " ?total crlf))

(defmodule AJUSTE
   (import MAIN deftemplate ?ALL))

(deffunction AJUSTE::mes_to_numero (?p0))

(deffunction AJUSTE::to_serial_date (?p0 ?p1 ?p2))

(deffunction AJUSTE::mes_to_numero
   (?mes)
   (switch ?mes
      (case enero then
         1)
      (case febrero then
         2)
      (case marzo then
         3)
      (case abril then
         4)
      (case mayo then
         5)
      (case junio then
         6)
      (case julio then
         7)
      (case agosto then
         8)
      (case septiembre then
         9)
      (case octubre then
         10)
      (case noviembre then
         11)
      (case diciembre then
         12)))

(deffunction AJUSTE::to_serial_date
   (?dia ?mes ?ano)
   (+ (* 10000 ?ano) (* 100 (mes_to_numero ?mes)) ?dia))

(defrule AJUSTE::inicio-de-modulo-subtotal
   (declare (salience 10000))
   =>
   (printout t "----------------------- AJUSTE ----------------------" crlf)
   (set-strategy depth))

(defrule AJUSTE::preparacion-cuenta
   ?cuenta <- (cuenta (mostrado-en-t true))
   =>
   (modify ?cuenta (mostrado-en-t false)))

(defrule AJUSTE::preparacion-totales
   ?totales <- (totales)
   =>
   (retract ?totales))

(defrule AJUSTE::elimina-subtotales-de-utilidad-tributaria
   (no)
   ?u <- (subtotales (cuenta utilidad-tributaria))
   =>
   (retract ?u))

(defrule AJUSTE::elimina-subtotales-de-salarios
   (no)
   ?u <- (subtotales (cuenta salarios))
   =>
   (retract ?u))

(defrule AJUSTE::elimina-subtotales-de-idpc
   ?u <- (subtotales (cuenta idpc))
   =>
   (retract ?u))

(defrule AJUSTE::elimina-subtotales-de-patrimonio
   (no)
   (cuenta (nombre ?nombre) (grupo patrimonio))
   ?u <- (subtotales (cuenta ?nombre))
   =>
   (retract ?u))

(defrule AJUSTE::preparacion-subtotal
   (no)
   ?subtotales <- (subtotales (cuenta ?cuenta))
   (test (neq ?cuenta costos-de-ventas))
   =>
   (retract ?subtotales))

(defrule AJUSTE::fin-de-modulo-subtotal
   (declare (salience 10))
   =>
   (printout t "----fin------------------- AJUSTE ----------------------" crlf))

(defmodule AJUSTEB
   (import MAIN deftemplate ?ALL))

(deffunction AJUSTEB::mes_to_numero (?p0))

(deffunction AJUSTEB::to_serial_date (?p0 ?p1 ?p2))

(deffunction AJUSTEB::mes_to_numero
   (?mes)
   (switch ?mes
      (case enero then
         1)
      (case febrero then
         2)
      (case marzo then
         3)
      (case abril then
         4)
      (case mayo then
         5)
      (case junio then
         6)
      (case julio then
         7)
      (case agosto then
         8)
      (case septiembre then
         9)
      (case octubre then
         10)
      (case noviembre then
         11)
      (case diciembre then
         12)))

(deffunction AJUSTEB::to_serial_date
   (?dia ?mes ?ano)
   (+ (* 10000 ?ano) (* 100 (mes_to_numero ?mes)) ?dia))

(defrule AJUSTEB::inicio-de-modulo-subtotal
   (declare (salience 10000))
   =>
   (set-strategy depth))

(defrule AJUSTEB::preparacion-totales
   ?totales <- (totales)
   =>
   (retract ?totales))

(defrule AJUSTEB::preparacion-cuentas-activo
   ?cuenta <- (cuenta (nombre ?nombre) (totalizada-como-activo true))
   =>
   (modify ?cuenta (totalizada-como-activo false)))

(defrule AJUSTEB::preparacion-cuentas-activo-circulante
   ?cuenta <- (cuenta (totalizada-como-activo-circulante true))
   =>
   (modify ?cuenta (totalizada-como-activo-circulante false)))

(defrule AJUSTEB::preparacion-cuentas-activo-fijo
   ?cuenta <- (cuenta (totalizada-como-activo-fijo true))
   =>
   (modify ?cuenta (totalizada-como-activo-fijo false)))

(defrule AJUSTEB::preparacion-cuentas-pasivo
   ?cuenta <- (cuenta (totalizada-como-pasivo true))
   =>
   (modify ?cuenta (totalizada-como-pasivo false)))

(defrule AJUSTEB::preparacion-cuentas-pasivo-circulante
   ?cuenta <- (cuenta (totalizada-como-pasivo-circulante true))
   =>
   (modify ?cuenta (totalizada-como-pasivo-circulante false)))

(defrule AJUSTEB::preparacion-cuentas-pasivo-fijo
   ?cuenta <- (cuenta (totalizada-como-pasivo-fijo true))
   =>
   (modify ?cuenta (totalizada-como-pasivo-fijo false)))

(defrule AJUSTEB::preparacion-cuentas-patrimonio
   ?cuenta <- (cuenta (totalizada-como-patrimonio true))
   =>
   (modify ?cuenta (totalizada-como-patrimonio false)))

(defrule AJUSTEB::fin-de-modulo-subtotal
   (declare (salience 10))
   =>)

(defmodule COMPROBACIONB
   (import MAIN deftemplate ?ALL))

(deffunction COMPROBACIONB::mes_to_numero (?p0))

(deffunction COMPROBACIONB::to_serial_date (?p0 ?p1 ?p2))

(deffunction COMPROBACIONB::mes_to_numero
   (?mes)
   (switch ?mes
      (case enero then
         1)
      (case febrero then
         2)
      (case marzo then
         3)
      (case abril then
         4)
      (case mayo then
         5)
      (case junio then
         6)
      (case julio then
         7)
      (case agosto then
         8)
      (case septiembre then
         9)
      (case octubre then
         10)
      (case noviembre then
         11)
      (case diciembre then
         12)))

(deffunction COMPROBACIONB::to_serial_date
   (?dia ?mes ?ano)
   (+ (* 10000 ?ano) (* 100 (mes_to_numero ?mes)) ?dia))

(defrule COMPROBACIONB::provision-de-idpc
   (no)
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (ticket (numero ?numero))
   (empresa (nombre ?empresa))
   (subtotales (cuenta idpc) (acreedor ?acreedor))
   =>
   (assert (partida (empresa ?empresa) (numero ?numero) (dia ?top) (mes ?mes_top) (ano ?ano_top) (descripcion (str-cat "Provisionando idpc en " ?mes_top)) (actividad provision-de-idpc)))
   (assert (cargo (tipo-de-documento provision-de-idpc) (cuenta idpc) (partida ?numero) (dia ?top) (mes ?mes_top) (ano ?ano_top) (empresa ?empresa) (monto ?acreedor) (glosa (str-cat por-provision-de-idpc ?acreedor))))
   (assert (abono (tipo-de-documento provision-de-idpc) (cuenta provision-impuesto-a-la-renta) (partida ?numero) (dia ?top) (mes ?mes_top) (ano ?ano_top) (empresa ?empresa) (monto ?acreedor) (glosa (str-cat por-provision-de-idpc ?acreedor))))
   (printout t "-->idpc-provisiona " tab ?acreedor tab ?mes_top crlf))

(defrule COMPROBACIONB::inicio-de-modulo-comprobacion
   (declare (salience 10000))
   =>
   (printout t "--modulo--------------- COMPROBACION B------------------" crlf))

(defrule COMPROBACIONB::inicio-kindle-k-comprobacionb-rules
   (declare (salience 10000))
   (empresa (nombre ?empresa))
   =>
   (bind ?archivo (str-cat "./doc/" ?empresa "/comprobacionb.markdown"))
   (open ?archivo k "w")
   (printout k "--- " crlf)
   (printout k "title: Saldos-B-" ?empresa crlf)
   (printout k "permalink: /" ?empresa "/comprobacion b " crlf)
   (printout k "layout: page" crlf)
   (printout k "--- " crlf))

(defrule COMPROBACIONB::fin-kindle-k
   (declare (salience -10000))
   =>
   (close k))

(defrule COMPROBACIONB::balance-encabezado
   (declare (salience -7000))
   (empresa (nombre ?empresa))
   (balance (dia ?dia) (mes ?mes) (ano ?ano))
   =>
   (printout t crlf crlf)
   (printout t "Solo se consideran las transacciones hasta el día " ?dia tab ?mes "." crlf)
   (printout t "Cifras en pesos." crlf)
   (printout t "Se han practicado liquidaciones, por lo que NO se muestran cuentas nominales, ni subcuentas reales" crlf)
   (printout t crlf crlf "           B A L A N C E  DE COMPROBACION DE SUMAS Y SALDOS año: " ?ano crlf)
   (printout t tab tab SUMAS tab tab "|" tab SALDOS crlf)
   (printout t tab tab DEBE tab HABER tab "|" tab DEBER tab ACREEDOR crlf)
   (printout t "---------------------------------------------------------------------" crlf)
   (printout k crlf crlf)
   (printout k "Solo se consideran las transacciones hasta el día " ?dia tab ?mes "." crlf)
   (printout k "Cifras en pesos." crlf)
   (printout k "Se han practicado liquidaciones, por lo que NO se muestran cuentas nominales" crlf)
   (printout k "<table rules='groups'>" crlf)
   (printout k "<style> tfoot {  border: 3px solid black;  } </style> " crlf)
   (printout k "<thead><th colspan='7'> B A L A N C E  DE COMPROBACION DE SUMAS Y DE SALDOS </th> </thead>" crlf)
   (printout k "<thead> <th colspan='7'> " ?empresa "</th></thead>" crlf)
   (printout k "<thead> <th> </th> <th align='center' colspan= '2'>SUMAS</th> <th>|</th> <th align='center' colspan='2'>SALDOS</th> <th rowspan='2' > Errores </th> </thead>" crlf)
   (printout k "<thead> <th></th>  <th>DEBE</th> <th>HABER</th> <th>|</th> <th>DEBER</th> <th>ACREEDOR</th> <th>A Corregir </th> </thead>" crlf)
   (printout k "<tbody>" crlf))

(defrule COMPROBACIONB::balance-filas-sin-revisar
   (declare (salience -8000))
   (empresa (nombre ?empresa))
   (cuenta (nombre ?cuenta) (nombre-sii ?nombre-sii))
   ?subtotal <- (subtotales (mostrado false) (cuenta ?cuenta) (debe ?debe) (haber ?haber) (deber ?deber) (acreedor ?acreedor))
   (not (exists
             (revision (cuenta ?cuenta))))
   (test (neq ?cuenta ingresos-brutos))
   (test (neq ?cuenta ventas))
   (test (neq 0 (- ?haber ?debe)))
   =>
   (modify ?subtotal (mostrado true))
   (printout t tab tab ?debe tab ?haber tab "|" tab ?deber tab ?acreedor tab ?cuenta crlf)
   (printout k "<tr style=' background: #fff; border: 1px solid red;'>" crlf)
   (printout k "<td>" ?nombre-sii "<small>" ?cuenta "</small> </td> <td align='right'>" ?debe "</td> <td align='right'>" ?haber "</td> <td> | </td> <td align='right'> " ?deber "</td> <td align='right'>" ?acreedor "</td> </tr>" crlf))

(defrule COMPROBACIONB::balance-filas-que-requieren-correcciones
   (declare (salience -8000))
   (empresa (nombre ?empresa))
   (cuenta (nombre ?cuenta) (nombre-sii ?nombre-sii))
   ?subtotal <- (subtotales (mostrado false) (cuenta ?cuenta) (debe ?debe) (haber ?haber) (deber ?deber) (acreedor ?acreedor))
   (revision (cuenta ?cuenta) (revisado false) (a-corregir ?a-corregir))
   (test (neq ?cuenta ingresos-brutos))
   (test (neq ?cuenta ventas))
   (test (neq 0 (- ?haber ?debe)))
   =>
   (modify ?subtotal (mostrado true))
   (printout t tab tab ?debe tab ?haber tab "|" tab ?deber tab ?acreedor tab ?cuenta crlf)
   (printout k "<tr>" crlf)
   (printout k "<td>" ?nombre-sii "<small>" ?cuenta " </small></td> <td align='right'>" ?debe "</td> <td align='right'>" ?haber "</td> <td> | </td> <td align='right'> " ?deber "</td> <td align='right'>" ?acreedor "</td> " crlf)
   (printout k "<td colspan='2' style=' background: #faa; border: 1px solid red;'>" ?a-corregir " </td>" crlf)
   (printout k "</tr>" crlf))

(defrule COMPROBACIONB::balance-filas-que-no-requieren-correcciones
   (declare (salience -8000))
   (empresa (nombre ?empresa))
   (cuenta (nombre ?cuenta) (nombre-sii ?nombre-sii))
   ?subtotal <- (subtotales (mostrado false) (cuenta ?cuenta) (debe ?debe) (haber ?haber) (deber ?deber) (acreedor ?acreedor))
   (revision (cuenta ?cuenta) (revisado true))
   (test (neq ?cuenta ingresos-brutos))
   (test (neq ?cuenta ventas))
   (test (neq 0 (- ?haber ?debe)))
   =>
   (modify ?subtotal (mostrado true))
   (printout t tab tab ?debe tab ?haber tab "|" tab ?deber tab ?acreedor tab ?cuenta crlf)
   (printout k "<tr>" crlf)
   (printout k "<td>" ?nombre-sii "<small> " ?cuenta " </small> </td> <td align='right'>" ?debe "</td> <td align='right'>" ?haber "</td> <td align='right'> | </td> <td align='right'> " ?deber "</td> <td align='right'>" ?acreedor "</td>" crlf)
   (printout k "</tr>" crlf))

(defrule COMPROBACIONB::balance-subtotales
   (declare (salience -8000))
   (empresa (nombre ?empresa))
   ?subtotales <- (subtotales (mostrar-en-comprobacion true) (mostrado true) (mostrado-en-resumen false) (cuenta ?cuenta) (debe ?debe) (haber ?haber) (deber ?deber) (acreedor ?acreedor))
   ?totales <- (totales (debe ?total_debe) (haber ?total_haber) (deber ?total_deber) (acreedor ?total_acreedor))
   (test (neq ?cuenta ingresos-brutos))
   (test (neq ?cuenta ventas))
   =>
   (modify ?totales (debe (+ ?total_debe ?debe)) (haber (+ ?total_haber ?haber)) (deber (+ ?total_deber ?deber)) (acreedor (+ ?total_acreedor ?acreedor)))
   (modify ?subtotales (mostrado-en-resumen true))
   (assert (hacer-balance-footer)))

(defrule COMPROBACIONB::balance-footer
   (declare (salience -10000))
   ?comando <- (hacer-balance-footer)
   (empresa (nombre ?empresa))
   (totales (debe ?debe) (haber ?haber) (deber ?deber) (activos ?activos) (activo-circulante ?activo-circulante) (activo-fijo ?activo-fijo) (pasivos ?pasivos) (pasivo-circulante ?pasivo-circulante) (pasivo-fijo ?pasivo-fijo) (patrimonio ?patrimonio) (acreedor ?acreedor))
   =>
   (bind ?patrimonio_pasivo (+ ?patrimonio ?pasivos))
   (printout t tab "......................................................." crlf)
   (printout t tab tab ?debe tab ?haber tab "|" tab ?deber tab ?acreedor tab activos= ?activos crlf)
   (printout t "------------------------------------------------------------------------" crlf)
   (printout k "</tbody>" crlf)
   (printout k "<tfoot>" crlf)
   (printout k "<tr> <td></td> <td align='right'>" ?debe "</td> <td align='right'>" ?haber "</td><td> | </td> <td align='right'>" ?deber "</td> <td align='right'>" ?acreedor "</td> </tr>" crlf)
   (printout k "</tfoot>" crlf)
   (printout k "</table>" crlf)
   (retract ?comando))

(defmodule INVENTARIO
   (import MAIN ?ALL))

(deffunction INVENTARIO::numero_to_mes (?p0))

(deffunction INVENTARIO::numero_to_mes
   (?numero)
   (switch ?numero
      (case 1 then
         enero)
      (case 2 then
         febrero)
      (case 3 then
         marzo)
      (case 4 then
         abril)
      (case 5 then
         mayo)
      (case 6 then
         junio)
      (case 7 then
         julio)
      (case 8 then
         agosto)
      (case 9 then
         septiembre)
      (case 10 then
         octubre)
      (case 11 then
         noviembre)
      (case 12 then
         diciembre)
      (case 13 then
         enero)
      (case 14 then
         febrero)))

(defrule INVENTARIO::fin
   (declare (salience -100))
   =>
   (printout k "</tbody></table>" crlf)
   (close k))

(defrule INVENTARIO::inicio-kindle-k-inventario-rules
   (declare (salience 10000))
   (empresa (nombre ?empresa))
   =>
   (bind ?archivo (str-cat "./doc/" ?empresa "/inventario.markdown"))
   (open ?archivo k "w")
   (printout k "--- " crlf)
   (printout k "layout: page" crlf)
   (printout k "--- " crlf)
   (printout k "" crlf))

(defrule INVENTARIO::inicio-de-modulo-inventario
   (declare (salience 10000))
   =>
   (printout t "-------------------- INVENTARIO -----------------------------------------------------------" crlf)
   (printout t "  material             dia    u       cu      ct        u      cu      ct            descripcion" crlf)
   (printout t "..........................................................................................." crlf)
   (printout t "                             ..........entrada.........|...........salida........." crlf)
   (printout k "<table><tbody>" crlf)
   (printout k "<tr> <th colspan='13'> INVENTARIO </th> </tr>" crlf)
   (printout k "<tr><td>Ptda</td> <td> material </td> <td>dia</td> <td>mes</td> <td>u</td> <td>cu</td> <td>ct</td> <td>u</td> <td>cu</td> <td>ct</td> <td>Oper.</td> <td> Ref </td></tr>" crlf)
   (printout k "<tr> <td></td> <td></td> <td></td> <td style='background-color: gold' colspan='3'> entrada</td> <td style='background-color: cornflowerblue' colspan='3'>salida </td> <td style='colspan=4'> </td> </tr>" crlf)
   (assert (comando (nombre hacer-inventario))))

(defrule INVENTARIO::inventario-asiento-inicial
   (empresa (nombre ?empresa))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   ?cuenta <- (cuenta (origen ?origen) (partida nil) (nombre inventario) (grupo ?grupo) (circulante ?circulante) (debe ?debe) (haber ?haber) (balanceado ?balanceado))
   ?inventario <- (inventario (dia ?dia) (mes ?mes) (u ?unidades) (operacion asiento-inicial) (material ?material) (partida ?numero) (ct ?total) (cu ?costo_unitario) (referencia ?referencia))
   =>
   (assert (cuenta (origen ?origen) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (partida ?numero) (nombre inventario) (grupo ?grupo) (circulante ?circulante) (debe ?total) (haber 0) (balanceado ?balanceado) (liquidada true)))
   (printout t ?material tab ?dia tab ?unidades tab ?costo_unitario tab ?total tab tab tab tab inventario-inicial crlf)
   (printout k "<tr> <td><a href= '/" ?empresa "/#Partida-" ?numero "'>" ?numero "</a></td><td>" ?material "</td> <td>" ?dia "</td> <td>" ?mes "</td> <td>" ?unidades "</td> <td>" ?costo_unitario "</td> <td>" ?total "</td> <td colspan='3'></td> <td>asiento-inicial</td><td>" (if (neq nil ?referencia)
      then
      "<a href= '/alectrico-2021/#Partida-"
      ?referencia
      "'> </a>"
      else
      "") "</td></tr>" crlf))

(defrule INVENTARIO::inventario-devolucion
   (empresa (nombre ?empresa))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   ?cuenta <- (cuenta (origen ?origen) (partida nil) (nombre inventario) (grupo ?grupo) (circulante ?circulante) (debe ?debe) (haber ?haber) (balanceado ?balanceado) (tipo ?tipo))
   ?inventario <- (inventario (dia ?dia) (mes ?mes) (u ?unidades) (operacion devolucion) (material ?material) (partida ?numero) (ct ?total) (cu ?costo_unitario) (referencia ?referencia))
   =>
   (assert (cuenta (origen ?origen) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (partida ?numero) (nombre inventario) (grupo ?grupo) (circulante ?circulante) (debe ?total) (haber 0) (balanceado ?balanceado) (tipo ?tipo)))
   (printout t ?material tab ?dia tab ?unidades tab ?costo_unitario tab ?total tab tab tab tab devolucion crlf)
   (printout k "<tr>< <td><a href= '/" ?empresa "/#Partida-" ?numero "'>" ?numero "</a></td>td>" ?material "</td> <td>" ?dia "</td> <td>" ?mes " </td> <td>" ?unidades "</td> <td>" ?costo_unitario "</td> <td>" ?total "</td>< td colspan='3'></td> <td>devolucion</td><td>" (if (neq nil ?referencia)
      then
      "<a href= '/alectrico-2021/#Partida-"
      ?referencia
      "'> </a>"
      else
      "") "</td> </tr>" crlf))

(defrule INVENTARIO::inventario-gasto-sobre-compra
   (empresa (nombre ?empresa))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   ?cuenta <- (cuenta (origen ?origen) (partida nil) (nombre inventario) (grupo ?grupo) (circulante ?circulante) (debe ?debe) (haber ?haber) (balanceado ?balanceado) (tipo ?tipo))
   ?inventario <- (inventario (dia ?dia) (mes ?mes) (u ?unidades) (operacion gasto-sobre-compra) (material ?material) (partida ?numero) (ct ?total) (cu ?costo_unitario) (referencia ?referencia))
   =>
   (assert (cuenta (origen ?origen) (empresa ?empresa) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (nombre inventario) (grupo ?grupo) (circulante ?circulante) (debe ?total) (haber 0) (balanceado ?balanceado) (tipo ?tipo)))
   (printout t ?material tab ?dia tab ?unidades tab ?costo_unitario tab ?total tab tab tab tab gasto-sobre-compra crlf)
   (printout k "<tr>  <td><a href= '/" ?empresa "/#Partida-" ?numero "'>" ?numero "</a></td><td>" ?material "</td> <td>" ?dia "</td> <td>" ?unidades "</td> <td>" ?costo_unitario "</td> <td>" ?total "</td> <td colspan='3'></td> <td>gasto-sobre-compra</td>td>" (if (neq nil ?referencia)
      then
      "<a href= '/alectrico-2021/#Partida-"
      ?referencia
      "'> </a>"
      else
      "") "</td> </tr>" crlf))

(defrule INVENTARIO::inventario-compra
   (empresa (nombre ?empresa))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   ?cuenta <- (cuenta (origen ?origen) (partida nil) (nombre inventario) (grupo ?grupo) (circulante ?circulante) (debe ?debe) (haber ?haber) (balanceado ?balanceado) (tipo ?tipo))
   ?inventario <- (inventario (dia ?dia) (mes ?mes) (u ?unidades) (operacion compra) (material ?material) (partida ?numero) (ct ?total) (cu ?costo_unitario) (referencia ?referencia))
   =>
   (assert (cuenta (origen ?origen) (partida ?numero) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (nombre inventario) (grupo ?grupo) (circulante ?circulante) (debe ?total) (haber 0) (balanceado ?balanceado) (tipo ?tipo)))
   (printout t ?material tab ?dia tab ?unidades tab ?costo_unitario tab ?total tab tab tab tab compra crlf)
   (printout k "<tr>   <td><a href= '/" ?empresa "/#Partida-" ?numero "'>" ?numero "</a></td><td>" ?material "</td> <td>" ?dia "</td> <td>" ?mes "</td> <td>" ?unidades "</td> <td>" ?costo_unitario "</td> <td>" ?total "</td> <td colspan='3'></td> <td>compra</td><td>" (if (neq nil ?referencia)
      then
      "<a href= '/alectrico-2021/#Partida-"
      ?referencia
      "'> </a>"
      else
      "") "</td> </tr>" crlf))

(defrule INVENTARIO::inventario-venta
   (empresa (nombre ?empresa))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   ?cuenta <- (cuenta (origen ?origen) (partida nil) (nombre inventario) (grupo ?grupo) (circulante ?circulante) (debe ?debe) (haber ?haber) (balanceado ?balanceado) (tipo ?tipo))
   ?inventario <- (inventario (dia ?dia) (mes ?mes) (u ?unidades) (operacion venta) (material ?material) (partida ?numero) (ct ?total) (cu ?costo_unitario) (referencia ?referencia))
   =>
   (assert (cuenta (origen ?origen) (partida ?numero) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (nombre inventario) (grupo ?grupo) (circulante ?circulante) (debe 0) (haber ?total) (balanceado ?balanceado) (tipo ?tipo)))
   (printout t ?material tab ?dia tab tab tab tab ?unidades tab ?costo_unitario tab ?total tab venta crlf)
   (printout k "<tr>  <td><a href= '/" ?empresa "/#Partida-" ?numero "'>" ?numero "</a></td><td>" ?material "</td> <td>" ?dia "</td> <td></td> <td> </td> <td></td> <td></td> <td>" ?unidades "</td> <td>" ?costo_unitario "</td> <td>" ?total "</td><td>venta</td><td>" (if (neq nil ?referencia)
      then
      (str-cat "<a href= '/alectrico-2021/#Partida-" ?referencia "'>" ?referencia "</a>")
      else
      "") "</td>  </tr>" crlf))

(defrule INVENTARIO::mostrar-inventario
   (empresa (nombre ?empresa))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   ?comando <- (comando (nombre mostrar-inventario) (realizado false))
   ?inventario <- (inventario (dia ?dia) (mes ?mes) (ano ?ano) (u ?unidades) (operacion ?operacion) (material ?material) (partida ?partida) (ct ?total) (cu ?costo_unitario) (referencia ?referencia))
   =>
   (modify ?comando (realizado true))
   (printout t ?dia " de " ?mes " - " partida " #" ?partida ": " ?operacion " de " ?unidades " " ?material " a " ?costo_unitario " c/u por un valor total de " ?total crlf)
   (printout k "<tr>   <td><a href= '/" ?empresa "/#Partida-" ?numero "'>" ?numero "</a></td><td>" ?dia " de " ?mes " - " partida " #" ?partida ": " ?operacion " de " ?unidades " " ?material " a " ?costo_unitario " c/u por un valor total de " ?total "</td> <td>" (if (neq nil ?referencia)
      then
      "<a href= '/alectrico-2021/#Partida-"
      ?referencia
      "'> </a>"
      else
      "") "</td> </tr>" crlf))

(defmodule RESULTADO
   (import MAIN deftemplate ?ALL))

(deffunction RESULTADO::mes_to_numero (?p0))

(deffunction RESULTADO::to_serial_date (?p0 ?p1 ?p2))

(deffunction RESULTADO::mes_to_numero
   (?mes)
   (switch ?mes
      (case enero then
         1)
      (case febrero then
         2)
      (case marzo then
         3)
      (case abril then
         4)
      (case mayo then
         5)
      (case junio then
         6)
      (case julio then
         7)
      (case agosto then
         8)
      (case septiembre then
         9)
      (case octubre then
         10)
      (case noviembre then
         11)
      (case diciembre then
         12)))

(deffunction RESULTADO::to_serial_date
   (?dia ?mes ?ano)
   (+ (* 10000 ?ano) (* 100 (mes_to_numero ?mes)) ?dia))

(defrule RESULTADO::inicio
   (declare (salience 10000))
   =>
   (printout t "--modulo-------------- RESULTADO------------------" crlf))

(defrule RESULTADO::estado-de-resultados-mensual
   (balance (mes ?mes) (ano ?ano))
   (empresa (nombre ?empresa))
   (subtotales (cuenta ventas-con-eboleta-afecta) (debe ?ventas-con-eboleta-afecta))
   (subtotales (cuenta ventas-con-eboleta-exenta) (debe ?ventas-con-eboleta-exenta))
   (subtotales (cuenta ventas-con-factura-afecta) (debe ?ventas-con-factura-afecta))
   (subtotales (cuenta ventas-con-factura-exenta) (debe ?ventas-con-factura-exenta))
   (subtotales (cuenta ventas-con-voucher-afecto) (debe ?ventas-con-voucher-afecto))
   (subtotales (cuenta ingresos-brutos) (acreedor ?ingresos-brutos))
   (subtotales (cuenta ventas) (acreedor ?ventas))
   (subtotales (cuenta devolucion-sobre-ventas) (debe ?devolucion-sobre-ventas))
   (subtotales (cuenta compras) (debe ?compras))
   (subtotales (cuenta gastos-sobre-compras) (debe ?gastos-sobre-compras))
   (subtotales (cuenta inventario-inicial) (debe ?inventario-inicial))
   (subtotales (cuenta inventario-final) (debe ?inventario-final))
   (subtotales (cuenta gastos-administrativos) (debe ?gastos-administrativos-debe) (haber ?gastos-administrativos-haber))
   (subtotales (cuenta gastos-ventas) (deber ?gastos-ventas))
   (subtotales (cuenta gastos-en-investigacion-y-desarrollo) (deber ?gastos-en-investigacion-y-desarrollo))
   (subtotales (cuenta gastos-promocionales) (debe ?gastos-en-promocion))
   (subtotales (cuenta costos-de-ventas) (deber ?costos-de-ventas&:(> ?costos-de-ventas 0)))
   (subtotales (cuenta idpc) (deber ?idpc))
   (subtotales (cuenta reserva-legal) (haber ?reserva-legal))
   (subtotales (cuenta utilidad) (acreedor ?utilidad-del-ejercicio-haber) (deber ?utilidad-del-ejercicio-debe))
   (subtotales (cuenta provision-impuesto-a-la-renta) (acreedor ?provision-impuesto-a-la-renta))
   (subtotales (cuenta amortizacion-intangibles) (debe ?amortizacion-intangibles))
   (subtotales (cuenta depreciacion) (debe ?depreciacion))
   (subtotales (cuenta salarios) (debe ?salarios))
   (subtotales (cuenta impuesto-a-la-renta-por-pagar) (acreedor ?impuesto-a-la-renta-por-pagar))
   (subtotales (cuenta perdidas-ejercicios-anteriores) (debe ?pea))
   (subtotales (cuenta perdida-por-correccion-monetaria) (debe ?perdida-por-correccion-monetaria))
   (subtotales (cuenta ganancia-por-correccion-monetaria) (haber ?ganancia-por-correccion-monetaria))
   (tasas (idpc ?tasa-idpc) (mes diciembre) (ano ?ano))
   =>
   (bind ?gastos-administrativos (- ?gastos-administrativos-debe ?gastos-administrativos-haber))
   (bind ?utilidad-del-ejercicio (- ?utilidad-del-ejercicio-haber ?utilidad-del-ejercicio-debe))
   (bind ?ventas-netas (- ?ventas ?devolucion-sobre-ventas))
   (bind ?compras-totales (+ ?compras ?gastos-sobre-compras))
   (bind ?compras-netas ?compras-totales)
   (bind ?existencias (+ ?compras-netas ?inventario-inicial))
   (bind ?utilidad-bruta (- ?ventas-netas ?costos-de-ventas))
   (bind ?gastos-de-operacion (+ ?gastos-administrativos ?gastos-ventas ?gastos-en-investigacion-y-desarrollo ?gastos-en-promocion ?amortizacion-intangibles ?depreciacion ?salarios))
   (bind ?utilidad-de-operacion (- ?utilidad-bruta ?gastos-de-operacion ?pea))
   (bind ?utilidad-antes-de-reserva ?utilidad-de-operacion)
   (bind ?utilidad-antes-de-idpc (- ?utilidad-de-operacion ?reserva-legal))
   (printout t ?empresa crlf)
   (printout t "================================================================================" crlf)
   (printout t tab tab "ESTADO DE RESULTADOS" crlf)
   (printout t ?mes tag ?ano crlf)
   (printout t "================================================================================" crlf)
   (printout t "|" tab tab "|     " ?ingresos-brutos tab "Ingresos Brutos Percibidos A.29-LIR" crlf)
   (printout t "|" tab tab "|     " ?ventas tab "Ventas" crlf)
   (printout t "|" tab tab tab ?ventas-con-eboleta-afecta tab "Vtas eBoleta Afecta" crlf)
   (printout t "|" tab tab tab ?ventas-con-eboleta-exenta tab "Vtas eBoleta Exenta" crlf)
   (printout t "|" tab tab tab ?ventas-con-factura-afecta tab "Vtas Factura Afecta" crlf)
   (printout t "|" tab tab tab ?ventas-con-factura-exenta tab "Vtas Factura Exenta" crlf)
   (printout t "|" tab tab tab ?ventas-con-voucher-afecto tab "Vtas Voucher Afecto" crlf)
   (printout t "|" tab tab "| (-) -  " tab tab "Rebajas sobre ventas" crlf)
   (printout t "|" tab tab "| (-) " ?devolucion-sobre-ventas tab tab "Devoluciones sobre ventas" crlf)
   (printout t "|" tab tab "| (-) -  " tab tab "Descuentos sobre ventas" crlf)
   (printout t "|" tab tab "| (=) " ?ventas-netas tab "Ventas Netas" crlf)
   (printout t crlf)
   (printout t "|" tab tab "| (-) " ?costos-de-ventas tab "Costos de Ventas A.30-LIR" crlf)
   (printout t crlf)
   (printout t "|" ?compras tab tab tab tab "Compras" crlf)
   (printout t "| (+) " ?gastos-sobre-compras tab tab tab tab "Gastos sobre Compras" crlf)
   (printout t "|" ?compras-totales tab tab tab tab "Compras Totales" crlf)
   (printout t "| (-) - " tab tab tab tab "Rebajas sobre Compras" crlf)
   (printout t "| (-) - " tab tab tab tab "Devoluciones sobre Compras" crlf)
   (printout t "| (-) - " tab tab tab tab "Descuentos sobre Compras" crlf)
   (printout t "|" ?compras-totales tab tab tab tab "Compras Netas" crlf)
   (printout t crlf)
   (printout t "| (+) " ?inventario-inicial tab "|" tab tab "Inventario Inicial" crlf)
   (printout t "| (=) " ?existencias tab "|" tab tab "Mercadería Disponible para la Venta " crlf)
   (printout t "| (-) " ?inventario-final tab "|" tab tab "Inventario Final " crlf)
   (printout t crlf)
   (printout t "|" tab tab "|     " ?utilidad-bruta tab "UTILIDAD BRUTA (Ventas Netas - Costo de Ventas)" crlf)
   (printout t "|" tab tab "| (-) " ?gastos-de-operacion tab tab "Gastos de Operación (Gastos Admon + Gastos Vtas + I+D + Promocion + Amortiza.Int A.31-LIR)" crlf)
   (printout t "|" ?gastos-administrativos tab tab tab tab "Gastos del Dpto Administración" crlf)
   (printout t "|" ?gastos-ventas tab tab tab tab "Gastos del Dpto Ventas" crlf)
   (printout t "|" ?gastos-en-investigacion-y-desarrollo tab tab tab tab "Gastos en I+D" crlf)
   (printout t "|" ?gastos-en-promocion tab tab tab tab "Gastos en Promocion" crlf)
   (printout t "|" ?amortizacion-intangibles tab tab tab tab "Amortizacion Intangibles" crlf)
   (printout t "|" ?depreciacion tab tab tab tab "Depreciacion" crlf)
   (printout t "|" ?salarios tab tab tab tab "Salarios" crlf)
   (printout t "|" tab tab "| (-) " ?pea tab tab "Pérdida Ejercicio Anterior PEA A.33-LIR)" crlf)
   (printout t "|" tab tab "|     " ?utilidad-de-operacion tab "UTILIDAD DE OPERACION (U.Bruta - G.Op. - PEA)" crlf)
   (printout t "|" tab tab "| (-) " tab tab tab "Otros Gastos" crlf)
   (printout t "|" tab tab "|     " ?utilidad-antes-de-reserva tab "UTILIDAD ANTES DE RESERVA (U.Op-Reserva Lega)" crlf)
   (printout t "|" tab tab "| (-) " ?reserva-legal tab " Reserva Legal" crlf)
   (printout t "|" tab tab "| (=) " ?utilidad-antes-de-idpc tab "RESULTADO DE EXPLOTACION" crlf)
   (printout t "|" tab tab "|------------------------------------------------------------------" crlf)
   (printout t "|" tab tab "|     " ?utilidad-antes-de-idpc tab "UTILIDAD ANTES DE IMPUESTO A LA RENTA (U.Antes.Reserva - idpc)" crlf)
   (printout t "|" ?perdida-por-correccion-monetaria tab tab tab tab "Pérdida por Corrección Monetaria" crlf)
   (printout t "|" ?ganancia-por-correccion-monetaria tab tab tab tab "Ganancia por Corrección Monetaria" crlf)
   (printout t "|" tab tab "|     " (- (+ ?utilidad-antes-de-idpc ?ganancia-por-correccion-monetaria) ?perdida-por-correccion-monetaria) tab "RESULTADO FUERA DE EXPLOTACION" crlf)
   (if (> ?utilidad-antes-de-idpc ?utilidad-del-ejercicio)
      then
      (printout t "|" tab tab "| (-) " ?idpc tab "Impuesto Determinado, factor es " ?tasa-idpc " en " ?ano crlf))
   (if (< ?utilidad-antes-de-idpc ?utilidad-del-ejercicio)
      then
      (printout t "|" tab tab "| (X) " ?idpc tab "Impuesto Que no se Aplica porque hubo pérdida tributaria" crlf))
   (printout t "|" tab tab "| (=) " ?utilidad-del-ejercicio tab "UTILIDAD DEL EJERCICIO (U.Antes.idpc - idpc)" crlf)
   (printout t "================================================================================" crlf))

(defmodule RESULTADO-SII
   (import MAIN deftemplate ?ALL))

(deffunction RESULTADO-SII::mes_to_numero (?p0))

(deffunction RESULTADO-SII::to_serial_date (?p0 ?p1 ?p2))

(deffunction RESULTADO-SII::mes_to_numero
   (?mes)
   (switch ?mes
      (case enero then
         1)
      (case febrero then
         2)
      (case marzo then
         3)
      (case abril then
         4)
      (case mayo then
         5)
      (case junio then
         6)
      (case julio then
         7)
      (case agosto then
         8)
      (case septiembre then
         9)
      (case octubre then
         10)
      (case noviembre then
         11)
      (case diciembre then
         12)))

(deffunction RESULTADO-SII::to_serial_date
   (?dia ?mes ?ano)
   (+ (* 10000 ?ano) (* 100 (mes_to_numero ?mes)) ?dia))

(defrule RESULTADO-SII::inicio-de-modulo-comprobacion
   (declare (salience 10000))
   =>
   (printout t "--modulo--------------- RESULTADO SII------------------" crlf))

(defrule RESULTADO-SII::inicio-kindle-k-comprobacionb-rules
   (declare (salience 10000))
   (empresa (nombre ?empresa))
   =>
   (bind ?archivo (str-cat "./doc/" ?empresa "/resultado-sii.markdown"))
   (open ?archivo k "w")
   (printout k "--- " crlf)
   (printout k "layout: page" crlf)
   (printout k "--- " crlf))

(defrule RESULTADO-SII::fin-kindle-k
   (declare (salience -10000))
   =>
   (close k))

(defrule RESULTADO-SII::balance-encabezado
   (declare (salience -7000))
   (empresa (nombre ?empresa))
   (balance (dia ?dia) (mes ?mes) (ano ?ano))
   =>
   (printout t crlf crlf)
   (printout t "Solo se consideran las transacciones hasta el día " ?dia tab ?mes "." crlf)
   (printout t "Cifras en pesos." crlf)
   (printout t "Se han practicado liquidaciones, por lo que NO se muestran cuentas nominales, ni subcuentas reales" crlf)
   (printout t crlf crlf "           RESULTADO SII año: " ?ano crlf)
   (printout t tab tab SUMAS tab tab "|" tab SALDOS crlf)
   (printout t tab tab DEBE tab HABER tab "|" tab DEBER tab ACREEDOR crlf)
   (printout t "---------------------------------------------------------------------" crlf)
   (printout k crlf crlf)
   (printout k "Solo se consideran las transacciones hasta el día " ?dia tab ?mes "." crlf)
   (printout k "Cifras en pesos." crlf)
   (printout k "Se han practicado liquidaciones, por lo que NO se muestran cuentas nominales" crlf)
   (printout k "<table rules='groups'>" crlf)
   (printout k "<style> tfoot {  border: 3px solid black;  } </style> " crlf)
   (printout k "<thead> <th></th><th colspan='4'> E S T A D O  DE R E S U L T A D O S </th> </thead>" crlf)
   (printout k "<thead> <th></th><th colspan='4'> " ?empresa "</th></thead>" crlf)
   (printout k "<thead> <th></th><th> </th> <th align='center' colspan= '2'>SUMAS</th><th> Padre </th> </thead>" crlf)
   (printout k "<thead> <th></th><th></th>  <th>DEBER</th> <th>ACREEDOR</th> </thead>" crlf)
   (printout k "<tbody>" crlf))

(defrule RESULTADO-SII::balance-filas-sin-revisar
   (declare (salience -8000))
   (no)
   (empresa (nombre ?empresa))
   (cuenta (nombre ?cuenta) (nombre-sii ?nombre-sii))
   ?subtotal <- (subtotales (mostrado false) (cuenta ?cuenta) (debe ?debe) (haber ?haber) (deber ?deber) (acreedor ?acreedor))
   (not (exists
             (revision (cuenta ?cuenta))))
   (test (neq ?cuenta ingresos-brutos))
   (test (neq ?cuenta ventas))
   (test (neq 0 (- ?haber ?debe)))
   =>
   (modify ?subtotal (mostrado true))
   (printout t tab tab ?debe tab ?haber tab "|" tab ?deber tab ?acreedor tab ?cuenta crlf)
   (printout k "<tr style=' background: #fff; border: 1px solid red;'>" crlf)
   (printout k "<td>" ?nombre-sii "<small>" ?cuenta "</small> </td> <td align='right'>" ?debe "</td> <td align='right'>" ?haber "</td> <td> | </td> <td align='right'> " ?deber "</td> <td align='right'>" ?acreedor "</td> </tr>" crlf))

(defrule RESULTADO-SII::balance-filas-que-requieren-correcciones
   (declare (salience -8000))
   (no)
   (empresa (nombre ?empresa))
   (cuenta (nombre ?cuenta) (nombre-sii ?nombre-sii))
   ?subtotal <- (subtotales (mostrado false) (cuenta ?cuenta) (debe ?debe) (haber ?haber) (deber ?deber) (acreedor ?acreedor))
   (revision (cuenta ?cuenta) (revisado false) (a-corregir ?a-corregir))
   (test (neq ?cuenta ingresos-brutos))
   (test (neq ?cuenta ventas))
   (test (neq 0 (- ?haber ?debe)))
   =>
   (modify ?subtotal (mostrado true))
   (printout t tab tab ?debe tab ?haber tab "|" tab ?deber tab ?acreedor tab ?cuenta crlf)
   (printout k "<tr>" crlf)
   (printout k "<td>" ?nombre-sii "<small>" ?cuenta " </small></td> <td align='right'>" ?debe "</td> <td align='right'>" ?haber "</td>" crlf)
   (printout k "</tr>" crlf))

(defrule RESULTADO-SII::balance-filas-que-no-requieren-correcciones
   (declare (salience -9000))
   (no)
   (empresa (nombre ?empresa))
   (cuenta (nombre ?cuenta) (padre ?padre) (debe ?debe) (haber ?haber) (nombre-sii ?nombre-sii))
   ?subtotal <- (subtotales (mostrado false) (cuenta ?cuenta) (debe ?debe) (haber ?haber) (deber ?deber) (acreedor ?acreedor))
   (test (neq false ?padre))
   =>
   (modify ?subtotal (mostrado true))
   (printout t tab tab ?debe tab ?haber tab "|" tab ?deber tab ?acreedor tab ?cuenta crlf)
   (printout k "<tr>" crlf)
   (printout k "<td> <small> " ?cuenta " </small> </td> <td align='right'> " ?debe "</td> <td align='right'>" ?haber "</td> <td> " ?padre " </td> " crlf)
   (printout k "</tr>" crlf))

(defrule RESULTADO-SII::titulo-activo
   (declare (salience -7990))
   ?totales <- (totales (activos ?total))
   =>
   (printout k "<thead> <th></th><th colspan='4'> T O T A L    A C T I V O  </th> <th> " ?total "</th> </thead>" crlf))

(defrule RESULTADO-SII::titulo-activo-fijo
   (declare (salience -7990))
   ?totales <- (totales (activo-fijo ?total))
   =>
   (printout k "<thead> <th></th><th colspan='4'> A C T I V O    F I J O</th> <th> " ?total "</th> </thead>" crlf))

(defrule RESULTADO-SII::titulo-activo-circulante
   (declare (salience -7990))
   ?totales <- (totales (activo-circulante ?total))
   =>
   (printout k "<thead> <th></th><th colspan='4'> A C T I V O    C I R C U L A N T E</th> <th> " ?total "</th> </thead>" crlf))

(defrule RESULTADO-SII::titulo-activos-con-partida
   (declare (salience -7990))
   ?subtotales <- (subtotales (cuenta ?nombre) (debe ?debe) (haber ?haber) (deber ?deber) (acreedor ?acreedor))
   (exists
        (cuenta (nombre ?nombre) (grupo activo) (padre false) (partida ?partida&:(neq nil ?partida))))
   =>
   (printout k "<thead> <th></th><th>" ?nombre "</th><th> " ?deber "</th> </thead>" crlf))

(defrule RESULTADO-SII::titulo-gastos-promocionales
   (declare (salience -8000))
   ?subtotales <- (subtotales (cuenta gastos-promocionales) (debe ?debe) (haber ?haber) (deber ?deber) (acreedor ?acreedor))
   =>
   (printout k "<thead> <th></th><th colspan='4'> G A S T O S    P R O M O C I O N A L E S </th> <th> " ?deber "</th> </thead>" crlf))

(defrule RESULTADO-SII::balance-filas-de-gastos-promocionales
   (declare (salience -8002))
   (empresa (nombre ?empresa))
   (cuenta (nombre ?cuenta) (padre ?padre) (nombre-sii ?nombre-sii))
   ?subtotal <- (subtotales (mostrado false) (cuenta ?cuenta) (debe ?debe) (haber ?haber) (deber ?deber) (acreedor ?acreedor))
   (test (neq 0 (- ?haber ?debe)))
   (test (eq ?padre gastos-promocionales))
   =>
   (modify ?subtotal (mostrado true))
   (printout t tab tab ?debe tab ?haber tab "|" tab ?deber tab ?acreedor tab ?cuenta crlf)
   (printout k "<tr  style='background-color: lightyellow'>" crlf)
   (printout k "<td></td><td><small> " ?cuenta " </small> </td> <td align='right'> " ?deber "</td> <td align='right'>" ?acreedor "</td> <td> " ?padre "</td>" crlf)
   (printout k "</tr>" crlf))

(defrule RESULTADO-SII::balance-filas-de-gastos-promocionales-casos
   (declare (salience -8002))
   (empresa (nombre ?empresa))
   (cuenta (nombre ?cuenta) (partida ?partida) (debe ?debe) (haber ?haber) (padre ?padre) (nombre-sii ?nombre-sii))
   (test (neq 0 (- ?haber ?debe)))
   (test (eq ?padre gastos-promocionales))
   =>
   (printout t tab ?partida tab ?debe tab ?haber tab "|" tab ?debe tab ?haber tab ?cuenta crlf)
   (printout k "<tr style='background-color: lavender'>" crlf)
   (printout k "<td>" ?partida "</td><td><small> " ?cuenta " </small> </td> <td align='right'> " ?debe "</td> <td align='right'>" ?haber "</td> <td> " ?padre "</td>" crlf)
   (printout k "</tr>" crlf))

(defrule RESULTADO-SII::titulo-gastos-administrativos
   (declare (salience -8003))
   ?subtotales <- (subtotales (cuenta gastos-administrativos) (debe ?debe) (haber ?haber) (deber ?deber) (acreedor ?acreedor))
   =>
   (printout k "<thead> <th></th><th colspan='4'> G A S T O S     A D M I N I S T R A T I V O S </th> <th> " ?deber "</th></thead>" crlf))

(defrule RESULTADO-SII::balance-filas-de-gastos-administrativos
   (declare (salience -8004))
   (empresa (nombre ?empresa))
   (cuenta (nombre ?cuenta) (padre ?padre) (nombre-sii ?nombre-sii))
   ?subtotal <- (subtotales (mostrado false) (cuenta ?cuenta) (debe ?debe) (haber ?haber) (deber ?deber) (acreedor ?acreedor))
   (test (neq 0 (- ?haber ?debe)))
   (test (eq ?padre gastos-administrativos))
   =>
   (modify ?subtotal (mostrado true))
   (printout t tab tab ?debe tab ?haber tab "|" tab ?deber tab ?acreedor tab ?cuenta crlf)
   (printout k "<tr  style='background-color: lightyellow'>" crlf)
   (printout k "<td></td><td><small> " ?cuenta " </small> </td> <td align='right'> " ?deber "</td> <td align='right'>" ?acreedor "</td> <td> " ?padre "</td>" crlf)
   (printout k "</tr>" crlf))

(defrule RESULTADO-SII::balance-filas-de-gastos-administrativos-casos
   (declare (salience -8004))
   (empresa (nombre ?empresa))
   (cuenta (nombre ?cuenta) (partida ?partida) (debe ?debe) (haber ?haber) (padre ?padre) (nombre-sii ?nombre-sii))
   (test (neq 0 (- ?haber ?debe)))
   (test (eq ?padre gastos-administrativos))
   =>
   (printout t tab ?partida tab ?debe tab ?haber tab "|" tab ?debe tab ?haber tab ?cuenta crlf)
   (printout k "<tr style='background-color: lavender'>" crlf)
   (printout k "<td> " ?partida "</td><td><small> " ?cuenta " </small> </td> <td align='right'> " ?debe "</td> <td align='right'>" ?haber "</td> <td> " ?padre "</td>" crlf)
   (printout k "</tr>" crlf))

(defrule RESULTADO-SII::titulo-intangibles
   (declare (salience -8006))
   ?subtotales <- (subtotales (cuenta intangibles) (debe ?debe) (haber ?haber) (deber ?deber) (acreedor ?acreedor))
   =>
   (printout k "<thead> <th></th><th colspan='4'> I N T A N G I B L E S </th> <th>" ?deber "</th> </thead>" crlf))

(defrule RESULTADO-SII::balance-filas-de-intangibles
   (declare (salience -8007))
   (empresa (nombre ?empresa))
   (cuenta (nombre ?cuenta) (padre ?padre) (nombre-sii ?nombre-sii))
   ?subtotal <- (subtotales (mostrado false) (cuenta ?cuenta) (debe ?debe) (haber ?haber) (deber ?deber) (acreedor ?acreedor))
   (test (neq 0 (- ?haber ?debe)))
   (test (eq ?padre intangibles))
   =>
   (modify ?subtotal (mostrado true))
   (printout t tab tab ?debe tab ?haber tab "|" tab ?deber tab ?acreedor tab ?cuenta crlf)
   (printout k "<tr style='background-color: lightyellow'>" crlf)
   (printout k "<td></td><td><small> " ?cuenta " </small> </td> <td align='right'> " ?deber "</td> <td align='right'>" ?acreedor "</td> <td> " ?padre "</td>" crlf)
   (printout k "</tr>" crlf))

(defrule RESULTADO-SII::balance-filas-de-intangibles-casos
   (declare (salience -8007))
   (empresa (nombre ?empresa))
   (cuenta (nombre ?cuenta) (partida ?partida) (debe ?debe) (haber ?haber) (padre ?padre) (nombre-sii ?nombre-sii))
   (test (neq 0 (- ?haber ?debe)))
   (test (eq ?padre intangibles))
   =>
   (printout t tab ?partida tab ?debe tab ?haber tab "|" tab ------ tab ----- tab ?cuenta crlf)
   (printout k "<tr style='background-color: lavender'>" crlf)
   (printout k "<td> " ?partida "</td><td><small> " ?cuenta " </small> </td> <td align='right'> " ?debe "</td> <td align='right'>" ?haber "</td> <td> " ?padre "</td>" crlf)
   (printout k "</tr>" crlf))

(defrule RESULTADO-SII::titulo-correccion-monetaria
   (declare (salience -8009))
   ?subtotales <- (subtotales (cuenta correccion-monetaria) (debe ?debe) (haber ?haber) (deber ?deber) (acreedor ?acreedor))
   =>
   (printout k "<thead> <th></th><th colspan='4'> C O R R E C C I O N    M O N E T A R I A</th><th> " ?acreedor "</th> </thead>" crlf))

(defrule RESULTADO-SII::balance-filas-de-correccion-monetaria
   (declare (salience -8010))
   (empresa (nombre ?empresa))
   (cuenta (nombre ?cuenta) (padre ?padre) (nombre-sii ?nombre-sii))
   ?subtotal <- (subtotales (mostrado false) (cuenta ?cuenta) (debe ?debe) (haber ?haber) (deber ?deber) (acreedor ?acreedor))
   (test (neq 0 (- ?haber ?debe)))
   (test (eq ?padre correccion-monetaria))
   =>
   (modify ?subtotal (mostrado true))
   (printout t tab tab ?debe tab ?haber tab "|" tab ?deber tab ?acreedor tab ?cuenta crlf)
   (printout k "<tr  style='background-color: lightyellow'>" crlf)
   (printout k "<td></td><td><small> " ?cuenta " </small> </td> <td align='right'> " ?deber "</td> <td align='right'>" ?acreedor "</td> <td> " ?padre "</td>" crlf)
   (printout k "</tr>" crlf))

(defrule RESULTADO-SII::balance-filas-de-correccion-monetaria-casos
   (declare (salience -8010))
   (empresa (nombre ?empresa))
   (cuenta (nombre ?cuenta) (partida ?partida) (debe ?debe) (haber ?haber) (padre ?padre) (nombre-sii ?nombre-sii))
   (test (neq 0 (- ?haber ?debe)))
   (test (eq ?padre correccion-monetaria))
   =>
   (printout t tab ?partida tab ?debe tab ?haber tab "|" tab ------ tab ----- tab ?cuenta crlf)
   (printout k "<tr style='background-color: lavender'>" crlf)
   (printout k "<td> " ?partida "</td><td><small> " ?cuenta " </small> </td> <td align='right'> " ?debe "</td> <td align='right'>" ?haber "</td> <td> " ?padre "</td>" crlf)
   (printout k "</tr>" crlf))

(defrule RESULTADO-SII::titulo-costos-de-ventas
   (declare (salience -8012))
   ?subtotales <- (subtotales (cuenta costos-de-ventas) (debe ?debe) (haber ?haber) (deber ?deber) (acreedor ?acreedor))
   =>
   (printout k "<thead> <th></th><th colspan='4'> C O S T O S   D E    V E N T A S </th> <th> " ?deber "</th></thead>" crlf))

(defrule RESULTADO-SII::balance-filas-de-costos-de-ventas
   (declare (salience -8014))
   (empresa (nombre ?empresa))
   (cuenta (nombre ?cuenta) (padre ?padre) (nombre-sii ?nombre-sii))
   ?subtotal <- (subtotales (mostrado false) (cuenta ?cuenta) (debe ?debe) (haber ?haber) (deber ?deber) (acreedor ?acreedor))
   (test (neq 0 (- ?haber ?debe)))
   (test (eq ?padre costos-de-ventas))
   =>
   (modify ?subtotal (mostrado true))
   (printout t tab tab ?debe tab ?haber tab "|" tab ?deber tab ?acreedor tab ?cuenta crlf)
   (printout k "<tr  style='background-color: lightyellow'>" crlf)
   (printout k "<td></td><td><small> " ?cuenta " </small> </td> <td align='right'> " ?deber "</td> <td align='right'>" ?acreedor "</td> <td> " ?padre "</td>" crlf)
   (printout k "</tr>" crlf))

(defrule RESULTADO-SII::balance-filas-de-costo-de-ventas-casos
   (declare (salience -8014))
   (empresa (nombre ?empresa))
   (cuenta (nombre ?cuenta) (partida ?partida) (debe ?debe) (haber ?haber) (padre ?padre) (nombre-sii ?nombre-sii))
   (test (neq 0 (- ?haber ?debe)))
   (test (eq ?padre costos-de-ventas))
   =>
   (printout t tab ?partida tab ?debe tab ?haber tab "|" tab ------ tab ----- tab ?cuenta crlf)
   (printout k "<tr style='background-color: lavender'>" crlf)
   (printout k "<td> " ?partida "</td><td><small> " ?cuenta " </small> </td> <td align='right'> " ?debe "</td> <td align='right'>" ?haber "</td> <td> " ?padre "</td>" crlf)
   (printout k "</tr>" crlf))

(defrule RESULTADO-SII::titulo-insumos
   (declare (salience -8015))
   ?subtotales <- (subtotales (cuenta insumos) (debe ?debe) (haber ?haber) (deber ?deber) (acreedor ?acreedor))
   =>
   (printout k "<thead> <th></th><th colspan='4'> I N S U M O S</th> <th>" ?deber "</th></thead>" crlf))

(defrule RESULTADO-SII::balance-filas-de-insumos
   (declare (salience -8016))
   (empresa (nombre ?empresa))
   (cuenta (nombre ?cuenta) (padre ?padre) (nombre-sii ?nombre-sii))
   ?subtotal <- (subtotales (mostrado false) (cuenta ?cuenta) (debe ?debe) (haber ?haber) (deber ?deber) (acreedor ?acreedor))
   (test (neq 0 (- ?haber ?debe)))
   (test (eq ?padre insumos))
   =>
   (modify ?subtotal (mostrado true))
   (printout t tab tab ?debe tab ?haber tab "|" tab ?deber tab ?acreedor tab ?cuenta crlf)
   (printout k "<tr  style='background-color: lightyellow'>" crlf)
   (printout k "<td></td><td><small> " ?cuenta " </small> </td> <td align='right'> " ?deber "</td> <td align='right'>" ?acreedor "</td> <td> " ?padre "</td>" crlf)
   (printout k "</tr>" crlf))

(defrule RESULTADO-SII::balance-filas-de-insumos-casos
   (declare (salience -8016))
   (empresa (nombre ?empresa))
   (cuenta (nombre ?cuenta) (partida ?partida) (debe ?debe) (haber ?haber) (padre ?padre) (nombre-sii ?nombre-sii))
   (test (neq 0 (- ?haber ?debe)))
   (test (eq ?padre insumos))
   =>
   (printout t tab ?partida tab ?debe tab ?haber tab "|" tab ------ tab ----- tab ?cuenta crlf)
   (printout k "<tr style='background-color: lavender'>" crlf)
   (printout k "<td> " ?partida "</td><td><small> " ?cuenta " </small> </td> <td align='right'> " ?debe "</td> <td align='right'>" ?haber "</td> <td> " ?padre "</td>" crlf)
   (printout k "</tr>" crlf))

(defrule RESULTADO-SII::titulo-materiales
   (declare (salience -8018))
   ?subtotales <- (subtotales (cuenta materiales) (debe ?debe) (haber ?haber) (deber ?deber) (acreedor ?acreedor))
   =>
   (printout k "<thead> <th></th><th colspan='4'> M A T E R I A L E S </th> <th> " ?deber "</th> </thead>" crlf))

(defrule RESULTADO-SII::balance-filas-de-materiales
   (declare (salience -8019))
   (empresa (nombre ?empresa))
   (cuenta (nombre ?cuenta) (padre ?padre) (nombre-sii ?nombre-sii))
   ?subtotal <- (subtotales (mostrado false) (cuenta ?cuenta) (debe ?debe) (haber ?haber) (deber ?deber) (acreedor ?acreedor))
   (test (neq 0 (- ?haber ?debe)))
   (test (eq ?padre materiales))
   =>
   (modify ?subtotal (mostrado true))
   (printout t tab tab ?debe tab ?haber tab "|" tab ?deber tab ?acreedor tab ?cuenta crlf)
   (printout k "<tr  style='background-color: lightyellow'>" crlf)
   (printout k "<td></td><td><small> " ?cuenta " </small> </td> <td align='right'> " ?deber "</td> <td align='right'>" ?acreedor "</td> <td> " ?padre "</td>" crlf)
   (printout k "</tr>" crlf))

(defrule RESULTADO-SII::balance-filas-de-materiales-casos
   (declare (salience -8019))
   (empresa (nombre ?empresa))
   (cuenta (nombre ?cuenta) (partida ?partida) (debe ?debe) (haber ?haber) (padre ?padre) (nombre-sii ?nombre-sii))
   (test (neq 0 (- ?haber ?debe)))
   (test (eq ?padre materiales))
   =>
   (printout t tab ?partida tab ?debe tab ?haber tab "|" tab ?debe tab ?haber tab ?cuenta crlf)
   (printout k "<tr style='background-color: lavender'>" crlf)
   (printout k "<td>" ?partida "</td><td><small> " ?cuenta " </small> </td> <td align='right'> " ?debe "</td> <td align='right'>" ?haber "</td> <td> " ?padre "</td>" crlf)
   (printout k "</tr>" crlf))

(defrule RESULTADO-SII::titulo-ventas
   (declare (salience -8024))
   ?subtotales <- (subtotales (cuenta ventas) (debe ?debe) (haber ?haber) (deber ?deber) (acreedor ?acreedor))
   =>
   (printout k "<thead> <th></th><th colspan='4'> V E N T A S </th><th> " ?acreedor "</th> </thead>" crlf))

(defrule RESULTADO-SII::balance-filas-de-ventas
   (declare (salience -8025))
   (empresa (nombre ?empresa))
   (cuenta (nombre ?cuenta) (padre ?padre) (nombre-sii ?nombre-sii))
   ?subtotal <- (subtotales (mostrado false) (cuenta ?cuenta) (debe ?debe) (haber ?haber) (deber ?deber) (acreedor ?acreedor))
   (test (neq 0 (- ?haber ?debe)))
   (test (eq ?padre ventas))
   =>
   (modify ?subtotal (mostrado true))
   (printout t tab tab ?debe tab ?haber tab "|" tab ?deber tab ?acreedor tab ?cuenta crlf)
   (printout k "<tr  style='background-color: lightyellow'>" crlf)
   (printout k "<td></td><td><small> " ?cuenta " </small> </td> <td align='right'> " ?deber "</td> <td align='right'>" ?acreedor "</td> <td> " ?padre "</td>" crlf)
   (printout k "</tr>" crlf))

(defrule RESULTADO-SII::balance-filas-de-ventas-casos
   (declare (salience -8025))
   (empresa (nombre ?empresa))
   (cuenta (nombre ?cuenta) (partida ?partida) (debe ?debe) (haber ?haber) (padre ?padre) (nombre-sii ?nombre-sii))
   (test (neq 0 (- ?haber ?debe)))
   (test (eq ?padre ventas))
   =>
   (printout t tab ?partida tab ?debe tab ?haber tab "|" tab ------ tab ----- tab ?cuenta crlf)
   (printout k "<tr style='background-color: lavender'>" crlf)
   (printout k "<td> " ?partida "</td> <td><small> " ?cuenta " </small> </td> <td align='right'> " ?debe "</td> <td align='right'>" ?haber "</td> <td> " ?padre "</td>" crlf)
   (printout k "</tr>" crlf))

(defrule RESULTADO-SII::balance-subtotales
   (declare (salience -9000))
   (no)
   (empresa (nombre ?empresa))
   ?subtotales <- (subtotales (mostrar-en-comprobacion true) (mostrado true) (mostrado-en-resumen false) (cuenta ?cuenta) (debe ?debe) (haber ?haber) (deber ?deber) (acreedor ?acreedor))
   ?totales <- (totales (debe ?total_debe) (haber ?total_haber) (deber ?total_deber) (acreedor ?total_acreedor))
   (test (neq ?cuenta ingresos-brutos))
   (test (neq ?cuenta ventas))
   =>
   (modify ?totales (debe (+ ?total_debe ?debe)) (haber (+ ?total_haber ?haber)) (deber (+ ?total_deber ?deber)) (acreedor (+ ?total_acreedor ?acreedor)))
   (modify ?subtotales (mostrado-en-resumen true))
   (assert (hacer-balance-footer)))

(defrule RESULTADO-SII::balance-footer
   (declare (salience -10000))
   (no)
   ?comando <- (hacer-balance-footer)
   (empresa (nombre ?empresa))
   (totales (debe ?debe) (haber ?haber) (deber ?deber) (activos ?activos) (activo-circulante ?activo-circulante) (activo-fijo ?activo-fijo) (pasivos ?pasivos) (pasivo-circulante ?pasivo-circulante) (pasivo-fijo ?pasivo-fijo) (patrimonio ?patrimonio) (acreedor ?acreedor))
   =>
   (bind ?patrimonio_pasivo (+ ?patrimonio ?pasivos))
   (printout t tab "......................................................." crlf)
   (printout t tab tab ?debe tab ?haber tab "|" tab ?deber tab ?acreedor tab activos= ?activos crlf)
   (printout t "------------------------------------------------------------------------" crlf)
   (printout k "</tbody>" crlf)
   (printout k "<tfoot>" crlf)
   (printout k "<tr> <td></td> <td align='right'>" ?debe "</td> <td align='right'>" ?haber "</td><td> | </td> <td align='right'>" ?deber "</td> <td align='right'>" ?acreedor "</td> </tr>" crlf)
   (printout k "</tfoot>" crlf)
   (printout k "</table>" crlf)
   (retract ?comando))

(defmodule FINANCIERO
   (import MAIN deftemplate ?ALL))

(defrule FINANCIERO::fin-kindle
   (declare (salience -10000))
   =>
   (printout k "<table><tbody>" crlf)
   (close k))

(defrule FINANCIERO::inicio-kindle-k-financiero-rules
   (declare (salience 10000))
   (empresa (nombre ?empresa))
   =>
   (bind ?archivo (str-cat "./doc/" ?empresa "/financiero.markdown"))
   (open ?archivo k "w")
   (printout k "--- " crlf)
   (printout k "layout: page" crlf)
   (printout k "--- " crlf)
   (printout k "" crlf)
   (printout k "Contabilidad para Necios® usa el siguiente código de colores para este documento." crlf)
   (printout k "<li><span style='background-color: lavender'>[    ]</span> partida revisada y resultado bueno. </li>" crlf)
   (printout k "<li><span style='background-color: lightyellow'>[    ]</span> cuenta mayor del activo </li>" crlf)
   (printout k "<li><span style='background-color: azure'>[    ]</span> cuenta mayor del pasivo </li>" crlf)
   (printout k "<li><span style='color: white; background-color: cornflowerblue'>[    ]</span> cuenta de patrimonio </li>" crlf)
   (printout k "<li><span style='background-color: gold'>[    ]</span> ganancia </li>" crlf)
   (printout k "<li><span style='color: white; background-color: black'>[    ]</span> pérdida </li>" crlf)
   (printout k "<table><tbody>" crlf))

(defrule FINANCIERO::inicio
   (declare (salience 10000))
   =>
   (printout t "============================================================" crlf)
   (printout t "------------------------------- FINANCIERO -----------------" crlf)
   (printout t "============================================================" crlf))

(defrule FINANCIERO::fin
   (declare (salience -1000))
   =>
   (printout t "============================================================" crlf)
   (printout t "-------- FIN ------------------ FINANCIERO -----------------" crlf)
   (printout t "============================================================" crlf))

(defrule FINANCIERO::cuentas-de-resultado-con-ganancias
   (declare (salience 1))
   (subtotales (cuenta ?nombre) (acreedor ?acreedor&:(neq 0 ?acreedor)))
   (exists
        (cuenta (nombre ?nombre) (grupo resultado) (padre false)))
   =>
   (printout t "|" tab tab ganancias tab ?acreedor tab tab ?nombre crlf)
   (printout k "<tr><td> ganancias </td><td> </td><td>" ?acreedor "</td><td>" ?nombre "</td></tr>" crlf))

(defrule FINANCIERO::cuentas-de-resultado-con-perdidas
   (declare (salience 2))
   (subtotales (cuenta ?nombre) (deber ?deber&:(neq 0 ?deber)))
   (exists
        (cuenta (nombre ?nombre) (grupo resultado) (padre false)))
   =>
   (printout t "|" tab perdida.. tab ?deber tab tab tab ?nombre crlf)
   (printout k "<tr><td>pérdida</td><td>" ?deber "</td><td></td><td>" ?nombre "</td></tr>" crlf))

(defrule FINANCIERO::cuentas-de-patrimonio-con-minoracion
   (declare (salience 2))
   (subtotales (cuenta ?nombre) (deber ?deber&:(neq 0 ?deber)))
   (exists
        (cuenta (nombre ?nombre) (grupo patrimonio) (padre false)))
   =>
   (printout t "|" tab perdida.. tab ?deber tab tab tab ?nombre crlf)
   (printout k "<tr><td>pérdida</td><td>" ?deber "</td><td></td><td>" ?nombre "</td></tr>" crlf))

(defrule FINANCIERO::cuentas-de-patrimonio-con-aumento
   (declare (salience 1))
   (subtotales (cuenta ?nombre) (acreedor ?acreedor&:(neq 0 ?acreedor)))
   (exists
        (cuenta (nombre ?nombre) (grupo patrimonio) (padre false)))
   =>
   (printout t "|" tab tab ganancias tab ?acreedor tab tab ?nombre crlf)
   (printout k "<tr><td> ganancias </td><td> </td><td>" ?acreedor "</td><td>" ?nombre "</td></tr>" crlf))

(defmodule TRIBUTARIO
   (import MAIN deftemplate ?ALL))

(deffunction TRIBUTARIO::mes_to_numero (?p0))

(deffunction TRIBUTARIO::to_serial_date (?p0 ?p1 ?p2))

(deftemplate TRIBUTARIO::info
   (slot inventario-final-liquidado))

(deffunction TRIBUTARIO::mes_to_numero
   (?mes)
   (switch ?mes
      (case enero then
         1)
      (case febrero then
         2)
      (case marzo then
         3)
      (case abril then
         4)
      (case mayo then
         5)
      (case junio then
         6)
      (case julio then
         7)
      (case agosto then
         8)
      (case septiembre then
         9)
      (case octubre then
         10)
      (case noviembre then
         11)
      (case diciembre then
         12)))

(deffunction TRIBUTARIO::to_serial_date
   (?dia ?mes ?ano)
   (+ (* 10000 ?ano) (* 100 (mes_to_numero ?mes)) ?dia))

(defrule TRIBUTARIO::inventario-final-liquidado
   (exists
        (partida-inventario-final))
   =>
   (assert (info (inventario-final-liquidado true))))

(defrule TRIBUTARIO::inventario-final-no-liquidado
   (not (exists
             (partida-inventario-final)))
   =>
   (assert (info (inventario-final-liquidado false))))

(defrule TRIBUTARIO::inicio
   (declare (salience 10000))
   (cuenta (nombre utilidad-tributaria) (partida ?p&:(neq nil ?p)) (haber ?haber&:(neq nil ?haber)) (debe ?debe&:(neq nil ?debe)))
   =>
   (printout t "--modulo-----------CALCULO DE BASE TRIBUTARIA-----------------" crlf))

(defrule TRIBUTARIO::inicio-en-falso
   (declare (salience 10000))
   (not (exists
             (cuenta (nombre utilidad-tributaria) (partida ?p&:(neq nil ?p)))))
   =>
   (printout t "--modulo-----------CALCULO DE BASE TRIBUTARIA-----------------" crlf)
   (printout t "La utilidad tributaria no ha sido determinada. " crlf))

(defrule TRIBUTARIO::fin
   (declare (salience -10000))
   =>
   (close k))

(defrule TRIBUTARIO::inicio-kindle-k-tributario-rules
   (declare (salience 10000))
   (empresa (nombre ?empresa))
   =>
   (printout t "En inicio-kindle-k-tributario-rules")
   (bind ?archivo (str-cat "./doc/" ?empresa "/tributario.markdown"))
   (open ?archivo k "w")
   (printout k "--- " crlf)
   (printout k "layout: page" crlf)
   (printout k "--- " crlf)
   (printout k "" crlf)
   (printout k "<li><span style='background-color: lavender'>[    ]</span> partida revisada y resultado bueno. </li>" crlf)
   (printout k "<li><span style='background-color: lightyellow'>[    ]</span> cuenta mayor del activo </li>" crlf)
   (printout k "<li><span style='background-color: azure'>[    ]</span> cuenta mayor del pasivo </li>" crlf)
   (printout k "<li><span style='color: white; background-color: cornflowerblue'>[    ]</span> cuenta de patrimonio </li>" crlf)
   (printout k "<li><span style='background-color: gold'>[    ]</span> ganancia </li>" crlf)
   (printout k "<li><span style='color: white; background-color: black'>[    ]</span> pérdida </li>" crlf)
   (printout k "<li><span style='background-color: blanchedalmond'>[    ]</span> subtotales de la transacción </li>" crlf))

(defrule TRIBUTARIO::estado-de-resultados-mensual
   (balance (mes ?mes) (ano ?ano))
   (info (inventario-final-liquidado ?inventario-final-liquidado))
   (empresa (nombre ?empresa))
   (subtotales (cuenta ingresos-brutos) (acreedor ?ingresos-brutos))
   (subtotales (cuenta ventas) (acreedor ?ventas))
   (subtotales (cuenta devolucion-sobre-ventas) (debe ?devolucion-sobre-ventas))
   (subtotales (cuenta compras) (debe ?compras))
   (subtotales (cuenta gastos-sobre-compras) (debe ?gastos-sobre-compras))
   (subtotales (cuenta inventario-inicial) (deber ?inventario-inicial))
   (subtotales (cuenta inventario) (deber ?inventario-final-deber) (acreedor ?inventario-final-acreedor))
   (subtotales (cuenta gastos-administrativos) (debe ?gastos-administrativos-debe) (haber ?gastos-administrativos-haber))
   (subtotales (cuenta salarios) (deber ?salarios))
   (subtotales (cuenta gastos-ventas) (deber ?gastos-ventas))
   (subtotales (cuenta gastos-en-investigacion-y-desarrollo) (debe ?gastos-en-investigacion-y-desarrollo))
   (subtotales (cuenta gastos-promocionales) (deber ?gastos-en-promocion))
   (subtotales (cuenta costos-de-ventas) (deber ?costos-de-ventas))
   (subtotales (cuenta idpc) (haber ?idpc))
   (subtotales (cuenta reserva-legal) (haber ?reserva-legal))
   (cuenta (nombre utilidad-tributaria) (partida ?p&:(neq nil ?p)) (haber ?utilidad-del-ejercicio-haber) (debe ?utilidad-del-ejercicio-debe))
   (subtotales (cuenta utilidad) (acreedor ?utilidad-acreedor) (deber ?utilidad-deber))
   (subtotales (cuenta provision-impuesto-a-la-renta) (acreedor ?provision-impuesto-a-la-renta))
   (subtotales (cuenta amortizacion-intangibles) (deber ?amortizacion-intangibles))
   (subtotales (cuenta depreciacion-acumulada-herramientas) (acreedor ?depreciacion))
   (subtotales (cuenta impuesto-a-la-renta-por-pagar) (acreedor ?impuesto-a-la-renta-por-pagar))
   (subtotales (cuenta perdidas-ejercicios-anteriores) (debe ?pea))
   (subtotales (cuenta herramientas) (deber ?herramientas))
   (subtotales (cuenta amortizacion-acumulada-instantanea) (haber ?amortizacion-acumulada-instantanea))
   (subtotales (cuenta perdida-por-correccion-monetaria) (debe ?perdida-por-correccion-monetaria))
   (subtotales (cuenta ganancia-por-correccion-monetaria) (haber ?ganancia-por-correccion-monetaria))
   (subtotales (cuenta aumentos-de-capital-aportes) (haber ?aportes))
   (cuenta (nombre impuestos-no-recuperables) (haber ?impuestos-no-recuperables))
   (tasas (idpc ?tasa-idpc) (mes ?mes) (ano ?ano))
   (selecciones (regimen ?regimen))
   =>
   (bind ?inventario-final (- ?inventario-final-deber ?inventario-final-acreedor))
   (bind ?gastos-administrativos (- ?gastos-administrativos-debe ?gastos-administrativos-haber))
   (bind ?utilidad-del-ejercicio (- ?utilidad-del-ejercicio-haber ?utilidad-del-ejercicio-debe))
   (bind ?ventas-netas (- ?ventas ?devolucion-sobre-ventas))
   (bind ?compras-totales (+ ?compras ?gastos-sobre-compras))
   (bind ?compras-netas ?compras-totales)
   (bind ?existencias (+ ?compras-netas ?inventario-inicial))
   (bind ?costos-de-mercancias ?inventario-final)
   (if (eq true ?inventario-final-liquidado)
      then
      (if (eq diciembre ?mes)
         then
         (bind ?utilidad-bruta (- (- ?ventas-netas ?costos-de-ventas) ?costos-de-mercancias))
         else
         (bind ?utilidad-bruta (- ?ventas-netas ?costos-de-ventas)))
      else
      (if (eq diciembre ?mes)
         then
         (bind ?utilidad-bruta (- ?ventas-netas ?costos-de-ventas))
         else
         (bind ?utilidad-bruta (- ?ventas-netas ?costos-de-ventas))))
   (bind ?gastos-de-operacion (+ ?gastos-administrativos ?gastos-ventas ?gastos-en-investigacion-y-desarrollo ?gastos-en-promocion ?amortizacion-intangibles ?depreciacion ?salarios))
   (bind ?utilidad-de-operacion (- ?utilidad-bruta ?gastos-de-operacion ?pea))
   (bind ?utilidad-antes-de-reserva ?utilidad-de-operacion)
   (bind ?margen-de-explotacion (- ?utilidad-de-operacion ?reserva-legal))
   (bind ?margen-fuera-de-explotacion (- (+ ?margen-de-explotacion ?ganancia-por-correccion-monetaria) ?impuestos-no-recuperables))
   (bind ?utilidad-antes-de-idpc ?margen-fuera-de-explotacion)
   (bind ?utilidad-tributaria (- ?margen-fuera-de-explotacion (+ ?herramientas ?amortizacion-acumulada-instantanea)))
   (printout k "<table><tbody>" crlf)
   (printout k "<tr><th colspan='3'>" ?empresa "</th></tr>" crlf)
   (printout t "Solo se consideran las transacciones hasta el día 31 febrero. Cifras en pesos." crlf)
   (printout t ?empresa crlf)
   (printout t "================================================================================" crlf)
   (printout t "CALCULO DE LA BASE IMPONIBLE PROPYME" crlf)
   (printout k "<tr><td colspan='8'> CALCULO DE LA BASE IMPONIBLE PROPYME </td></tr>")
   (printout k "<tr><th colspan='8'>Solo se consideran las transacciones hasta el día final de " ?mes ". Cifras en pesos. </th></tr>" crlf)
   (printout t "================================================================================" crlf)
   (if (eq true ?inventario-final-liquidado)
      then
      (printout k "<tr style='font-weight:bold;background-color: azure'><td colspan='8' align='center'>" INVENTARIO-FINAL-LIQUIDADO "</td></tr>" crlf))
   (printout t "|" tab tab "|     " ?ingresos-brutos tab "Ingresos Brutos Percibidos A.29-LIR" crlf)
   (printout k "<tr><td></td><td></td><td></td><td></td><td align='right'>" ?ingresos-brutos "</td><td colspan='2'> Ingresos Brutos Percibidos A.29-LIR </td></tr>" crlf)
   (printout t "|" tab tab "|     " ?ventas tab "Ventas" crlf)
   (printout k "<tr><td></td><td></td><td></td><td></td><td align='right'>" ?ventas "</td><td> Ventas </td></tr>" crlf)
   (printout t "|" tab tab "| (-) -  " tab tab "Rebajas sobre ventas" crlf)
   (printout k "<tr><td></td><td></td><td></td><td> (-) </td> <td align='right'>0 </td> <td>  Rebajas sobre ventas </td></tr>" crlf)
   (printout t "|" tab tab "| (-) " ?devolucion-sobre-ventas tab tab "Devoluciones sobre ventas" crlf)
   (printout k "<tr><td></td><td></td><td></td><td> (-) </td><td align='right'>" ?devolucion-sobre-ventas "</td><td> Devoluciones sobre ventas </td></tr>" crlf)
   (printout t "|" tab tab "| (-) -  " tab tab "Descuentos sobre ventas" crlf)
   (printout k "<tr><td></td><td></td><td></td><td> (-) </td><td align='right'>0</td><td>Descuentos sobre ventas </td></tr>" crlf)
   (printout t "|" tab tab "| (=) " ?ventas-netas tab "Ventas Netas" crlf)
   (printout k "<tr><td></td><td></td><td></td><td> (=) </td><td align='right'>" ?ventas-netas "</td><td> Ventas Netas </td></tr>" crlf)
   (printout t crlf)
   (printout t "|" tab tab "| (-) " ?costos-de-ventas tab "Costos de Ventas A.30-LIR" crlf)
   (printout k "<tr><td></td><td></td><td></td><td> (-) </td><td align='right'>" ?costos-de-ventas "</td> <td>Costos de Ventas A.30-LIR </td></tr>" crlf)
   (printout t crlf)
   (printout t "|" ?compras tab tab tab tab "Compras" crlf)
   (printout k "<tr><td></td><td align='right'>" ?compras "</td><td></td><td></td><td></td><td> Compras </td></tr>" crlf)
   (printout t "| (+) " ?gastos-sobre-compras tab tab tab tab "Gastos sobre Compras" crlf)
   (printout k "<tr><td> (+) </td><td align='right'> " ?gastos-sobre-compras "</td><td></td><td> </td><td></td><td> Gastos sobre Compras </td></tr>" crlf)
   (printout t "|" ?compras-totales tab tab tab tab "Compras Totales" crlf)
   (printout k "<tr><td> (=) </td><td align='right'>" ?compras-totales "</td><td></td><td></td><td></td><td>Compras Totales</td></tr> " crlf)
   (printout t "| (-) - " tab tab tab tab "Rebajas sobre Compras" crlf)
   (printout t "| (-) - " tab tab tab tab "Devoluciones sobre Compras" crlf)
   (printout t "| (-) - " tab tab tab tab "Descuentos sobre Compras" crlf)
   (printout k "<tr><td> (-) </td><td align='right'>" 0 "</td><td></td><td></td><td></td><td> Rebajas Cobre Compras </td></tr>" crlf)
   (printout k "<tr><td> (-) </td><td align='right'>" 0 "</td><td></td><td></td><td></td><td> Devoluciones Sobre Compras </td></tr>" crlf)
   (printout k "<tr><td> (-) </td><td align='right'>" 0 "</td><td></td><td></td><td></td><td> Descuentos Sobre Compras </td></tr>" crlf)
   (printout t "|" ?compras-totales tab tab tab tab "Compras Netas" crlf)
   (printout k "<tr><td>(=)</td><td align='right'>" ?compras-totales "</td><td></td><td></td><td></td><td>Compras Netas</td></tr> " crlf)
   (printout t crlf)
   (printout t "| (+) " ?inventario-inicial tab "|" tab tab "Inventario Inicial" crlf)
   (printout k "<tr><td> (+) </td><td align='right'>" ?inventario-inicial "</td><td></td><td></td><td></td><td colspan='2'>Inventario Inicial</td></tr> " crlf)
   (printout t "| (=) " ?existencias tab "|" tab tab "Mercadería Disponible para la Venta " crlf)
   (printout k "<tr><td> (=) </td><td align='right'> " ?existencias "</td><td></td><td> </td><td></td><td> Mercadería Disponible para la Venta </td></tr>" crlf)
   (printout t "|     0  |" tab tab "Costos de Mercancías Vendidas" crlf)
   (printout k "<tr><td>     </td> <td align='right'> 0 </td><td> </td><td></td><td></td><td colspan='2'>Costo de Mercancías Vendidas</td></tr>" crlf)
   (printout t "| (-) " ?inventario-final tab "|" tab tab "Inventario Final " crlf)
   (printout k "<tr><td> (-) </td> <td align='right'>" ?inventario-final "</td><td> </td><td></td><td></td><td colspan='2'>Inventario Final </td></tr>" crlf)
   (printout t "| (=) " ?costos-de-mercancias tab "|" tab tab "Costos de Mercancías " crlf)
   (printout k "<tr><td> (=) </td> <td align='right'>" ?costos-de-mercancias "</td><td> </td><td></td><td></td><td colspan='2'>Costo de Mercancías </td></tr>" crlf)
   (printout t crlf)
   (if (eq true ?inventario-final-liquidado)
      then
      (printout t "|" tab tab "|     " ?utilidad-bruta tab "UTILIDAD BRUTA (Ventas Netas - Costo de Ventas - Costo de Mercancías)" crlf)
      (printout k "<tr><td></td><td></td><td></td><td></td><td align='right'>" ?utilidad-bruta "</td><td colspan='4'>  UTILIDAD BRUTA (Ventas Netas - Costo de Ventas - Costo de Mercancías) </td></tr>" crlf)
      else
      (printout t "|" tab tab "|     " ?utilidad-bruta tab "UTILIDAD BRUTA (Ventas Netas - Costo de Ventas)" crlf)
      (printout k "<tr><td></td><td></td><td></td><td></td><td align='right'>" ?utilidad-bruta "</td><td colspan='4'>  UTILIDAD BRUTA (Ventas Netas - Costo de Ventas) </td></tr>" crlf))
   (printout k "<tr style='font-weight:bold; background-color: azure'><td></td><td></td><td></td><td></td><td align='right'>" ?utilidad-bruta "</td><td colspan='4'>  Margen de Explotacion </td></tr>" crlf)
   (printout t "|" tab tab "| (-) " ?gastos-de-operacion tab "Gastos Operacionales (Gastos Admon + Gastos Vtas + I+D + Promocion + Amortiza + Depreciacion)" crlf)
   (printout k "<tr><td></td><td></td><td></td><td>(-)</td><td align='right'>" ?gastos-de-operacion "</td><td colspan='4'> Gastos de Deducibles de Impuesto (Gastos Admon + Gastos Vtas + I+D + Promocion + Amortiza.Int A.31-LIR) </td></tr>" crlf)
   (printout t "|" ?gastos-administrativos tab tab tab tab "Gastos del Dpto Administración" crlf)
   (printout t "|" ?gastos-ventas tab tab tab tab "Gastos del Dpto Ventas" crlf)
   (printout t "|" ?gastos-en-investigacion-y-desarrollo tab tab tab tab "Gastos en I+D" crlf)
   (printout t "|" ?gastos-en-promocion tab tab tab tab "Gastos en Promocion" crlf)
   (printout t "|" ?salarios tab tab tab tab "Salarios" crlf)
   (printout t "|" ?perdida-por-correccion-monetaria tab tab tab tab "Pérdida por Corrección Monetaria" crlf)
   (printout t "|" ?amortizacion-intangibles tab tab tab tab " (-) Amortizacion Contable Intangibles" crlf)
   (printout t "|" ?depreciacion tab tab tab tab " (-) Depreciacion" crlf)
   (printout k "<tr><td> (-) </td><td align='right'>" ?gastos-administrativos "</td><td></td><td></td><td></td><td> Gastos del Dpto Administración </td></tr>" crlf)
   (printout k "<tr><td> (-) </td><td align='right'>" ?gastos-ventas "</td><td></td><td></td><td></td><td> Gastos del Dpto Ventas </td></tr>" crlf)
   (printout k "<tr><td>(-)</td><td align='right' >" ?gastos-en-investigacion-y-desarrollo "</td><td></td><td></td><td></td><td> Gastos en I+D </td></tr>" crlf)
   (printout k "<tr><td>(-)</td><td align='right'>" ?gastos-en-promocion "</td><td></td><td></td><td></td><td> Gastos en Promoción </td></tr>" crlf)
   (printout k "<tr><td>(-)</td><td align='right'>" ?salarios "</td><td></td><td></td><td></td><td> Salarios </td></tr>" crlf)
   (printout k "<tr><td>(-) </td><td align='right'>" ?perdida-por-correccion-monetaria "</td><td></td><td></td><td></td><td> Pérdida Por Corrección Monetaria </td></tr>" crlf)
   (printout k "<tr><td>(-) </td><td align='right'>" ?amortizacion-intangibles "</td><td></td><td></td><td></td><td> Amortización </td></tr>" crlf)
   (printout k "<tr><td>(-) </td><td align='right'>" ?depreciacion "</td><td></td><td></td><td></td><td> Depreciación </td></tr>" crlf)
   (printout t "|" tab tab "| (-) " ?pea tab tab "Pérdida Ejercicio Anterior PEA A.33-LIR)" crlf)
   (printout k "<tr><td></td><td></td><td></td><td> (-) </td><td align='right'>" ?pea "</td><td> Pérdida Ejercicio Anterior PEA A.33-LIR </td></tr>" crlf)
   (printout t "|" tab tab "|     " ?utilidad-de-operacion tab "UTILIDAD DE OPERACION (U.Bruta - G.Ded. - PEA)" crlf)
   (printout k "<tr><td> </td><td></td><td></td><td></td><td align='right'> " ?utilidad-de-operacion "</td><td> UTILIDAD DE OPERACIÓN </td></tr>" crlf)
   (printout t "|" tab tab "| (-) " tab "Otros Gastos" crlf)
   (printout k "<tr><td></td><td></td><td></td><td> (-) </td><td align='right'>" 0 "</td><td> Otros Gastos </td></tr>" crlf)
   (printout t "|" tab tab "|     " ?utilidad-antes-de-reserva tab "UTILIDAD ANTES DE RESERVA (U.Op-Reserva Lega)" crlf)
   (printout k "<tr><td></td><td> </td><td> </td><td></td><td align='right'>" ?utilidad-antes-de-reserva "</td><td> Utilidad Antes de Reserva </td></tr>" crlf)
   (printout t "|" tab tab "| (-) " tab ?reserva-legal tab " Reserva Legal" crlf)
   (printout k "<tr><td></td><td></td><td></td><td> (-) </td><td align='right'>" ?reserva-legal "</td><td> Reserva Legal </td></tr>" crlf)
   (printout t "|" tab tab "| (=) " ?margen-de-explotacion tab "Resultado de Explotación " crlf)
   (printout k "<tr style='font-weight:bold; background-color: azure'><td> <td></td></td><td> </td><td></td><td align='right'>" ?margen-de-explotacion "</td><td> Resultado de Explotacion </td></tr>" crlf)
   (printout t "|" tab tab "| (+) " ?ganancia-por-correccion-monetaria tab "Ganancia Por Corrección Monetaria" crlf)
   (printout k "<tr><td></td><td></td><td></td><td> (+) </td><td align='right'>" ?ganancia-por-correccion-monetaria "</td><td> Ganancia Por Corrección Monetaria </td></tr>" crlf)
   (printout t "|" tab tab "| (-) " ?impuestos-no-recuperables tab "Impuestos No Recuperables" crlf)
   (printout k "<tr><td></td><td></td><td></td><td> (-) </td><td align='right'>" ?impuestos-no-recuperables "</td><td> Impuestos No Recuperables </td></tr>" crlf)
   (printout t "|" tab tab "| (=)   " ?margen-fuera-de-explotacion tab "Resultado Fuera de Explotación " crlf)
   (printout k "<tr style='font-weight:bold; background-color: azure'><td> <td></td></td><td> </td><td></td><td align='right'>" ?margen-fuera-de-explotacion "</td><td> Resultado Fuera de Explotacion </td></tr>" crlf)
   (printout t "|" tab tab "|     " ?utilidad-antes-de-idpc tab "Resultado Antes de Impuesto" crlf)
   (printout k "<tr style='font-weight:bold; background-color: azure'><td> <td></td></td><td> </td><td></td><td align='right'>" ?utilidad-antes-de-idpc "</td><td> Resultado Antes de Impuesto</td></tr>" crlf)
   (bind ?utilidad 0)
   (if (> ?margen-fuera-de-explotacion ?utilidad-del-ejercicio)
      then
      (printout t "|" tab tab "| (-) " ?idpc tab "Impuesto Determinado, factor es " ?tasa-idpc " en " ?ano crlf)
      (printout k "<tr style='background-color: lightgreen' ><td></td><td></td><td></td><td> (X) </td><td align='right'> " ?idpc "</td><td> Impuesto No Aplica porque hay pérdida tributaria </td></tr>" crlf)
      (bind ?utilidad ?utilidad-antes-de-idpc))
   (if (< ?margen-fuera-de-explotacion ?utilidad-del-ejercicio)
      then
      (printout t "|" tab tab "| (-) " ?idpc tab "Impuesto Determinado, factor es " ?tasa-idpc " en " ?ano crlf)
      (printout k "<tr style='font-weight:bold; background-color: azure'><td></td><td></td><td></td><td> (-) </td><td align='right'> " ?idpc "</td><td> Impuesto Determinado, factor es: " ?tasa-idpc " en " ?ano " </td></tr>" crlf)
      (bind ?utilidad (+ ?utilidad-antes-de-idpc ?idpc)))
   (printout t "|" tab tab "|     " ?utilidad tab "Utilidad Calculada" crlf)
   (printout k "<tr style='font-weight:bold;background-color: azure'><td> <td></td></td><td> </td><td></td><td align='right'>" ?utilidad "</td><td> Utilidad Calculada</td></tr>" crlf)
   (printout t "|" tab tab "|     " (- ?utilidad-acreedor ?utilidad-deber) tab "Utilidad del ejercico (módulo liquidación)" crlf)
   (printout k "<tr style='font-weight:bold;background-color: azure'><td> <td></td></td><td> </td><td></td><td align='right'>" (- ?utilidad-acreedor ?utilidad-deber) "</td><td> Utilidad del Ejercicio (módulo liquidación)</td></tr>" crlf)
   (printout t "|" ?herramientas tab tab tab tab "Depreciación Instantanea Propyme" crlf)
   (printout t "|" ?amortizacion-acumulada-instantanea tab tab tab tab "Amortizacion Instantanea Intangibles (no-contable) " crlf)
   (printout k "<tr><td> (-) </td><td align='right'>" ?herramientas "</td><td></td><td></td><td></td><td> Depreciación Instantánea Activo Fijo Propyme </td></tr>" crlf)
   (printout k "<tr><td> (-) </td><td align='right'>" ?amortizacion-acumulada-instantanea "</td><td></td><td></td><td></td><td> Amortización Instantánea Intangibles </td></tr>" crlf)
   (printout t "|" ?aportes tab tab tab tab "Aportes" crlf)
   (printout k "<tr><td> (?) </td><td align='right'>" ?aportes "</td><td></td><td></td><td></td><td> Aportes </td></tr>" crlf)
   (printout t "|" tab tab "| (=) " ?utilidad-tributaria tab "Utilidad Tributaria" crlf)
   (printout k "<tr><td> <td></td></td><td> </td><td> (=) </td><td align='right'>" ?utilidad-tributaria "</td><td> Utilidad Tributaria </td></tr>" crlf)
   (printout t "|" tab tab "| (=) " ?utilidad-del-ejercicio tab "BASE IMPONIBLE (U.Antes.idpc - idpc) (módulo liquidaciones)" crlf)
   (if (eq ?utilidad-del-ejercicio ?utilidad-tributaria)
      then
      (printout k "<tr><td></td><td></td><td></td><td> (=) </td><td align='right' style='background-color: lightgreen'>" ?utilidad-del-ejercicio "</td><td> BASE IMPONIBLE (módulo liquidaciones) <small> " ?regimen "</small></td></tr>" crlf)
      else
      (printout k "<tr><td></td><td></td><td></td><td> (=) </td><td align='right' style='font-weight:bold; color: white; background-color: crimson'>" ?utilidad-del-ejercicio "</td><td> BASE IMPONIBLE (módulo liquidaciones) <small>" ?regimen "</small></td></tr>" crlf))
   (if (and (eq ?regimen propyme) (> ?utilidad-del-ejercicio 0))
      then
      (printout k "<tr><td></td><td></td><td></td><td> (-) </td><td align='right' style=' background-color: gold'>" (* ?utilidad-del-ejercicio 0.5) "</td><td>    Rebaja Art.14 Letra E <small>" ?regimen "</small></td></tr>" crlf)
      (printout k "<tr><td></td><td></td><td></td><td> (=) </td><td align='right' style='font-weight:bold; color: white; background-color: crimson'>" (* ?utilidad-del-ejercicio 0.5) "</td><td> RENTA LIQUIDA IMPONIBLE</td></tr>" crlf))
   (printout t "================================================================================" crlf)
   (printout k "</tbody></table>"))

(defmodule AJUSTEC
   (import MAIN deftemplate ?ALL))

(deffunction AJUSTEC::mes_to_numero (?p0))

(deffunction AJUSTEC::to_serial_date (?p0 ?p1 ?p2))

(deffunction AJUSTEC::mes_to_numero
   (?mes)
   (switch ?mes
      (case enero then
         1)
      (case febrero then
         2)
      (case marzo then
         3)
      (case abril then
         4)
      (case mayo then
         5)
      (case junio then
         6)
      (case julio then
         7)
      (case agosto then
         8)
      (case septiembre then
         9)
      (case octubre then
         10)
      (case noviembre then
         11)
      (case diciembre then
         12)))

(deffunction AJUSTEC::to_serial_date
   (?dia ?mes ?ano)
   (+ (* 10000 ?ano) (* 100 (mes_to_numero ?mes)) ?dia))

(defrule AJUSTEC::inicio-de-modulo-subtotal
   (declare (salience 10000))
   =>
   (printout t "----------------------- AJUSTEC----------------------" crlf)
   (set-strategy depth))

(defrule AJUSTEC::preparacion-totales
   ?totales <- (totales)
   =>
   (retract ?totales))

(defrule AJUSTEC::preparacion-cuentas-activo
   ?cuenta <- (cuenta (totalizada-como-activo true))
   =>
   (modify ?cuenta (totalizada-como-activo false)))

(defrule AJUSTEC::preparacion-cuentas-activo-circulante
   ?cuenta <- (cuenta (totalizada-como-activo-circulante true))
   =>
   (modify ?cuenta (totalizada-como-activo-circulante false)))

(defrule AJUSTEC::preparacion-cuentas-activo-fijo
   ?cuenta <- (cuenta (totalizada-como-activo-fijo true))
   =>
   (modify ?cuenta (totalizada-como-activo-fijo false)))

(defrule AJUSTEC::preparacion-cuentas-pasivo
   ?cuenta <- (cuenta (totalizada-como-pasivo true))
   =>
   (modify ?cuenta (totalizada-como-pasivo false)))

(defrule AJUSTEC::preparacion-cuentas-pasivo-circulante
   ?cuenta <- (cuenta (totalizada-como-pasivo-circulante true) (nombre ?nombre))
   =>
   (modify ?cuenta (totalizada-como-pasivo-circulante false)))

(defrule AJUSTEC::preparacion-cuentas-pasivo-fijo
   ?cuenta <- (cuenta (totalizada-como-pasivo-fijo true))
   =>
   (modify ?cuenta (totalizada-como-pasivo-fijo false)))

(defrule AJUSTEC::preparacion-cuentas-patrimonio
   ?cuenta <- (cuenta (totalizada-como-patrimonio true))
   =>
   (modify ?cuenta (totalizada-como-patrimonio false)))

(defrule AJUSTEC::fin-de-modulo-subtotal
   (declare (salience 10))
   =>
   (printout t "----fin------------------- AJUSTEC----------------------" crlf))

(defmodule TOTALC
   (import MAIN deftemplate ?ALL))

(deffunction TOTALC::mes_to_numero (?p0))

(deffunction TOTALC::to_serial_date (?p0 ?p1 ?p2))

(deffunction TOTALC::mes_to_numero
   (?mes)
   (switch ?mes
      (case enero then
         1)
      (case febrero then
         2)
      (case marzo then
         3)
      (case abril then
         4)
      (case mayo then
         5)
      (case junio then
         6)
      (case julio then
         7)
      (case agosto then
         8)
      (case septiembre then
         9)
      (case octubre then
         10)
      (case noviembre then
         11)
      (case diciembre then
         12)))

(deffunction TOTALC::to_serial_date
   (?dia ?mes ?ano)
   (+ (* 10000 ?ano) (* 100 (mes_to_numero ?mes)) ?dia))

(defrule TOTALC::inicio-de-modulo-total
   (declare (salience 10000))
   (empresa (nombre ?empresa))
   =>
   (printout t "--------módulo----------- TOTALC -----------------------" crlf)
   (assert (totales (empresa ?empresa))))

(defrule TOTALC::sumando-inventario
   (no)
   ?subtotal <- (subtotales (cuenta inventario) (debe ?debe-i) (haber ?haber-i))
   (cuenta (nombre inventario) (debe ?debe) (haber ?haber))
   =>
   (bind ?total-debe (+ ?debe-i ?debe))
   (bind ?total-haber (+ ?haber-i ?haber))
   (modify ?subtotal (debe ?total-debe) (haber ?total-haber)))

(defrule TOTALC::sumando-activos
   (declare (salience 9000))
   (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   ?cuenta <- (cuenta (padre false) (origen real) (partida ?numero) (nombre ?nombre) (grupo activo) (debe ?debe) (haber ?haber) (totalizada-como-activo false))
   ?totales <- (totales (activos ?activos))
   (test (neq ?debe ?haber))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (bind ?saldo (- ?debe ?haber))
   (bind ?total (+ ?activos ?saldo))
   (modify ?totales (activos ?total))
   (modify ?cuenta (totalizada-como-activo true))
   (printout t "--+a c t i v o= " ?total tab ?saldo " de " ?nombre crlf))

(defrule TOTALC::sumando-activos-circulantes
   (declare (salience 8))
   (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   ?cuenta <- (cuenta (padre false) (origen real) (partida ?numero) (nombre ?nombre) (grupo activo) (circulante true) (debe ?debe) (haber ?haber) (totalizada-como-activo-circulante false))
   ?totales <- (totales (activo-circulante ?activo-circulante))
   (test (neq ?debe ?haber))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (bind ?saldo (- ?debe ?haber))
   (bind ?total (+ ?activo-circulante ?saldo))
   (modify ?totales (activo-circulante ?total))
   (modify ?cuenta (totalizada-como-activo-circulante true))
   (printout t "--+acirculante= " ?total tab ?saldo " de " ?nombre crlf))

(defrule TOTALC::sumando-activos-fijos
   (declare (salience 8))
   (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   ?cuenta <- (cuenta (padre false) (origen real) (partida ?numero) (nombre ?nombre) (grupo activo) (circulante false) (debe ?debe) (haber ?haber) (totalizada-como-activo-fijo false))
   ?totales <- (totales (activo-fijo ?activo-fijo))
   (test (neq ?debe ?haber))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (bind ?saldo (- ?debe ?haber))
   (bind ?total (+ ?activo-fijo ?saldo))
   (modify ?totales (activo-fijo ?total))
   (modify ?cuenta (totalizada-como-activo-fijo true))
   (printout t "--+a f i j o  = " ?total tab ?saldo " de " ?nombre crlf))

(defrule TOTALC::sumando-pasivos
   (declare (salience 8))
   (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   ?cuenta <- (cuenta (padre false) (origen real) (partida ?numero) (nombre ?nombre) (grupo pasivo) (debe ?debe) (haber ?haber) (totalizada-como-pasivo false))
   ?totales <- (totales (pasivos ?pasivos))
   (test (neq ?debe ?haber))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (bind ?saldo (- ?haber ?debe))
   (bind ?total (+ ?pasivos ?saldo))
   (modify ?totales (pasivos ?total))
   (modify ?cuenta (totalizada-como-pasivo true))
   (printout t "--+p a s i v o= " ?total tab ?saldo " de " ?nombre crlf))

(defrule TOTALC::sumando-pasivos-circulantes
   (declare (salience 8))
   (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   ?cuenta <- (cuenta (padre false) (origen real) (partida ?numero) (nombre ?nombre) (grupo pasivo) (circulante true) (debe ?debe) (haber ?haber) (totalizada-como-pasivo-circulante false))
   ?totales <- (totales (pasivo-circulante ?pasivo-circulante))
   (test (neq ?haber ?debe))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (bind ?saldo (- ?haber ?debe))
   (bind ?total (+ ?pasivo-circulante ?saldo))
   (modify ?totales (pasivo-circulante ?total))
   (modify ?cuenta (totalizada-como-pasivo-circulante true))
   (printout t "--+pcirculante= " ?total tab ?saldo " de " ?nombre crlf))

(defrule TOTALC::sumando-pasivo-fijo
   (declare (salience 8))
   (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   ?cuenta <- (cuenta (padre false) (origen real) (partida ?numero) (nombre ?nombre) (grupo pasivo) (circulante false) (debe ?debe) (haber ?haber) (totalizada-como-pasivo-fijo false))
   ?totales <- (totales (pasivo-fijo ?pasivo-fijo))
   (test (neq ?haber ?debe))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (bind ?saldo (- ?haber ?debe))
   (bind ?total (+ ?pasivo-fijo ?saldo))
   (modify ?totales (pasivo-fijo ?total))
   (modify ?cuenta (totalizada-como-pasivo-fijo true))
   (printout t "--+p f i j o  = " ?total tab ?saldo " de " ?nombre crlf))

(defrule TOTALC::sumando-patrimonio
   (declare (salience 8))
   (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   ?cuenta <- (cuenta (padre false) (nombre ?nombre) (totalizada-como-patrimonio false) (grupo patrimonio) (debe ?debe) (haber ?haber) (origen ?origen))
   ?totales <- (totales (empresa ?empresa) (patrimonio ?patrimonio))
   (test (neq ?haber ?debe))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (bind ?saldo (- ?haber ?debe))
   (bind ?total (+ ?patrimonio ?saldo))
   (modify ?totales (patrimonio ?total))
   (modify ?cuenta (totalizada-como-patrimonio true))
   (printout t "--+patrimonio = " ?total tab ?saldo " de " ?nombre crlf))

(defrule TOTALC::sumando-ganancias
   (declare (salience 8))
   (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   ?cuenta <- (cuenta (padre false) (empresa ?empresa) (nombre ?nombre) (totalizada-como-patrimonio false) (de-resultado true) (debe ?debe) (haber ?haber) (origen real))
   ?totales <- (totales (empresa ?empresa) (resultados ?resultados))
   (test (> ?debe ?haber))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (bind ?saldo (- ?debe ?haber))
   (bind ?total (+ ?resultados ?saldo))
   (modify ?totales (resultados ?total))
   (modify ?cuenta (totalizada-como-patrimonio true))
   (printout t "--+ganancias  = " ?total tab ?saldo " de " ?nombre crlf))

(defrule TOTALC::sumando-perdidas
   (declare (salience 8))
   (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   ?cuenta <- (cuenta (padre false) (empresa ?empresa) (nombre ?nombre) (totalizada-como-patrimonio false) (de-resultado true) (debe ?debe) (haber ?haber) (origen real))
   ?totales <- (totales (empresa ?empresa) (resultados ?resultados))
   (test (> ?haber ?debe))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (bind ?saldo (- ?haber ?debe))
   (bind ?total (+ ?resultados ?saldo))
   (modify ?totales (resultados ?total))
   (modify ?cuenta (totalizada-como-patrimonio true))
   (printout t "--+perdidas   = " ?total tab ?saldo " de " ?nombre crlf))

(defmodule TC
   (import MAIN deftemplate ?ALL))

(deffunction TC::mes_to_numero (?p0))

(deffunction TC::to_serial_date (?p0 ?p1 ?p2))

(deffunction TC::mes_to_numero
   (?mes)
   (switch ?mes
      (case enero then
         1)
      (case febrero then
         2)
      (case marzo then
         3)
      (case abril then
         4)
      (case mayo then
         5)
      (case junio then
         6)
      (case julio then
         7)
      (case agosto then
         8)
      (case septiembre then
         9)
      (case octubre then
         10)
      (case noviembre then
         11)
      (case diciembre then
         12)))

(deffunction TC::to_serial_date
   (?dia ?mes ?ano)
   (+ (* 10000 ?ano) (* 100 (mes_to_numero ?mes)) ?dia))

(defrule TC::inicio-de-modulo-TC
   (declare (salience 9000))
   =>
   (printout t "--módulo----------------------- TC ----------------------" crlf)
   (set-strategy depth))

(defrule TC::encabezado
   ?cuenta <- (cuenta (partida nil) (mostrado-en-t false) (nombre ?nombre) (origen real) (saldo ?saldo))
   =>
   (printout t crlf crlf crlf)
   (printout t ?nombre crlf)
   (printout t "---------------------------- recibida activo-fijo tipo-de-documento" crlf)
   (assert (subtotales (cuenta ?nombre)))
   (assert (hacer ?nombre)))

(defrule TC::t-filas-de-resultados
   (empresa (nombre ?empresa))
   (balance (dia ?top))
   (partida (numero ?partida) (dia ?dia))
   ?hacer <- (hacer ?nombre)
   ?cuenta <- (cuenta (partida ?partida) (nombre ?nombre) (debe ?debe) (haber ?haber) (de-resultado true) (mostrado-en-t false) (origen ?origen))
   ?subtotales <- (subtotales (mostrado false) (totalizado false) (cuenta ?nombre) (debe ?total_debe) (haber ?total_haber))
   (test (>= ?top ?dia))
   =>
   (printout t "r " ?partida tab ?debe tab "|" tab ?haber crlf)
   (modify ?cuenta (mostrado-en-t true))
   (modify ?subtotales (debe (+ ?total_debe ?debe)) (haber (+ ?total_haber ?haber))))

(defrule TC::t-filas
   (empresa (nombre ?empresa))
   (balance (dia ?top))
   (partida (numero ?partida) (dia ?dia))
   ?hacer <- (hacer ?nombre)
   ?cuenta <- (cuenta (de-resultado false) (nombre ?nombre) (partida ?partida) (debe ?debe) (haber ?haber) (mostrado-en-t false) (origen real))
   ?subtotales <- (subtotales (mostrado false) (totalizado false) (cuenta ?nombre) (debe ?total_debe) (haber ?total_haber))
   (test (and (neq nil ?partida) (> ?partida 0)))
   (test (>= ?top ?dia))
   =>
   (printout t ?partida tab ?debe tab "|" tab ?haber crlf)
   (modify ?cuenta (mostrado-en-t true))
   (modify ?subtotales (debe (+ ?total_debe ?debe)) (haber (+ ?total_haber ?haber))))

(defrule TC::t-diferencia-deudora
   ?subtotales <- (subtotales (mostrado false) (haber ?haber) (debe ?debe) (acreedor ?acreedor) (deber ?deber) (totalizado false))
   (test (> ?debe ?haber))
   =>
   (bind ?diferencia (- ?debe ?haber))
   (modify ?subtotales (deber ?diferencia) (totalizado true)))

(defrule TC::t-diferencia-acreedora
   ?subtotales <- (subtotales (haber ?haber) (debe ?debe) (acreedor ?acreedor) (deber ?deber) (totalizado false) (mostrado false))
   (test (< ?debe ?haber))
   =>
   (bind ?diferencia (- ?haber ?debe))
   (modify ?subtotales (acreedor ?diferencia) (totalizado true)))

(defrule TC::t-footer-deudor
   ?subtotales <- (subtotales (haber ?haber) (debe ?debe) (totalizado true) (mostrado false))
   (test (> ?debe ?haber))
   =>
   (bind ?diferencia (- ?debe ?haber))
   (printout t "----------------------------" crlf)
   (printout t tab ?debe tab "|" tab ?haber crlf)
   (printout t tab "--------------------" crlf)
   (printout t "$" tab ?diferencia crlf))

(defrule TC::t-footer-acreedor
   ?subtotales <- (subtotales (haber ?haber) (debe ?debe) (totalizado true) (mostrado false))
   (test (< ?debe ?haber))
   =>
   (bind ?diferencia (- ?haber ?debe))
   (printout t "----------------------------" crlf)
   (printout t tab ?debe tab "|" tab ?haber crlf)
   (printout t tab "---------------------" crlf)
   (printout t tab tab "|" tab ?diferencia tab "$" crlf))

(defmodule SUBCUENTA
   (import MAIN deftemplate ?ALL))

(deffunction SUBCUENTA::mes_to_numero (?p0))

(deffunction SUBCUENTA::to_serial_date (?p0 ?p1 ?p2))

(deffunction SUBCUENTA::mes_to_numero
   (?mes)
   (switch ?mes
      (case enero then
         1)
      (case febrero then
         2)
      (case marzo then
         3)
      (case abril then
         4)
      (case mayo then
         5)
      (case junio then
         6)
      (case julio then
         7)
      (case agosto then
         8)
      (case septiembre then
         9)
      (case octubre then
         10)
      (case noviembre then
         11)
      (case diciembre then
         12)))

(deffunction SUBCUENTA::to_serial_date
   (?dia ?mes ?ano)
   (+ (* 10000 ?ano) (* 100 (mes_to_numero ?mes)) ?dia))

(defrule SUBCUENTA::inicio-de-modulo-TC
   (declare (salience 9000))
   =>
   (printout t "--módulo----------------------- SUBCUENTAS ---------------------" crlf)
   (set-strategy depth))

(defrule SUBCUENTA::inicio-kindle-k-sub-cuentas-rules
   (declare (salience 10000))
   (empresa (nombre ?empresa))
   =>
   (bind ?archivo (str-cat "./doc/" ?empresa "/subcuentas.markdown"))
   (open ?archivo k "w")
   (printout k "--- " crlf)
   (printout k "layout: page" crlf)
   (printout k "--- " crlf))

(defrule SUBCUENTA::fin-kindle-k
   (declare (salience -100))
   =>
   (close k))

(defrule SUBCUENTA::encabezado
   ?cuenta <- (cuenta (partida ?Numero&nil) (nombre ?nombre) (padre ?padre) (nombre-sii ?nombre-sii) (descripcion ?descripcion) (origen nominativo))
   (exists
        (cuenta (mostrado-en-t false) (nombre ?nombre) (partida ?Numero2&~?Numero) (saldo ?saldo)))
   (test (neq false ?padre))
   =>
   (printout t crlf crlf crlf)
   (printout t ?nombre "#" ?padre crlf)
   (printout t "----------------------------" crlf)
   (assert (subtotales (cuenta ?nombre)))
   (assert (hacer ?nombre))
   (printout k "<table>" crlf)
   (printout k "<thead><th colspan='6'> " ?nombre "</th><th colspan='3'>" ?nombre-sii "</th></thead>" crlf)
   (printout k "<thead><th colspan='9'> " ?descripcion "</th></thead>" crlf)
   (printout k "<thead><th> voucher </th><th> partida </th><th> debe </th> <th> | </th> <th> haber </th><th> mes </th> <th>recibida</th> <th>activo-fijo</th> <th> tipo documento</th></thead>" crlf)
   (printout k "<tbody>" crlf))

(defrule SUBCUENTA::t-filas-de-resultados
   (empresa (nombre ?empresa))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (partida (numero ?partida) (dia ?dia) (mes ?mes) (ano ?ano))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   ?hacer <- (hacer ?nombre)
   ?cuenta <- (cuenta (partida ?partida) (nombre ?nombre) (debe ?debe) (haber ?haber) (recibida ?recibida) (activo-fijo ?activo-fijo) (mes ?mes) (tipo-de-documento ?tipo-de-documento) (de-resultado true) (mostrado-en-t false) (origen nominativo))
   ?subtotales <- (subtotales (mostrado false) (totalizado false) (cuenta ?nombre) (debe ?total_debe) (haber ?total_haber))
   (revision (partida ?partida) (voucher ?voucher))
   (test (or (> ?debe 0) (> ?haber 0)))
   =>
   (printout t "r " ?partida tab ?debe tab "|" tab ?haber crlf)
   (printout k "<tr> <td>" ?voucher "</td> <td align='right'>" ?partida "</td> <td align='right'>" ?debe "</td> <td> | </td> <td align='right'> " ?haber "</td> <td>" ?mes "</td><td>" ?recibida "</td><td> " ?activo-fijo "</td><td> " ?tipo-de-documento "</td> </tr>" crlf)
   (modify ?cuenta (mostrado-en-t true))
   (modify ?subtotales (debe (+ ?total_debe ?debe)) (haber (+ ?total_haber ?haber))))

(defrule SUBCUENTA::t-filas
   (empresa (nombre ?empresa))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (partida (numero ?partida) (dia ?dia) (mes ?mes) (ano ?ano))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   ?hacer <- (hacer ?nombre)
   ?cuenta <- (cuenta (tipo-de-documento ?tipo-de-documento) (de-resultado false) (nombre ?nombre) (mes ?mes) (partida ?partida) (debe ?debe) (haber ?haber) (mostrado-en-t false) (origen ?origen))
   ?subtotales <- (subtotales (mostrado false) (totalizado false) (cuenta ?nombre) (debe ?total_debe) (haber ?total_haber))
   (test (and (neq nil ?partida) (> ?partida 0)))
   (test (or (> ?debe 0) (> ?haber 0)))
   =>
   (printout t ?partida tab ?debe tab "|" tab ?haber tab ?mes tab tipo-de-documento tab ?tipo-de-documento crlf)
   (modify ?cuenta (mostrado-en-t true))
   (modify ?subtotales (debe (+ ?total_debe ?debe)) (haber (+ ?total_haber ?haber))))

(defrule SUBCUENTA::t-diferencia-deudora
   ?subtotales <- (subtotales (mostrado false) (haber ?haber) (debe ?debe) (acreedor ?acreedor) (deber ?deber) (totalizado false))
   (test (> ?debe ?haber))
   =>
   (bind ?diferencia (- ?debe ?haber))
   (modify ?subtotales (deber ?diferencia) (totalizado true)))

(defrule SUBCUENTA::t-diferencia-acreedora
   ?subtotales <- (subtotales (haber ?haber) (debe ?debe) (acreedor ?acreedor) (deber ?deber) (totalizado false) (mostrado false))
   (test (< ?debe ?haber))
   =>
   (bind ?diferencia (- ?haber ?debe))
   (modify ?subtotales (acreedor ?diferencia) (totalizado true)))

(defrule SUBCUENTA::t-footer-deudor
   ?subtotales <- (subtotales (haber ?haber) (debe ?debe) (totalizado true) (mostrado false))
   (test (> ?debe ?haber))
   =>
   (bind ?diferencia (- ?debe ?haber))
   (printout t "----------------------------" crlf)
   (printout t tab ?debe tab "|" tab ?haber crlf)
   (printout t tab "--------------------" crlf)
   (printout t "$" tab ?diferencia crlf)
   (printout k "<tr> <td></td> <td></td> <td align='right'>" ?debe "</td> <td>|</td> <td align='right'>" ?haber "</td></tr>" crlf)
   (printout k "<tr> <td></td> <td>$</td> <td align='right'>" ?diferencia "</td></tr>" crlf)
   (printout k "</tbody>" crlf)
   (printout k "</table>" crlf))

(defrule SUBCUENTA::t-footer-acreedor
   ?subtotales <- (subtotales (haber ?haber) (debe ?debe) (totalizado true) (mostrado false))
   (test (< ?debe ?haber))
   =>
   (bind ?diferencia (- ?haber ?debe))
   (printout t "----------------------------" crlf)
   (printout t tab ?debe tab "|" tab ?haber crlf)
   (printout t tab "---------------------" crlf)
   (printout t tab tab "|" tab ?diferencia tab "$" crlf)
   (printout k "<tr> <td> </td><td></td> <td align='right'>" ?debe "</td> <td>|</td> <td align='right'>" ?haber "</td> </tr>" crlf)
   (printout k "<tr> <td> </td><td> </td> <td></td> <td>|</td> <td align='right'>" ?diferencia "</td> <td>$</td> </tr>" crlf)
   (printout k "</tbody>" crlf)
   (printout k "</table>" crlf))

(defmodule RECUADRO
   (import MAIN deftemplate ?ALL))

(deffunction RECUADRO::mes_to_numero (?p0))

(deffunction RECUADRO::to_serial_date (?p0 ?p1 ?p2))

(deffunction RECUADRO::mes_to_numero
   (?mes)
   (switch ?mes
      (case enero then
         1)
      (case febrero then
         2)
      (case marzo then
         3)
      (case abril then
         4)
      (case mayo then
         5)
      (case junio then
         6)
      (case julio then
         7)
      (case agosto then
         8)
      (case septiembre then
         9)
      (case octubre then
         10)
      (case noviembre then
         11)
      (case diciembre then
         12)))

(deffunction RECUADRO::to_serial_date
   (?dia ?mes ?ano)
   (+ (* 10000 ?ano) (* 100 (mes_to_numero ?mes)) ?dia))

(defrule RECUADRO::inicio
   (declare (salience 10000))
   =>
   (printout t "--modulo-------------- RECUADRO------------------" crlf))

(defrule RECUADRO::estado-de-resultados-mensual-simplificado
   (empresa (nombre ?empresa))
   (subtotales (cuenta iva) (acreedor ?iva-debito) (deber ?iva-credito))
   =>
   (printout t crlf crlf)
   (printout t "================================================================================" crlf)
   (printout t "ESTADO DE RESULTADOS SIMPLIFICADO" crlf)
   (printout t "================================================================================" crlf)
   (printout t "|" ?iva-credito tab tab tab tab "IVA Credito" crlf)
   (printout t "|" ?iva-debito tab tab tab tab "IVA Debito" crlf)
   (printout t "================================================================================" crlf)
   (printout t crlf crlf))

(defrule RECUADRO::estado-de-resultados-mensual
   (empresa (nombre ?empresa))
   (subtotales (cuenta ventas) (haber ?ventas))
   (subtotales (cuenta devolucion-sobre-ventas) (debe ?devolucion-sobre-ventas))
   (subtotales (cuenta compras) (debe ?compras))
   (subtotales (cuenta gastos-sobre-compras) (debe ?gastos-sobre-compras))
   (subtotales (cuenta inventario-inicial) (debe ?inventario-inicial))
   (subtotales (cuenta inventario-final) (debe ?inventario-final))
   (subtotales (cuenta gastos-administrativos) (debe ?gastos-administrativos))
   (subtotales (cuenta gastos-ventas) (debe ?gastos-ventas))
   (subtotales (cuenta costos-de-ventas) (deber ?costos-de-ventas))
   (subtotales (cuenta idpc) (haber ?idpc))
   (subtotales (cuenta reserva-legal) (haber ?reserva-legal))
   (subtotales (cuenta utilidad) (haber ?utilidad-del-ejercicio))
   =>
   (bind ?ventas-netas (- ?ventas ?devolucion-sobre-ventas))
   (bind ?compras-totales (+ ?compras ?gastos-sobre-compras))
   (bind ?compras-netas ?compras-totales)
   (bind ?existencias (+ ?compras-netas ?inventario-inicial))
   (bind ?utilidad-bruta (- ?ventas-netas ?costos-de-ventas))
   (bind ?gastos-de-operacion (+ ?gastos-administrativos ?gastos-ventas))
   (bind ?utilidad-de-operacion (- ?utilidad-bruta ?gastos-de-operacion))
   (bind ?utilidad-antes-de-reserva ?utilidad-de-operacion)
   (bind ?utilidad-antes-de-idpc (- ?utilidad-de-operacion ?reserva-legal))
   (printout t ?empresa crlf)
   (printout t "================================================================================" crlf)
   (printout t "ESTADO DE RESULTADOS" crlf)
   (printout t "================================================================================" crlf)
   (printout t "|" tab tab "|     " ?ventas tab "Ventas" crlf)
   (printout t "|" tab tab "| (-) -  " tab tab "Rebajas sobre ventas" crlf)
   (printout t "|" tab tab "| (-) " ?devolucion-sobre-ventas tab tab "Devoluciones sobre ventas" crlf)
   (printout t "|" tab tab "| (-) -  " tab tab "Descuentos sobre ventas" crlf)
   (printout t "|" tab tab "| (=) " ?ventas-netas tab "Ventas Netas" crlf)
   (printout t crlf)
   (printout t "|" tab tab "| (-) " ?costos-de-ventas tab "Costos de Ventas" crlf)
   (printout t crlf)
   (printout t "|" ?compras tab tab tab tab "Compras" crlf)
   (printout t "| (+) " ?gastos-sobre-compras tab tab tab tab "Gastos sobre Compras" crlf)
   (printout t "|" ?compras-totales tab tab tab tab "Compras Totales" crlf)
   (printout t "| (-) - " tab tab tab tab "Rebajas sobre Compras" crlf)
   (printout t "| (-) - " tab tab tab tab "Devoluciones sobre Compras" crlf)
   (printout t "| (-) - " tab tab tab tab "Descuentos sobre Compras" crlf)
   (printout t "|" ?compras-totales tab tab tab tab "Compras Netas" crlf)
   (printout t crlf)
   (printout t "| (+) " ?inventario-inicial tab "|" tab tab "Inventario Inicial" crlf)
   (printout t "| (=) " ?existencias tab "|" tab tab "Mercadería Disponible para la Venta " crlf)
   (printout t "| (-) " ?inventario-final tab "|" tab tab "Inventario Final " crlf)
   (printout t crlf)
   (printout t "|" tab tab "|     " ?utilidad-bruta tab "UTILIDAD BRUTA (Ventas Netas - Costo de Ventas)" crlf)
   (printout t "|" tab tab "| (-) " ?gastos-de-operacion tab tab "Gastos de Operación (Gastos Admon + Gastos Vtas)" crlf)
   (printout t "|" ?gastos-administrativos tab tab tab tab "Gastos del Dpto Administración" crlf)
   (printout t "|" ?gastos-ventas tab tab tab tab "Gastos del Dpto Ventas" crlf)
   (printout t "|" tab tab "|     " ?utilidad-de-operacion tab "UTILIDAD DE OPERACION (U.Bruta - G.Op.)" crlf)
   (printout t "|" tab tab "| (-) " tab tab tab "Otros Gastos" crlf)
   (printout t "|" tab tab "|     " ?utilidad-antes-de-reserva tab "UTILIDAD ANTES DE RESERVA (U.Op-Reserva Lega)" crlf)
   (printout t "|" tab tab "| (-) " ?reserva-legal tab (* ?utilidad-antes-de-reserva 0.07) " Reserva Legal (7% de Utilidad de Operacion)" crlf)
   (printout t "|" tab tab "|     " ?utilidad-antes-de-idpc tab "UTILIDAD ANTES DE IMPUESTO A LA RENTA (U.Antes.Reserva - idpc)" crlf)
   (printout t "|" tab tab "| (-) " ?idpc tab (* ?utilidad-antes-de-idpc 0.25) " Impuesto a la Renta (25% de U.Antes.impuesto) (idpc 10% en 2020)" crlf)
   (printout t "|" tab tab "|     " ?utilidad-del-ejercicio tab (- ?utilidad-antes-de-idpc ?idpc) " UTILIDAD DEL EJERCICIO (U.Antes.idpc - idpc)" crlf)
   (printout t "================================================================================" crlf))

(defmodule FINAL
   (import MAIN deftemplate ?ALL))

(deffunction FINAL::mes_to_numero (?p0))

(deffunction FINAL::to_serial_date (?p0 ?p1 ?p2))

(deftemplate FINAL::utilidad
   (slot determinada (default false)))

(deffunction FINAL::mes_to_numero
   (?mes)
   (switch ?mes
      (case enero then
         1)
      (case febrero then
         2)
      (case marzo then
         3)
      (case abril then
         4)
      (case mayo then
         5)
      (case junio then
         6)
      (case julio then
         7)
      (case agosto then
         8)
      (case septiembre then
         9)
      (case octubre then
         10)
      (case noviembre then
         11)
      (case diciembre then
         12)))

(deffunction FINAL::to_serial_date
   (?dia ?mes ?ano)
   (+ (* 10000 ?ano) (* 100 (mes_to_numero ?mes)) ?dia))

(defrule FINAL::inicio-kindle
   (declare (salience 10000))
   (empresa (nombre ?empresa))
   =>
   (bind ?archivo (str-cat "./doc/" ?empresa "/final.markdown"))
   (open ?archivo k "w")
   (printout k "--- " crlf)
   (printout k "layout: page" crlf)
   (printout k "--- " crlf)
   (printout k "" crlf))

(defrule FINAL::fin
   (declare (salience -10000))
   =>
   (close k))

(defrule FINAL::inicio-sin-utilidad-tributaria
   (declare (salience 10000))
   (cuenta (nombre utilidad-tributaria) (debe ?utilidad-tributaria&:(= ?utilidad-tributaria 0)))
   =>
   (assert (utilidad (determinada false)))
   (printout t "-módulo-------------------------- FINAL -- SIN utilidad tributaria ------" crlf))

(defrule FINAL::inicio-con-utilidad-tributaria
   (declare (salience 10000))
   (cuenta (nombre utilidad-tributaria) (debe ?utilidad-tributaria&:(> ?utilidad-tributaria 0)))
   =>
   (assert (utilidad (determinada true)))
   (printout t "-módulo-------------------------- FINAL -- CON utilidad tributaria ------" crlf))

(defrule FINAL::preparacion-quitando-abono
   (declare (salience 10000))
   ?abono <- (abono)
   =>
   (retract ?abono))

(defrule FINAL::preparacion-quitando-cargo
   (declare (salience 10000))
   ?cargo <- (cargo)
   =>
   (retract ?cargo))

(defrule FINAL::recuadro-de-balance
   (empresa (nombre ?nombre) (razon ?razon))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano))
   (subtotales (cuenta iva-credito) (acreedor ?iva-credito-acreedor) (deber ?iva-credito-deber))
   (subtotales (cuenta iva-debito) (acreedor ?iva-debito-acreedor) (deber ?iva-debito-deber))
   (subtotales (cuenta retencion-de-iva-articulo-11) (acreedor ?retencion-de-iva))
   (subtotales (cuenta caja) (deber ?caja-deber))
   (subtotales (cuenta caja) (acreedor ?caja-acreedor))
   (subtotales (cuenta banco-estado) (deber ?banco-estado-deber))
   (subtotales (cuenta banco-estado) (acreedor ?banco-estado-acreedor))
   (subtotales (cuenta gastos-administrativos) (acreedor ?gastos-acreedor) (deber ?gastos-deber))
   (subtotales (cuenta ingresos-percibidos-por-adelantado) (acreedor ?ingresos-adelantados))
   (subtotales (cuenta terreno) (deber ?terreno))
   (subtotales (cuenta edificio) (deber ?edificio))
   (subtotales (cuenta maquinaria) (deber ?maquinaria))
   (subtotales (cuenta mobiliario-y-equipo) (deber ?mobiliario))
   (subtotales (cuenta marca-alectrico) (deber ?marca-alectrico))
   (subtotales (cuenta plataforma-alectrico) (deber ?plataforma-alectrico))
   (subtotales (cuenta clientes) (deber ?clientes))
   (subtotales (cuenta colaboradores) (deber ?colaboradores))
   (subtotales (cuenta capital-social) (haber ?capital-social))
   (subtotales (cuenta proveedores) (deber ?proveedores-deber))
   (subtotales (cuenta proveedores) (acreedor ?proveedores-acreedor))
   (subtotales (cuenta letras-por-pagar) (deber ?letras-por-pagar-deber))
   (subtotales (cuenta letras-por-pagar) (acreedor ?letras-por-pagar-acreedor))
   (subtotales (cuenta prestamo-bancario) (acreedor ?prestamo-bancario))
   (subtotales (cuenta reserva-legal) (acreedor ?reserva-legal-acreedor) (deber ?reserva-legal-deber))
   (subtotales (cuenta utilidad) (acreedor ?utilidad-acreedor) (deber ?utilidad-deber))
   (subtotales (cuenta idpc) (acreedor ?idpc-acreedor) (deber ?idpc-deber))
   (subtotales (cuenta inventario) (deber ?inventario-deber) (acreedor ?inventario-acreedor))
   (subtotales (cuenta inventario-inicial) (deber ?inventario-inicial-deber) (acreedor ?inventario-inicial-acreedor))
   (subtotales (cuenta materiales) (deber ?materiales))
   (subtotales (cuenta insumos) (deber ?insumos))
   (subtotales (cuenta documentos-por-cobrar) (deber ?documentos-por-cobrar))
   (subtotales (cuenta cuentas-por-cobrar) (deber ?cuentas-por-cobrar))
   (subtotales (cuenta salarios-por-pagar) (deber ?salarios-por-pagar-deber))
   (subtotales (cuenta salarios-por-pagar) (acreedor ?salarios-por-pagar-acreedor))
   (subtotales (cuenta provision-impuesto-a-la-renta) (debe ?provision-impuesto-a-la-renta))
   (subtotales (cuenta impuesto-a-la-renta-por-pagar) (acreedor ?impuesto-a-la-renta-por-pagar))
   (subtotales (cuenta ppm) (deber ?ppm))
   (subtotales (cuenta amortizacion-acumulada-intangibles) (acreedor ?amortizacion-acumulada-intangibles&:(> ?amortizacion-acumulada-intangibles 0)))
   (subtotales (cuenta herramientas) (deber ?herramientas))
   (subtotales (cuenta depreciacion-acumulada-herramientas) (haber ?depreciacion))
   (totales (empresa ?empresa) (activos ?activos) (pasivos ?pasivos) (patrimonio ?patrimonio) (activo-circulante ?activo-circulante) (pasivo-circulante ?pasivo-circulante) (activo-fijo ?activo-fijo) (pasivo-fijo ?pasivo-fijo))
   (utilidad (determinada ?hay-utilidad-tributaria))
   (subtotales (cuenta software) (deber ?software))
   (subtotales (cuenta licencia-contaible) (deber ?licencia-contaible))
   (subtotales (cuenta aumentos-de-capital-aportes) (acreedor ?aportes))
   (subtotales (cuenta utilidades-acumuladas) (acreedor ?utilidades-acumuladas))
   (subtotales (cuenta autorizacion-uso-de-inmueble) (acreedor ?autorizacion-uso-de-inmueble))
   (subtotales (cuenta plataforma-ccm) (acreedor ?plataforma-ccm))
   =>
   (bind ?inventario-inicial (- ?inventario-inicial-deber ?inventario-inicial-acreedor))
   (bind ?inventario (- ?inventario-deber ?inventario-acreedor))
   (bind ?iva-por-cobrar (- ?iva-credito-deber ?iva-credito-acreedor))
   (bind ?iva-por-pagar (- ?iva-debito-acreedor ?iva-debito-deber))
   (printout t "=========================================================================" crlf)
   (printout k crlf crlf)
   (printout k "<br> <br> <br> <br> <br> <br> " crlf)
   (printout k "Solo se consideran las transacciones hasta el día " ?top tab ?mes_top "." crlf)
   (printout k "Cifras en pesos." crlf)
   (printout k "<table>" crlf)
   (printout k "<thead> <th colspan='6'> PARTIDA GENERAL FINAL " ?ano " </th> </thead> " crlf)
   (printout k "<thead> <th>  ACTIVO CIRCULANTE </th> <th> " ?activo-circulante "</th>" crlf)
   (printout k "<th > PASIVO CIRCULANTE </th> <th>" ?pasivo-circulante "</th> </thead>" crlf)
   (printout k "<tbody>" crlf)
   (printout k "<tr> <td> Caja </td> <td>" (- ?caja-deber ?caja-acreedor) "</td> <td> Proveedores. </td> <td> " (- ?proveedores-acreedor ?proveedores-deber) "</td> </tr>" crlf)
   (printout k "<tr> <td> Banco Estado </td> <td>" (- ?banco-estado-deber ?banco-estado-acreedor) "</td></tr>" crlf)
   (printout k "<tr> <td> Clientes </td> <td>" ?clientes "</td> <td>  IVA Débito </td> <td>" ?iva-por-pagar "</td> </tr>" crlf)
   (printout k "<tr> <td> Cuentas por Cobrar </td> <td>" ?cuentas-por-cobrar "</td></tr>" crlf)
   (printout k "<tr> <td> Retenciones </td> <td align='right' style='font-weight:bold; color: white; background-color: crimson'>(  " ?retencion-de-iva ")</td> </tr> " crlf)
   (printout k "<tr> <td> Colaboradores </td> <td> " ?colaboradores "</td> " crlf)
   (printout k "<td> SalariosXPagar </td> <td align='right'> " (- ?salarios-por-pagar-acreedor ?salarios-por-pagar-deber) "</td></tr> " crlf)
   (printout k "<tr> <td> IVA Crédito </td><td>" ?iva-por-cobrar "</td> " crlf)
   (printout k "<td> Ingresos Adelantados </td> </tr>" crlf)
   (printout k "<tr> <td> PPM </td> <td>" ?ppm "</td></tr> " crlf)
   (printout k "<tr> <td> Insumos</td> <td>" ?insumos "</td> </tr>" crlf)
   (if (eq diciembre ?mes_top)
      then
      (printout k "<tr> <td> Materiales </td> <td>" ?materiales "</td> </tr>" crlf)
      (printout k "<tr> <td> Inventario </td>" crlf)
      (printout k "<td>" ?inventario "</td> </tr> " crlf)
      else
      (printout k "<tr> <td> Inventario </td>" crlf)
      (printout k "<td>" ?inventario "</td> </tr>" crlf)
      (printout k "<tr> <td> Materiales </td>" crlf)
      (printout k "<td>" ?materiales "</td> </tr>" crlf))
   (if (eq true ?hay-utilidad-tributaria)
      then
      (printout k "<td> Impto Rta Determ. </td> <td>" ?idpc-acreedor "</td> ")
      (printout k "</tr>" crlf))
   (printout k "<thead> <th> ACTIVO FIJO </th> <th>" ?activo-fijo "</th> " crlf)
   (printout k "<th> PASIVO FIJO </th> <th>" ?pasivo-fijo "</th>  </thead> " crlf)
   (printout k "<tr> <td> Terreno </td> <td>" ?terreno "</td> " crlf)
   (printout k "<td> Préstamo Bancarios </td> <td>" ?prestamo-bancario "</td> </tr>" crlf)
   (printout k "<tr><td> Edificio </td> <td>" ?edificio "</td> </tr>" crlf)
   (printout k "<tr><td> Maquinaria </td> <td>" ?maquinaria "</td> <td colspan='2'> </td> </tr>" crlf)
   (printout k "<tr><td> Herramientas </td> <td>" ?herramientas "</td> <td colspan='2'> </td> </tr>" crlf)
   (printout k "<tr><td> Mobiliario y Equipamiento </td><td> 0 </td> <td colspan='2'> </td> </tr>" crlf)
   (printout k "<tr><td> Marca alectrico ® </td> <td>" ?marca-alectrico "</td> <td colspan='2'> </td> </tr>" crlf)
   (printout k "<tr><td> Plataforma alectrico ® </td> <td>" ?plataforma-alectrico "</td> <td colspan='2'> </td> </tr>" crlf)
   (printout k "<tr><td> Plataforma CCM SII® </td> <td>" ?plataforma-ccm "</td> <td colspan='2'> </td> </tr>" crlf)
   (printout k "<tr><td> Licencia Contaible ®  </td> <td>" ?licencia-contaible "</td> <td colspan='2'> </td> </tr>" crlf)
   (printout k "<tr><td> Autorización Uso de Inmueble </td> <td>" ?autorizacion-uso-de-inmueble "</td> <td colspan='2'> </td> </tr>" crlf)
   (printout k "<tr><td> Amortización Acumulada Intangibles </td> <td align='right' style='font-weight:bold; color: white; background-color: crimson'>(" ?amortizacion-acumulada-intangibles ")</td> <td colspan='2'> </td> </tr>" crlf)
   (printout k "<tr><td> Depreciación Acumulada Herramientas </td> <td align='right' style='font-weight:bold; color: white; background-color: crimson'>(" ?depreciacion ")</td><td colspan='2'> </td> </tr>" crlf)
   (printout k "<thead> <td> </td> <td> </td> <th> TOTAL PASIVO </th> <th> " ?pasivos "</th></thead>" crlf)
   (printout k "<thead> <td> </td> <td> </td> <th> PATRIMONIO </th> <th>" ?patrimonio "</th> </thead>")
   (printout k "<tr> <td colspan='2'></td> <td> Capital Social </td><td align='right'> " ?capital-social "</td> </tr>" crlf)
   (printout k "<tr> <td colspan='2'></td> <td> Reserva Legal </td> <td align='right' >" (- ?reserva-legal-acreedor ?reserva-legal-deber) "</td> </tr>" crlf)
   (printout k "<tr> <td colspan='2'></td> <td> Utilidades Acumuladas </td> <td align='right' >" ?utilidades-acumuladas "</td> </tr>" crlf)
   (printout k "<tr> <td colspan='2'></td> <td> Aportes </td> <td align='right' >" ?aportes "</td> </tr>" crlf)
   (printout k "<tr> <td colspan='2'></td> <td> Utilidad del Ejercicio </td><td align='right'>" (- ?utilidad-acreedor ?utilidad-deber) "</td> </tr>" crlf)
   (printout k "<thead><th>TOTAL ACTIVOS</th><th>" ?activos "</th><th>TOTAL PASIVO + PATRIMONIO</th><th>" (+ ?pasivos ?patrimonio) "</th></thead>" crlf)
   (printout k "<tr><td colspan='8'> " ?razon " </td> </tr>" crlf)
   (printout k "<tr><td colspan='8'> Partida General Final " ?ano " " ?razon "</td></tr>" crlf)
   (printout t ?razon crlf)
   (printout t Empresa tab ?nombre crlf)
   (printout t "Solo se consideran las transacciones hasta el día " ?top tab ?mes_top crlf)
   (printout t "               - PARTIDA GENERAL FINAL " tab ?ano " -" crlf)
   (printout t "                         CIFRAS EN PESOS                   " crlf)
   (printout t "------------------------------------------------------------------------" crlf)
   (printout t ACTIVO tab tab tab tab "|" PASIVO crlf)
   (printout t CIRCULANTE tab tab ?activo-circulante tab "|" CIRCULANTE tab tab ?pasivo-circulante crlf)
   (printout t "------------------------------------------------------------------------" crlf)
   (printout t "Efectivo y" tab tab tab "|" crlf)
   (printout t Caja....... tab (- ?caja-deber ?caja-acreedor) tab tab "|" Proveedores. tab (- ?proveedores-acreedor ?proveedores-deber) crlf)
   (printout t BancoEstado. tab (- ?banco-estado-deber ?banco-estado-acreedor) tab tab "|" crlf)
   (printout t Clientes..... tab ?clientes tab tab "|" "IVA Débito" tab ?iva-por-pagar crlf)
   (printout t CuentasXCobrar tab ?cuentas-por-cobrar tab tab "|" crlf)
   (printout t Colaboradores tab ?colaboradores tab tab "|" "SalariosXPagar" tab ?salarios-por-pagar-deber tab ?salarios-por-pagar-acreedor crlf)
   (printout t "IVA Crédito..." tab ?iva-por-cobrar tab tab "|" "Ing.Adelant." tab ?ingresos-adelantados crlf)
   (printout t "Retención IVA.." tab (- 0 ?retencion-de-iva) crlf)
   (printout t PPM ......... tab ?ppm tab tab "|" crlf)
   (printout t Insumos..... tab ?insumos tab tab "|" crlf)
   (if (eq diciembre ?mes_top)
      then
      (printout t Materiales tab ?materiales crlf)
      (printout t "Inventario Final" tab ?inventario crlf)
      else
      (printout t Inventario tab ?inventario crlf)
      (printout t Materiales tab ?materiales crlf))
   (if (eq true ?hay-utilidad-tributaria)
      then
      (printout t tab tab tab tab "|Impuesto    " crlf)
      (printout t tab tab tab tab "|Renta.Determ." tab ?idpc-acreedor crlf))
   (printout t "------------------------------------------------------------------------" crlf)
   (printout t ACTIVO tab tab tab tab "|" PASIVO crlf)
   (printout t FIJO tab tab tab ?activo-fijo tab "|" FIJO tab tab tab ?pasivo-fijo crlf)
   (printout t "------------------------------------------------------------------------" crlf)
   (printout t Terreno..... tab ?terreno tab tab "|" Prestamos crlf)
   (printout t Edificio.... tab ?edificio tab tab "|" Bancarios.. tab ?prestamo-bancario crlf)
   (printout t Maquinaria.. tab ?maquinaria tab tab "|" crlf)
   (printout t Herramientas tab ?herramientas tab tab "|" --------------------------------------- crlf)
   (printout t Mobiliario tab tab tab "|" TOTAL crlf)
   (printout t y.Equipo.... tab ?mobiliario tab tab "|" PASIVO tab tab tab ?pasivos crlf)
   (printout t marca alectrico ®. tab ?marca-alectrico tab tab "|" ======================================= crlf)
   (printout t plataforma alectrico ®. tab ?plataforma-alectrico tab tab "|" crlf)
   (printout t alectrico ®. tab ?software tab tab "|" crlf)
   (printout t alectrico ®. tab ?licencia-contaible tab tab "|" crlf)
   (printout t alectrico ®. tab ?plataforma-ccm tab tab "|" crlf)
   (printout t Aut Inmueble tab ?autorizacion-uso-de-inmueble tab tab "|" crlf)
   (printout t Amortizacion tab tab ?amortizacion-acumulada-intangibles tab "|" crlf)
   (printout t Dep. Acc. Herr. tab tab ?depreciacion tab "|" crlf)
   (printout t tab tab tab tab "|" tab tab PATRIMONIO crlf)
   (printout t tab tab tab tab "|" PATRIMONIO tab tab ?patrimonio crlf)
   (printout t tab tab tab tab "|" "Capital Social" . ?capital-social crlf)
   (printout t tab tab tab tab "|" "Reserva Legal" .. (- ?reserva-legal-acreedor ?reserva-legal-deber) crlf)
   (printout t tab tab tab tab "|" "Utilidades ACC" .. ?utilidades-acumuladas crlf)
   (printout t tab tab tab tab "|" "Aportes" .. ?aportes crlf)
   (printout t tab tab tab tab "|" "Utilidad del " crlf)
   (printout t tab tab tab tab "|" "Ejercicio...... " (- ?utilidad-acreedor ?utilidad-deber) crlf)
   (printout t "------------------------------------------------------------------------" crlf)
   (printout t tab tab tab tab "|" TOTAL crlf)
   (printout t TOTAL tab tab tab tab "|" "PASIVOS +" crlf)
   (printout t ACTIVOS tab tab tab ?activos tab "|" PATRIMONIO tab tab (+ ?pasivos ?patrimonio) crlf)
   (printout t "=========================================================================" crlf crlf crlf)
   (printout k "<tr> <hr> </tr>" crlf)
   (printout k "</tbody>" crlf)
   (printout k "</table>" crlf))

(defmodule CCM
   (import MAIN ?ALL))

(deffunction CCM::mes_to_numero_v (?p0))

(deffunction CCM::mes_to_numero_v
   (?mes)
   (switch ?mes
      (case enero then
         1)
      (case febrero then
         2)
      (case marzo then
         3)
      (case abril then
         4)
      (case mayo then
         5)
      (case junio then
         6)
      (case julio then
         7)
      (case agosto then
         8)
      (case septiembre then
         9)
      (case octubre then
         10)
      (case noviembre then
         11)
      (case diciembre then
         12)))

(defrule CCM::final
   (declare (salience -10000))
   =>
   (dribble-off))

(defrule CCM::inicio-de-modulo-csv
   (declare (salience 10000))
   (empresa (nombre ?empresa))
   (balance (mes ?mes) (ano ?ano))
   =>
   (printout t "-------------------- CCM -----------------------------------------------------------" crlf)
   (bind ?archivo (str-cat ?empresa "-" ?mes "-complemento-ccm-dribble.csv"))
   (dribble-on ?archivo)
   (printout t "Tipo Doc;Folio;Rut Contraparte;Tasa Impuesto;Razón Social Contraparte;Tipo Impuesto[1=IVA:2=LEY 18211];Fecha Emisión;Anulado[A];Monto Exento;Monto Neto;Monto IVA (Recuperable);Cod IVA no Rec;Monto IVA no Rec;IVA Uso Común;Cod Otro Imp (Con Crédito);Tasa Otro Imp (Con Crédito);Monto Otro Imp (Con Crédito);Monto Total;Monto Otro Imp Sin Crédito;Monto Activo Fijo;Monto IVA Activo Fijo;IVA No Retenido;Tabacos - Puros;Tabacos - Cigarrillos;Tabacos - Elaborados;Impuesto a Vehiculos Automóviles;Codigo sucursal SII;Numero Interno;Emisor/Receptor" crlf))

(defrule CCM::filas-csv-extranjero
   (empresa (nombre ?empresa))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano))
   ?ccm <- (ccm (fecha-emision ?fecha&:(neq nil ?fecha)) (folio ?folio) (partida ?numero) (tipo-documento ?tipo) (monto-total ?total) (rut-contraparte ?rut) (razon-social-contraparte ?nombre) (monto-iva-recuperable ?iva) (monto-neto ?neto) (tasa-impuesto ?tasa) (numero-interno ?numero-interno) (tasa-iva-retenido ?tasa-iva-retenido))
   (proveedor (nombre ?nombre) (social ?razon-social) (rut ?rut))
   (test (neq nil ?rut))
   (test (neq nil ?razon-social))
   (test (neq na ?folio))
   (test (numberp ?tipo))
   (test (eq ?mes julio))
   (test (eq 45 ?tipo))
   =>
   (printout t (str-cat ?tipo ";" (if (eq ?folio nil)
      then
      ""
      else
      ?folio) ";" ?rut ";" ?tasa ";" ?razon-social ";1;" ?fecha ";;;" ?neto ";" ?iva ";;;;15;19;" ?iva ";" ?total ";;;;;;;;;;;;") crlf))

(defrule CCM::filas-csv
   (empresa (nombre ?empresa))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano))
   ?ccm <- (ccm (fecha-emision ?fecha&:(neq nil ?fecha)) (folio ?folio) (partida ?numero) (tipo-documento ?tipo) (monto-total ?total) (rut-contraparte ?rut) (razon-social-contraparte ?nombre) (monto-iva-recuperable ?iva) (monto-neto ?neto) (monto-exento ?exento) (tasa-impuesto ?tasa) (numero-interno ?numero-interno) (tasa-iva-retenido ?tasa-iva-retenido))
   (proveedor (nombre ?nombre) (social ?razon-social) (rut ?rut))
   (test (neq nil ?rut))
   (test (neq na ?folio))
   (test (numberp ?tipo))
   (test (neq 45 ?tipo))
   (test (eq ?mes julio))
   =>
   (printout t (str-cat ?tipo ";" (if (eq ?folio nil)
      then
      ""
      else
      ?folio) ";" ?rut ";" ?tasa ";" ?razon-social ";1;" ?fecha ";;" ?exento ";" ?neto ";" ?iva ";;;;;;;" ?total ";;;;;;;;;;;;") crlf))

(defrule CCM::filas-ccm
   (empresa (nombre ?empresa))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano))
   ?ccm <- (ccm (fecha-emision nil) (folio ?folio) (partida ?numero) (tipo-documento ?tipo-documento) (monto-total ?monto-total) (rut-contraparte ?rut) (razon-social-contraparte ?razon-social) (monto-iva-recuperable ?iva) (monto-neto ?neto))
   ?ccm-existente <- (ccm (partida ?numero) (tipo-documento nil))
   (test (neq nil ?tipo-documento))
   =>
   (modify ?ccm (fecha-emision (str-cat (if (> ?dia 9)
      then
      ""
      else
      "0") ?dia "-" (if (< (mes_to_numero ?mes) 10)
      then
      "0"
      else
      "") (mes_to_numero ?mes) "-" ?ano))))

(defrule CCM::filas-ccm-que-faltan
   (no)
   (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano))
   (not (exists
             (ccm (partida ?numero) (tipo-documento ?tipo-documento&:(neq nil ?tipo-documento)))))
   ?ccm-existente <- (ccm (partida ?numero) (tipo-documento nil))
   =>
   (printout t ?numero tab ?dia tab ?mes --------------------------- crlf))

(defrule CCM::filas-ccm-nil
   (no)
   (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano))
   (ccm (partida ?numero) (tipo-documento nil))
   =>)

(defmodule RCV
   (import MAIN ?ALL))

(deffunction RCV::mes_to_numero_2 (?p0))

(deffunction RCV::mes_to_numero_2
   (?mes)
   (switch ?mes
      (case enero then
         1)
      (case febrero then
         2)
      (case marzo then
         3)
      (case abril then
         4)
      (case mayo then
         5)
      (case junio then
         6)
      (case julio then
         7)
      (case agosto then
         8)
      (case septiembre then
         9)
      (case octubre then
         10)
      (case noviembre then
         11)
      (case diciembre then
         12)))

(defrule RCV::final
   (declare (salience -10000))
   =>
   (dribble-off))

(defrule RCV::inicio-de-modulo-csv
   (declare (salience 10000))
   (empresa (nombre ?empresa))
   (balance (mes ?mes) (ano ?ano))
   =>
   (printout t "----- RCV -- esto genera un archivo para complementar el registro de compra venta con documentos manuales-" crlf)
   (bind ?archivo (str-cat ?empresa "-" ?mes "-complemento-rcv-dribble.csv"))
   (dribble-on ?archivo)
   (printout t "Tipo Doc;Folio;Rut Contraparte;Tasa Impuesto;Razon Social Contraparte;Tipo Impuesto[1=IVA:2=LEY 18211];Fecha Emision;Monto Exento;Monto Neto;Monto IVA (Recuperable);Cod IVA no Rec;Monto IVA no Rec;IVA Uso Comun;Cod Otro Imp (Con Credito);Tasa Otro Imp (Con Credito);Monto Otro Imp (Con Credito);Monto Otro Imp Sin Credito;Monto Activo Fijo;Monto IVA Activo Fijo;IVA No Retenido;Tabacos - Puros;Tabacos - Cigarrillos;Tabacos - Elaborados;Codigo sucursal SII;Numero Interno;Emisor/Receptor;Monto Total;Tipo Transaccion" crlf))

(defrule RCV::filas-csv-extranjero
   (empresa (nombre ?empresa))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano))
   ?ccm <- (ccm (fecha-emision ?fecha&:(neq nil ?fecha)) (folio ?folio) (partida ?numero) (tipo-documento ?tipo) (monto-total ?total) (rut-contraparte ?rut) (razon-social-contraparte ?nombre) (monto-iva-recuperable ?iva) (monto-neto ?neto) (monto-exento ?exento) (tasa-impuesto ?tasa) (numero-interno ?numero-interno) (tasa-iva-retenido ?tasa-iva-retenido))
   (proveedor (nombre ?nombre) (social ?razon-social) (rut ?rut))
   (test (neq nil ?rut))
   (test (neq nil ?razon-social))
   (test (neq na ?folio))
   (test (numberp ?tipo))
   (test (eq ?mes julio))
   (test (eq 45 ?tipo))
   =>
   (printout t (str-cat ?tipo ";" (if (eq ?folio nil)
      then
      ""
      else
      ?folio) ";" ?rut ";" ?tasa ";" ?razon-social ";1;" ?fecha ";" ?exento ";" ?neto ";" ?iva ";;;;15;19;" ?iva ";;;;;;;;;;;" ?total ";1") crlf))

(defrule RCV::filas-csv
   (no)
   (empresa (nombre ?empresa))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano))
   ?ccm <- (ccm (fecha-emision ?fecha&:(neq nil ?fecha)) (folio ?folio) (partida ?numero) (tipo-documento ?tipo) (monto-total ?total) (rut-contraparte ?rut) (razon-social-contraparte ?nombre) (monto-iva-recuperable ?iva) (monto-neto ?neto) (monto-exento ?exento) (tasa-impuesto ?tasa) (numero-interno ?numero-interno) (tasa-iva-retenido ?tasa-iva-retenido))
   (proveedor (nombre ?nombre) (rut ?rut) (social ?razon-social))
   (test (neq nil ?rut))
   (test (neq na ?folio))
   (test (numberp ?tipo))
   (test (neq 45 ?tipo))
   (test (eq ?mes julio))
   =>
   (printout t (str-cat ?tipo ";" (if (eq ?folio nil)
      then
      ""
      else
      ?folio) ";" ?rut ";" ?tasa ";" ?razon-social ";1;" ?fecha ";" ?exento ";" ?neto ";" ?iva ";;;;;;;" ?total ";;;;;;;;;;;;") crlf))

(defrule RCV::filas-csv-solo-verifica-los-nombres-que-no-hacen-match
   (no)
   (empresa (nombre ?empresa))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano))
   ?ccm <- (ccm (fecha-emision ?fecha&:(neq nil ?fecha)) (folio ?folio) (partida ?numero) (tipo-documento ?tipo) (monto-total ?total) (rut-contraparte ?rut) (razon-social-contraparte ?nombre) (monto-iva-recuperable ?iva) (monto-neto ?neto) (tasa-impuesto ?tasa) (numero-interno ?numero-interno) (tasa-iva-retenido ?tasa-iva-retenido))
   (proveedor (nombre ?nombre2))
   (test (neq ?nombre2 ?nombre))
   =>
   (printout t ?nombre tab ?nombre2 tab ".................." crlf))

(defmodule REMUNERACIONES
   (import MAIN deftemplate ?ALL))

(deffunction REMUNERACIONES::mes_to_numero (?p0))

(deffunction REMUNERACIONES::to_serial_date (?p0 ?p1 ?p2))

(deffunction REMUNERACIONES::mes_to_numero
   (?mes)
   (switch ?mes
      (case enero then
         1)
      (case febrero then
         2)
      (case marzo then
         3)
      (case abril then
         4)
      (case mayo then
         5)
      (case junio then
         6)
      (case julio then
         7)
      (case agosto then
         8)
      (case septiembre then
         9)
      (case octubre then
         10)
      (case noviembre then
         11)
      (case diciembre then
         12)))

(deffunction REMUNERACIONES::to_serial_date
   (?dia ?mes ?ano)
   (+ (* 10000 ?ano) (* 100 (mes_to_numero ?mes)) ?dia))

(defrule REMUNERACIONES::inicio-de-modulo-mensual
   (declare (salience 10000))
   (empresa (nombre ?empresa))
   =>
   (set-strategy breadth)
   (printout t "-------------------- REMUNERACIONES ------------------" crlf))

(defrule REMUNERACIONES::fin-de-modulo-mensual
   (declare (salience -10000))
   (empresa (nombre ?empresa))
   =>
   (set-strategy breadth)
   (printout t "---------fin-------- REMUNERACIONES ------------------" crlf))

(defrule REMUNERACIONES::csv-del-libro-de-remuneraciones-electronicos
   =>
   (printout t "Elaborar exportar csv para llenar mensualmente el libro de remuneraciones electronicos" crlf))

(defrule REMUNERACIONES::csv-previred
   =>
   (printout t "Elaborar exportador csv para declarar y pagar mensualmente las imposiciones en previred" crlf))

(defrule REMUNERACIONES::actulizar-ccm-y-contabilidad
   =>
   (printout t "Elaborar csv para declarar las remuneraciones en el ccm" crlf))

(defrule REMUNERACIONES::generar-asientos-para-llevar-libro-de-remuneraciones
   =>
   (printout t "Elaborar asientos contables en alectrico" crlf))

(defrule REMUNERACIONES::plantilla
   (declare (salience 1))
   (trabajador (mes-inicio ?mes) (ano-inicio ?ano) (nombre ?nombre) (afp ?afp) (salud ?salud))
   (afp (nombre ?afp))
   (salud (nombre ?salud))
   (remuneracion (trabajador ?nombre) (mes julio) (monto ?sueldo))
   (contrato (funcion ?funcion) (trabajador ?nombre) (dedicacion ?dedicacion) (jornada ?jornada) (diaria ?diaria) (duracion ?duracion) (tipo-de-duracion ?tipo-de-duracion))
   =>
   (printout t trabajador: ?nombre crlf afp: tab ?afp crlf salud: tab ?salud crlf)
   (printout t crlf "********** Contrato ******" crlf funcion tab ?funcion crlf jornada tab ?jornada crlf tab ?dedicacion crlf tab ?duracion crlf tab ?tipo-de-duracion crlf diaria: ?diaria crlf "**************************" crlf))

(defrule REMUNERACIONES::calculo-de-descuentos-legales
   (salario (nombre ?nombre))
   (remuneracion (trabajador ?nombre) (mes ?mes) (monto ?imponible) (dias-trabajados ?dias-trabajados) (semana-corrida ?semana-corrida) (declarada ?declarada) (pagada ?pagada) (impuesta ?impuesta))
   (trabajador (diaria ?diaria) (mes-inicio ?mes-inicio) (ano-inicio ?ano-inicio) (nombre ?nombre) (afp ?afp) (salud fonasa) (duracion ?duracion))
   (afp (nombre ?afp) (comision ?comision) (sis ?sis))
   (salud (nombre ?salud) (cotizacion ?cotizacion))
   (afc (duracion ?duracion) (comision ?afc))
   =>
   (bind ?sueldo (* ?diaria (+ ?dias-trabajados ?semana-corrida)))
   (printout t crlf)
   (printout t "===================================" crlf)
   (printout t "---- " ?mes tab ?nombre " -----" crlf)
   (printout t d.trabajados: tab ?dias-trabajados crlf)
   (printout t sem.-corrida: tab ?semana-corrida crlf)
   (printout t remuneracion: tab ?sueldo crlf)
   (printout t previsio-afp: tab (round (* ?sueldo 0.1)) crlf)
   (printout t comision-afp: tab (round (* ?sueldo ?comision)) crlf)
   (printout t .....oblig. ":" tab (round (* ?sueldo (+ 0.1 ?comision))) crlf)
   (printout t comision-afc: tab (round (* ?sueldo ?afc)) crlf)
   (printout t cotizac.sis.: tab (round (* ?sueldo ?sis)) crlf)
   (printout t cotiza.salud: tab (round (* ?sueldo ?cotizacion)) crlf)
   (printout t "-------------------------" crlf)
   (printout t AFP: tab (round (* ?sueldo (+ 0.1 ?comision ?sis ?afc))) crlf)
   F
   (printout t SALUD: tab (round (* ?sueldo ?cotizacion)) crlf)
   (printout t TOTAL: tab (round (* ?sueldo (+ 0.1 ?comision ?sis ?cotizacion ?afc))) crlf)
   (printout t LIQUI: tab (round (- ?sueldo (* ?sueldo (+ 0.1 ?comision ?sis ?cotizacion ?afc)))) crlf)
   (printout t "===================================" crlf)
   (printout t (if (eq ?declarada true)
      then
      DECLARADA
      else
      NO-DECLARADA) tab)
   (printout t (if (eq ?pagada true)
      then
      PAGADA
      else
      NO-PAGADA) tab)
   (printout t (if (eq ?impuesta true)
      then
      IMPUESTA
      else
      NO-IMPUESTA) crlf)
   (printout t crlf))

(defmodule KINDLE
   (import MAIN ?ALL))

(deffunction KINDLE::mes_to_numero_v (?p0))

(deffunction KINDLE::mes_to_numero_v
   (?mes)
   (switch ?mes
      (case enero then
         1)
      (case febrero then
         2)
      (case marzo then
         3)
      (case abril then
         4)
      (case mayo then
         5)
      (case junio then
         6)
      (case julio then
         7)
      (case agosto then
         8)
      (case septiembre then
         9)
      (case octubre then
         10)
      (case noviembre then
         11)
      (case diciembre then
         12)))

(defrule KINDLE::inicializando-archivos
   (declare (salience 10000))
   (empresa (nombre ?empresa))
   (balance (ano ?ano))
   =>
   (bind ?archivo (str-cat "./doc/" ?empresa ".markdown"))
   (open ?archivo k "w")
   (printout t "Archivo para html y kindle: " ?archivo crlf)
   (printout k "--- " crlf)
   (printout k "title: " ?empresa crlf)
   (printout k "permalink: /" ?empresa "/ " crlf)
   (printout k "layout: page" crlf)
   (printout k "--- " crlf))

(defrule KINDLE::cierre
   (declare (salience -10000))
   =>
   (close))

(defrule KINDLE::inicio-de-modulo-kindle
   (declare (salience 9000))
   (empresa (nombre ?empresa))
   (ticket (numero ?numero))
   =>
   (assert (cabeza ?numero)))

(defrule KINDLE::encabezado
   ?c <- (cabeza ?numero)
   ?partida <- (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano))
   (revision (voucher ?voucher) (revisado true) (partida ?numero) (folio ?folio) (descripcion ?descripcion) (legal ?legal) (rcv ?rcv) (ccm ?ccm) (a-corregir ?a-corregir) (old ?old) (tipo ?tipo))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (retract ?c)
   (printout k crlf crlf)
   (printout k "<br> <br> <br> <br> <br> <br> " crlf)
   (printout k "<table>" crlf)
   (printout k "<thead><th colspan='6'>Partida " ?numero "</th></thead>" crlf)
   (printout k "<tbody>" crlf)
   (assert (fila ?numero)))

(defrule KINDLE::footer
   (declare (salience 60))
   ?fila <- (fila ?numero)
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (empresa (nombre ?empresa) (razon ?razon))
   (partida (numero ?numero) (proveedor ?proveedor) (debe ?debe) (haber ?haber) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion ?descripcion) (actividad ?actividad))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (retract ?fila)
   (printout k "<tr> <hr> </tr>" crlf)
   (printout k "<tr> <td> </td> <td> " ?debe " </td> <td> " ?haber "</td> <td> ( " ?dia " de " ?mes tab ?ano tab " ) </td> </tr>" crlf)
   (printout k "<tr><td colspan='8'> " ?razon " </td> </tr>" crlf)
   (printout k "<tr><td colspan='8'> Partida " ?numero ": " ?descripcion " </td></tr>" crlf)
   (if (neq nil ?proveedor)
      then
      (printout k "<tr> <td>efectuado a " ?proveedor " </td> </tr>" crlf))
   (printout k "<tr><td colspan = '8'> " ?actividad "</td> </tr>" crlf)
   (printout k "</tbody>" crlf)
   (printout k "</table>" crlf))

(defrule KINDLE::muestra-libro-mayor-resultados-subcuentas
   (declare (salience 65))
   (fila ?numero)
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (empresa (nombre ?empresa))
   ?partida <- (partida (numero ?numero) (debe ?debe) (haber ?haber) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion ?descripcion))
   ?padre <- (cuenta (liquidada false) (partida ?numero) (empresa ?empresa) (nombre ?nombre) (dia ?dia) (mes ?mes) (ano ?ano) (debe ?debe1) (haber ?haber1) (saldo ?saldo1) (grupo resultado))
   ?cuenta <- (cuenta (mostrada-en-partida false) (partida ?numero) (empresa ?empresa) (padre ?nombre) (dia ?dia) (mes ?mes) (ano ?ano) (nombre ?nombre2) (debe ?debe2) (haber ?haber2) (saldo ?saldo2) (grupo resultado) (origen ?origen))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   (test (neq 0 (+ ?debe1 ?haber1)))
   =>
   (modify ?cuenta (mostrada-en-partida true))
   (printout k "<tr> <td colspan='2'>" ?saldo2 " </td> <td colspan='2'> " ?nombre2 # ?nombre " </td></tr>" crlf))

(defrule KINDLE::muestra-libro-mayor-activos-subcuentas
   (declare (salience 65))
   (fila ?numero)
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   (empresa (nombre ?empresa))
   ?partida <- (partida (numero ?numero) (debe ?debe) (haber ?haber) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion ?descripcion))
   ?padre <- (cuenta (liquidada false) (partida ?numero) (empresa ?empresa) (nombre ?nombre) (dia ?dia) (mes ?mes) (ano ?ano) (debe ?debe1) (haber ?haber1) (saldo ?saldo1) (grupo activo))
   ?cuenta <- (cuenta (mostrada-en-kindle false) (partida ?numero) (empresa ?empresa) (padre ?nombre) (dia ?dia) (mes ?mes) (ano ?ano) (nombre ?nombre2) (debe ?debe2) (haber ?haber2) (saldo ?saldo2) (grupo activo) (origen ?origen))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   (test (neq 0 (+ ?debe1 ?haber1)))
   =>
   (modify ?cuenta (mostrada-en-kindle true))
   (printout k "<tr><td colspan='2'>" ?saldo2 "</td> <td colspan='2'>" ?nombre2 # ?nombre "</td> </tr>" crlf))

(defrule KINDLE::muestra-libro-mayor-pasivos-subcuentas
   (declare (salience 64))
   (fila ?numero)
   (empresa (nombre ?empresa))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   ?partida <- (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (debe ?debe) (haber ?haber))
   ?padre <- (cuenta (liquidada false) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (nombre ?nombre) (debe ?debe1) (haber ?haber1) (saldo ?saldo1) (grupo pasivo))
   ?cuenta <- (cuenta (mostrada-en-kindle false) (partida ?numero) (empresa ?empresa) (padre ?nombre) (nombre ?nombre2) (dia ?dia) (mes ?mes) (ano ?ano) (debe ?debe2) (haber ?haber2) (saldo ?saldo2) (origen ?origen))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   (test (neq 0 (+ ?debe1 ?haber1)))
   =>
   (modify ?cuenta (mostrada-en-kindle true))
   (printout k "<tr> <td> " ?saldo2 " </td> <td> </td> <td colspan='7'> " ?nombre2 # ?nombre " </td> </tr> " crlf))

(defrule KINDLE::muestra-libro-mayor-activos-mayores
   (declare (salience 63))
   (fila ?numero)
   (empresa (nombre ?empresa))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   ?partida <- (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (debe ?debe) (haber ?haber))
   ?cuenta <- (cuenta (mostrada-en-kindle false) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (nombre ?nombre) (debe ?debe1) (haber ?haber1) (saldo ?saldo) (padre false) (grupo activo))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   (test (neq 0 (+ ?debe1 ?haber1)))
   =>
   (modify ?partida (debe (+ ?debe ?debe1)) (haber (+ ?haber ?haber1)))
   (modify ?cuenta (mostrada-en-kindle true))
   (printout k "<tr>  <td> </td> <td> " ?debe1 "</td> <td> " ?haber1 "</td> <td> a[" ?nombre "] </td> </tr>" crlf))

(defrule KINDLE::muestra-de-resultados
   (declare (salience 62))
   (fila ?numero)
   (empresa (nombre ?empresa))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   ?partida <- (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (debe ?debe) (haber ?haber))
   ?cuenta <- (cuenta (mostrada-en-kindle false) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (nombre ?nombre) (debe ?debe1) (haber ?haber1) (saldo ?saldo1) (padre false) (grupo resultado))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (modify ?partida (debe (+ ?debe ?debe1)) (haber (+ ?haber ?haber1)))
   (modify ?cuenta (mostrada-en-kindle true))
   (printout k "<tr>  <td> </td> <td>" ?debe1 " </td> <td> " ?haber1 "</td> <td> r[" ?nombre "] </td> </tr>" crlf))

(defrule KINDLE::muestra-cuentas-tributarias
   (declare (salience 62))
   (fila ?numero)
   (empresa (nombre ?empresa))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   ?partida <- (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (debe ?debe) (haber ?haber))
   ?cuenta <- (cuenta (mostrada-en-kindle false) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (nombre ?nombre) (debe ?debe1) (haber ?haber1) (saldo ?saldo1) (padre false) (grupo tributario))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (modify ?partida (debe (+ ?debe ?debe1)) (haber (+ ?haber ?haber1)))
   (modify ?cuenta (mostrada-en-kindle true))
   (printout k "<tr>  <td> </td> <td> " ?debe1 "</td> <td>" ?haber1 "</td> <td> t[" ?nombre "] </td></tr> " crlf))

(defrule KINDLE::muestra-libro-mayor-pasivos-mayores
   (declare (salience 62))
   (fila ?numero)
   (empresa (nombre ?empresa))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   ?partida <- (partida (numero ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (debe ?debe) (haber ?haber))
   ?cuenta <- (cuenta (mostrada-en-kindle false) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (nombre ?nombre) (debe ?debe1) (haber ?haber1) (saldo ?saldo1) (padre false) (grupo pasivo))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   (test (neq 0 (+ ?debe1 ?haber1)))
   =>
   (modify ?partida (debe (+ ?debe ?debe1)) (haber (+ ?haber ?haber1)))
   (modify ?cuenta (mostrada-en-kindle true))
   (printout k "<tr>  <td> </td> <td> " ?debe1 " </td> <td> " ?haber1 " </td> <td> p[" ?nombre "] </td> </tr>" crlf))

(defrule KINDLE::muestra-libro-patrimonio
   (declare (salience 61))
   (fila ?numero)
   (empresa (nombre ?empresa))
   (balance (dia ?top) (mes ?mes_top) (ano ?ano_top))
   ?partida <- (partida (numero ?numero) (debe ?debe) (haber ?haber) (dia ?dia) (mes ?mes) (ano ?ano) (descripcion ?descripcion))
   ?cuenta <- (cuenta (mostrada-en-kindle false) (partida ?numero) (dia ?dia) (mes ?mes) (ano ?ano) (empresa ?empresa) (nombre ?nombre) (debe ?debe1) (haber ?haber1) (saldo ?saldo1) (padre false) (grupo patrimonio) (origen real))
   (test (> ?saldo1 0))
   (test (>= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
   =>
   (modify ?partida (debe (+ ?debe ?debe1)) (haber (+ ?haber ?haber1)))
   (modify ?cuenta (mostrada-en-kindle true))
   (printout k " <tr> <td> </td> <td> " ?debe1 " </td> <td>  " ?haber1 " </td> <td> " ?nombre " </td> </tr>" crlf))

(defmodule RESULTADO-KINDLE
   (import MAIN deftemplate ?ALL))

(deffunction RESULTADO-KINDLE::mes_to_numero (?p0))

(deffunction RESULTADO-KINDLE::to_serial_date (?p0 ?p1 ?p2))

(deffunction RESULTADO-KINDLE::mes_to_numero
   (?mes)
   (switch ?mes
      (case enero then
         1)
      (case febrero then
         2)
      (case marzo then
         3)
      (case abril then
         4)
      (case mayo then
         5)
      (case junio then
         6)
      (case julio then
         7)
      (case agosto then
         8)
      (case septiembre then
         9)
      (case octubre then
         10)
      (case noviembre then
         11)
      (case diciembre then
         12)))

(deffunction RESULTADO-KINDLE::to_serial_date
   (?dia ?mes ?ano)
   (+ (* 10000 ?ano) (* 100 (mes_to_numero ?mes)) ?dia))

(defrule RESULTADO-KINDLE::inicio
   (declare (salience 10000))
   =>
   (printout t "--modulo-------------- RESULTADO KINDLE ----------" crlf))

(defrule RESULTADO-KINDLE::inicio-kindle
   (declare (salience 10000))
   (empresa (nombre ?empresa))
   =>
   (bind ?archivo (str-cat "./doc/" ?empresa "/resultado-financiero.markdown"))
   (open ?archivo k "w")
   (printout k "--- " crlf)
   (printout k "title: " ?empresa "-resultado-financiero" crlf)
   (printout k "permalink: /" ?empresa "-resultado-financiero/ " crlf)
   (printout k "layout: page" crlf)
   (printout k "--- " crlf))

(defrule RESULTADO-KINDLE::fin
   (declare (salience -10000))
   =>
   (close k))

(defrule RESULTADO-KINDLE::estado-de-resultados-mensual
   (balance (dia ?top) (mes ?mes_top) (ano ?ano))
   (empresa (nombre ?empresa) (razon ?razon))
   (subtotales (cuenta ingresos-brutos) (acreedor ?ingresos-brutos))
   (subtotales (cuenta ventas) (acreedor ?ventas))
   (subtotales (cuenta devolucion-sobre-ventas) (debe ?devolucion-sobre-ventas))
   (subtotales (cuenta compras) (debe ?compras))
   (subtotales (cuenta gastos-sobre-compras) (debe ?gastos-sobre-compras))
   (subtotales (cuenta inventario-inicial) (debe ?inventario-inicial))
   (subtotales (cuenta inventario-final) (debe ?inventario-final))
   (subtotales (cuenta gastos-administrativos) (debe ?gastos-administrativos-debe) (haber ?gastos-administrativos-haber))
   (subtotales (cuenta gastos-ventas) (debe ?gastos-ventas))
   (subtotales (cuenta gastos-en-investigacion-y-desarrollo) (debe ?gastos-en-investigacion-y-desarrollo))
   (subtotales (cuenta gastos-promocionales) (deber ?gastos-en-promocion))
   (subtotales (cuenta costos-de-ventas) (deber ?costos-de-ventas&:(> ?costos-de-ventas 0)))
   (subtotales (cuenta idpc) (haber ?idpc))
   (subtotales (cuenta reserva-legal) (haber ?reserva-legal))
   (subtotales (cuenta utilidad) (acreedor ?utilidad-del-ejercicio-haber) (deber ?utilidad-del-ejercicio-debe))
   (subtotales (cuenta provision-impuesto-a-la-renta) (acreedor ?provision-impuesto-a-la-renta))
   (subtotales (cuenta amortizacion-intangibles) (debe ?amortizacion-intangibles))
   (subtotales (cuenta depreciacion) (debe ?depreciacion))
   (subtotales (cuenta salarios) (debe ?salarios))
   (subtotales (cuenta impuesto-a-la-renta-por-pagar) (acreedor ?impuesto-a-la-renta-por-pagar))
   (subtotales (cuenta perdidas-ejercicios-anteriores) (debe ?pea))
   (subtotales (cuenta perdida-por-correccion-monetaria) (debe ?perdida-por-correccion-monetaria))
   (subtotales (cuenta ganancia-por-correccion-monetaria) (haber ?ganancia-por-correccion-monetaria))
   (tasas (idpc ?tasa-idpc) (mes diciembre) (ano ?ano))
   =>
   (bind ?gastos-administrativos (- ?gastos-administrativos-debe ?gastos-administrativos-haber))
   (bind ?utilidad-del-ejercicio (- ?utilidad-del-ejercicio-haber ?utilidad-del-ejercicio-debe))
   (bind ?ventas-netas (- ?ventas ?devolucion-sobre-ventas))
   (bind ?compras-totales (+ ?compras ?gastos-sobre-compras))
   (bind ?compras-netas ?compras-totales)
   (bind ?existencias (+ ?compras-netas ?inventario-inicial))
   (bind ?utilidad-bruta (- ?ventas-netas ?costos-de-ventas))
   (bind ?gastos-de-operacion (+ ?gastos-administrativos ?gastos-ventas ?gastos-en-investigacion-y-desarrollo ?gastos-en-promocion ?amortizacion-intangibles ?depreciacion ?salarios))
   (bind ?utilidad-de-operacion (- ?utilidad-bruta ?gastos-de-operacion ?pea))
   (bind ?utilidad-antes-de-reserva ?utilidad-de-operacion)
   (bind ?utilidad-antes-de-idpc (- ?utilidad-de-operacion ?reserva-legal))
   (printout k "<br> <br> <br> <br> <br> <br> " crlf)
   (printout k "Solo se consideran las transacciones hasta el día " ?top " de " ?mes_top "." crlf)
   (printout k "Cifras en pesos." crlf)
   (printout k crlf)
   (printout k "ESTADO DE RESULTADOS " crlf)
   (printout k crlf)
   (printout k "---|---|---|---|---|---|---|---|---|" crlf)
   (printout k "|" ?ingresos-brutos "| Ingresos Brutos Percibidos A.29-LIR" crlf)
   (printout k "| (+) " ?ventas "| Ventas" crlf)
   (printout k "| (-) -  |  Rebajas sobre ventas" crlf)
   (printout k "| (-) " ?devolucion-sobre-ventas "| Devoluciones sobre ventas" crlf)
   (printout k "| (-) - | Descuentos sobre ventas" crlf)
   (printout k "|||| (+) " ?ventas-netas "| Ventas Netas" crlf)
   (printout k "|||| (-) " ?costos-de-ventas "| Costos de Ventas A.30-LIR" crlf)
   (printout k "| (+)" ?compras "| Compras" crlf)
   (printout k "| (+)" ?gastos-sobre-compras "| Gastos sobre Compras" crlf)
   (printout k "| (-) 0 | Rebajas sobre Compras" crlf)
   (printout k "| (-) 0 | Devoluciones sobre Compras" crlf)
   (printout k "| (-) 0 | Descuentos sobre Compras" crlf)
   (printout k "| (=)" ?compras-totales "| Compras Netas" crlf)
   (printout k "| (+) " ?inventario-inicial tab "| Inventario Inicial" crlf)
   (printout k "| (=) " ?existencias "| Mercadería Disponible para la Venta " crlf)
   (printout k "| (-) " ?inventario-final "| Inventario Final " crlf)
   (printout k "| | | | (=)" ?utilidad-bruta "| UTILIDAD BRUTA (Ventas Netas - Costo de Ventas)" crlf)
   (printout k "| | | | | (-) " ?gastos-de-operacion "| Gastos de Operación A.31-LIR)" crlf)
   (printout k "|" ?gastos-administrativos "| Gastos del Dpto Administración" crlf)
   (printout k "|" ?gastos-ventas "| Gastos del Dpto Ventas" crlf)
   (printout k "|" ?gastos-en-investigacion-y-desarrollo " | Gastos en I+D" crlf)
   (printout k "|" ?gastos-en-promocion "|  Gastos en Promocion" crlf)
   (printout k "|" ?amortizacion-intangibles "| Amortizacion Intangibles" crlf)
   (printout k "|" ?depreciacion "| Depreciacion" crlf)
   (printout k "|" ?salarios "| Salarios" crlf)
   (printout k "| | | | | (-) " ?pea " | Pérdida Ejercicio Anterior PEA A.33-LIR)" crlf)
   (printout k "| | | | " ?utilidad-de-operacion "| UTILIDAD DE OPERACION (U.Bruta - G.Op. - PEA)" crlf)
   (printout k "| | | | | (-) 0 | Otros Gastos" crlf)
   (printout k "| | | | (=)" ?utilidad-antes-de-reserva "| UTILIDAD ANTES DE RESERVA (U.Op-Reserva Lega)" crlf)
   (printout k "| | | | | (-) " ?reserva-legal "| Reserva Legal" crlf)
   (printout k "| | | | (=) " ?utilidad-antes-de-idpc "| RESULTADO DE EXPLOTACION" crlf)
   (printout k "| | | |     " ?utilidad-antes-de-idpc "| UTILIDAD ANTES DE IMPUESTO A LA RENTA (U.Antes.Reserva - idpc)" crlf)
   (printout k "| | | | | (-)" ?perdida-por-correccion-monetaria "| Pérdida por Corrección Monetaria" crlf)
   (printout k " | | | | | (+)" ?ganancia-por-correccion-monetaria "| Ganancia por Corrección Monetaria" crlf)
   (printout k " | | | | (=)" (- (+ ?utilidad-antes-de-idpc ?ganancia-por-correccion-monetaria) ?perdida-por-correccion-monetaria) "| RESULTADO FUERA DE EXPLOTACION" crlf)
   (if (> ?utilidad-antes-de-idpc ?utilidad-del-ejercicio)
      then
      (printout k "| | | | | (-) " ?idpc "| Impuesto Determinado, factor es " ?tasa-idpc " en " ?ano crlf))
   (if (< ?utilidad-antes-de-idpc ?utilidad-del-ejercicio)
      then
      (printout k "| | | | | (X) " ?idpc "| Impuesto que no se aplica por que hubo pérdida tributaria" crlf))
   (printout k "| | | | (=) " ?utilidad-del-ejercicio "| UTILIDAD DEL EJERCICIO (U.Antes.idpc - idpc)" crlf))

